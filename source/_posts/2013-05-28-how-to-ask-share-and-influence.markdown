---
layout: post
title: "一点点对提问，分享和影响力的看法"
date: 2013-05-28 21:48
comments: true
categories: 
- Think
tags:
- Sharing
- Influence
- Management 
---

[Rework]: http://www.amazon.com/Rework-Jason-Fried/dp/0307463745

一晚和一位旧同事在 KFC 从10点夜谈到凌晨 3 点。很久没那么年轻过了。我们谈了什么？ 主要是提问，指导和分享，人格魅力和影响力，投资等方面。  

## 提问，指导和分享  
谈这个问题的起源是因为他刚换工作，觉得某些＂领导＂交代任务的时候，啥都不说清楚，什么相关文档资料都不给。所以他很郁闷地在想，到底是他太笨还是本该交待的没说清楚。后来直到他去问时，对方才像挤牙膏那么挤出来那么一点指引，和给他本该先交出的文档。  

到底应该怎么问问题，怎样才算是好的指导和分享呢？  

### 什么该交代  
对于交代任务，到底什么应该说清楚？ 从我的自身体验来讲，无论对方是否对所要交代的任务有经验，任务**需求**和项目内**约定俗成**的东西，比如代码规范，公司或项目里特殊的工具环境配置，代码库结构等，是必须交代清楚，至少文档齐备。当然还有一个是任务的**时间要求**，因为这是提供给接收任务方做好时间安排和判断应该什么时候寻求帮助的重要条件。如果这些东西缺失了，就是交代任务的人的责任了。  

我一般的做法，是先把文档给出去，可是不会先详细说明。这是因为不同的人，对资料吸收能力不同，我会期望任务接收者先花时间看了，心中有了问题，再针对情况进一步决定是否需要更进一步解说。这样既有针对性，还可以用以初步判断一个人的自学和领悟能力。  

### 什么可以问，怎么问  
对于接收任务的一方来说，如果发现上面提到的应有资料有缺失，我觉得是完全可以而且应该先索取和问清楚，因为你不具备这个责任和条件知道这方面的知识。   

拿到资料后，通常在问问题之前，我觉得都必须**认真看过资料 30 分钟到 1 小时的时间**。时间短了，感觉并不能了解清楚；时间长了，如果对文档所说的还是没什么头绪的话，就不应该再闷头苦猜，而是应该求教于交代任务的人，以避免浪费无谓时间。毕竟工作任务都是有时间限制的。  

在看资料的时候，我觉得需要了解的，是各个文档的大概内容，相互关系和在任务里各自起的作用。完后，就可以向交代任务的人确定任务开始的方向和提出看文档后产生的具体疑问了。问问题，最好是可以**一次把所有问题有条理的列出来，一次去问。而不是碰到一个问题，问一个**。  

正如前面提及，你问的问题，交代任务的人可以用以推断你的能力。需求方面的问题，可以推断出你的逻辑思维能力和对业务的理解。这方面的问题，一开始的时候不懂，是情有可原的，因为毕竟缺乏业务背景。系统设计或技术方面的问题，就可以看出你的经验，技术功底了。对于行业公共技术，应先尽可能 Google 找资料，没办法了，再去问，一方面避免问了些小白问题，另一方面可以提高自己学习能力。对于公司内部特有的技术或框架，我觉得能理解当然最好，时间紧迫的话，求助也无妨。  

### 怎样才算是好的指导和分享  
当同事或下属向你请教，或者你发现他们有什么地方做的不够好的时候，及时向他们提供指导和经验分享，才是一位称职的专业人士。但是怎样的指导才叫好呢？那晚，那个同事和我提到他之前遇到的几种指导的风格：  

1. 手把手风格  
    这种指导方式，是每个新手最喜欢的。因为领导事无巨细，把要完成任务的每一个步骤，都详细解说一遍。最重要的是，讲到你明白为止，而且还是极有耐心，毫无怨言那种。  

2. 详尽风格  
    这种风格，也会交代出要完成任务的主要步骤，只是没那么详尽，所以也不会向第一种那样毫无怨言的讲到明白为止啦。  

3. **启发性风格**  
    这种风格，只会提示重要的点或者步骤，甚至只发个网上的链接让发问者参考，可能就完事了。还是不懂的话，再针对大流程和框架解说一下。反正基本原则是怎么都不轻易把答案直接告诉你。  

你们喜欢哪种？你们觉得我是哪种呢？  

那位旧同事说，他现在觉得最后一种，才是最好的。这是因为**授人以鱼不如授人以渔**。如果教会你在某个公司，某个项目里，特定的某些做法，让你可以顺利地完成任务，可能只是一时受益。但是长远来说，如果养成依赖，靠别人指导，而不是自己分析解决问题，其实一点用处都没有。相反，如果能一步步启发思考，尽量让你自己解决问题，以后无论什么环境，都能很好适应。  

其实我的风格是第三种 (别说我自夸啊，不信去问那个家伙) 。但是当初他刚毕业，我带他做项目时，他被我折磨地痛苦的要死。他和另一个人老是在琢磨该不该问我问题。看我脸色不太对劲的话，就不敢问了。回想起来，那时候，他不会我们系统的框架，不懂 Javascript，只想写 JAVA。而我不断逼他自己主要看JS代码，教他怎么猜测代码块的上下文，在不懂全部方法的情况下，猜测 Bug 可能在什么地方，怎么忽略代码细节，领略大意等。也是难为他了。  

其实我相信我做的是对的，可是为什么他那时那么痛苦呢？  

1. 语气问题
    有时候我的语气感觉比较凶和严，所以他会认为我不够耐心。其实用第三种风格的话，每次提醒的点是不多的，所以一旦语气不好，别人就会认为你没耐心，不想教。我的情况是，对女的态度好点，对聊得来或关系好的朋友说话会没那么多顾虑，对一些感觉学习态度有问题，或者自己不仔细思考的人我会没耐心。他是第二种。  

2. 解释是否通俗易懂  
    他说他现在的一个同事，在向他解释一些他不懂的技术概念的时候，讲的很通俗易懂。而我，当时给他的感觉是解释的不够容易理解。除了上面的语气和耐心也有影响外，一个人要把事情解释到通俗易懂，他必须对要解释的事物有深刻了解，然后能从听众的角度，简化概念，尽量转换成比较容易理解的事物类比。这点我确实是做得不够好的。因为以前我的技术功底确实不深厚 (当然现在也还不行)，要能做到深入浅出确实不行。而且我有时没能从听众角度出发，也是造成难理解的原因。  

## 人格魅力与影响力  
那天晚上，我们聊到了电影中国合伙人，俞敏洪，罗永浩，马云等。我那个同事说以前他以为新东方火的原因是上课幽默。其实后来想想应该不是，主要应该是俞敏洪乐于分享，而且难能可贵的是把自己失败的地方和人分享，把自己和听众拉到同一平面上，产生共鸣，另听众感同身受。不像一些只会宣传自己成功经验的人，虽然一时能让听众产生仰慕之情，但感觉高高在上，经验之谈也飘渺不切实际。  

我至今碰到的，和尊敬的有非凡人格魅力的人或公司，都是肯无私分享自己实际经验，技能和想法，让别人觉得能从你身上学到东西的人或公司。一旦你身边围绕着一群向你学习的忠实听众，人格魅力和影响力就出来了。像马云，罗永浩还有现在 IT 领域各种大牛等，凭借他们无私的演讲，博客，对开源贡献等积累的忠实听众，为他们的公司，产品营销，创业起了多大的作用。在 [Rework][] 里面 **Build an Audience** 那节说的很好：    

>the most fortunate companies have _audiences_.  
...  
When you build an audience, you don’t have to buy people’s attention—they give it to you. This is a 
huge advantage. So build an audience. Speak, write, blog, tweet, make videos, whatever. Share 
information that’s valuable and you’ll slowly but surely build a loyal audience. Then, when you need 
to get the word out, the right people will already be listening.

在此，我也要向之前无私教导我的人，Google 公司，令我获益的各位大牛和博客致敬，努力成为分享的一员。
