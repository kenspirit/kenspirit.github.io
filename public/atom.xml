<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking in Crowd / 鹄思乱想</title>
  <subtitle>Swan flying in the immense sky</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2017-07-16T07:21:50.000Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name>鹄思乱想</name>
    <email>chengusky@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>是否被收割智商税，取决于你的智商</title>
    <link href="http://www.thinkingincrowd.me/2017/07/16/you-are-paiding-intellectual-tax-because/"/>
    <id>http://www.thinkingincrowd.me/2017/07/16/you-are-paiding-intellectual-tax-because/</id>
    <published>2017-07-16T04:20:24.000Z</published>
    <updated>2017-07-16T07:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在的社会，特别喜欢造新的词。知识变现，碎片化学习可是最近知识化浪潮的产物。  </p>
<p>可是知识从来都是需要钱才能获得的啊，上学，买书，参加培训，甚至看个展览，哪样不是作者用他的知识来变现？当然，知识越来越便宜了是真相，也无法避免，以至于现在可以用少于一顿饭的价格，买一本书，听一个在线讲座。  </p>
<p>信息的泛滥，低廉的价格，极其便利的付费方式，膨胀了的焦虑感，终于刮起来知识变现这股潮流。  </p>
<p>碎片化学习承担了当前知识变现的主打形式。当然，很多人对这种形式不屑一顾，甚至讽刺其实质为一些人收割智商税的形式而已。这种论调一部分客观原因是太多滥竽充数的人和东拼西凑的内容。不过更重要的是一种认为碎片化学习不是真正的学习的偏见。  </p>
<p><strong>那些听了一些在线讲座，买了一些课程，但是觉得没什么收益，被作者收割了智商税，认为碎片化学习就无法深入学习的人，他们本身的逻辑就有问题</strong>。因为其实这些人从结果（没深入学习）反过来推导原因（碎片化是不对的）。更重要的是，他们的态度和出发点就完全错误。  </p>
<p>先不说沉浸式学习是否能真的深入掌握知识和技能（比如我们以前在学校的学习），难道你们没听过各个领域的大家，在坐公交的时候，甚至饭堂吃饭的时候，也在看书，这些不是碎片化学习？  </p>
<p><strong>用碎片化的时间来学习，不是碎片化学习。妄想在碎片化的时间稍微学习和听到一些捷径就能有成果，才是被收智商税和碎片化的原因。</strong></p>
<p>我们得承认，借着知识变现的浪潮，浑水摸鱼，滥竽充数的人实在是太多。鱼龙混杂，特别是标题党横行的情况下，仅仅凭借着用各种话术编造的吸引人的话题，还有一些难验真假的头衔来判断一些直播和分享是否值得参与是很困难的。但是，我们就要因噎废食吗？这其实和你不小心被包装和封面骗买的一本烂书有区别吗？  </p>
<p>为什么说那些认为自己被收智商税的人，是自己的态度和出发点有问题？他们觉得那些大道理，对他来说其实都不知道听过了多少遍了，不能立竿见影，不实际。有的人说还不如买本什么经典的书来看。可是问题是，有些人就是不知道这些概念，有些人也是从这些讲座里才听到书籍的推荐。对于这些人来说，这些课程和直播的内容就是值得的。对于那些说听过了不知道多少次的人来说，活该被收智商税，因为他们从来不实践，而是一次次的寻找捷径。  </p>
<p>所有这些线上的直播和课程，可以说都只是引子，只是师傅领入门的东西。修行肯定是需要靠自己再花费更大的功夫来深入的。如果抱着探索的态度，怎么会认为自己被收智商税呢？听了不好的就当买了本烂书。况且，心态正确的人，很少被标题党的东西吸引。  </p>
<p><strong>如果线上的课程都是引子，那用碎片化的时间来学习这些内容，真的一点收益都没有吗？不是，恰恰相反。</strong>正是因为它们是入门级的介绍，碎片化的时间才更有效和容易吸收。我今年听了好一些关于心理学，亲密关系的知乎 Live 和其它课程，如 Momself 公众号的「换个角度，洞悉相处之道」，就觉得非常值得。每集大概 10 分钟的内容，讲解简单易懂的概念，启发个人的思考，让我更容易地理解这个领域大致的学习框架。<strong>这对于以后自己探索如何深入有非常大的帮助。</strong>薛兆丰老师在得到的「北大经济学课」，也是朝着为听众搭建完整和正确的经济学框架目标出发的，没一节课后都提出问题，鼓励思考。只要认真参与的，怎么可能没有收获？  </p>
<p>你被收割智商税了吗？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的社会，特别喜欢造新的词。知识变现，碎片化学习可是最近知识化浪潮的产物。  &lt;/p&gt;
&lt;p&gt;可是知识从来都是需要钱才能获得的啊，上学，买书，参加培训，甚至看个展览，哪样不是作者用他的知识来变现？当然，知识越来越便宜了是真相，也无法避免，以至于现在可以用少于一顿饭的价格，
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Learning" scheme="http://www.thinkingincrowd.me/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>指责，只会让你爱的人越来越远</title>
    <link href="http://www.thinkingincrowd.me/2017/07/08/criticism-will-only-pushing-your-loved-one-further-and-further/"/>
    <id>http://www.thinkingincrowd.me/2017/07/08/criticism-will-only-pushing-your-loved-one-further-and-further/</id>
    <published>2017-07-08T14:06:31.000Z</published>
    <updated>2017-07-09T07:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>估计每个人都听过这样一句话：“责之心，爱之切”。这是很多父母在训斥子女时，经常引用的话。当然，更现代的表述是：“我还不是为了你好？” 这句话一说出来，是站在了多高的道德高地啊，听的人很多时候真的无力反驳。  </p>
<p>可是，斥责真的是会让你爱的人变得更好吗？变成一个更优秀的人？还是你想他们成为的样子？  </p>
<p>真的不一定。甚至可能反作用，让他离你越来越远，成为你讨厌的人。  </p>
<p>最近在看 John Gottman 博士那本著名的「the Seven Principles of Making Marriage Work」，他通过一个建立在 Seattle 的 Love Lab（爱情实验室）来观察一些夫妻在他们的房子里度过一个周末时的情况，来研究婚姻成功的关键因素。他说通过观察一对夫妻的谈话，可能仅仅需要 15 分钟，就能预测他们的婚姻成功与否，正确率高达 91%。  </p>
<p>Gottman 博士解释他如何通过观察夫妻对话来判断和预测他们的婚姻最终是否会步向失败，甚至是离婚的。  </p>
<h2 id="严厉的开端"><a href="#严厉的开端" class="headerlink" title="严厉的开端"></a>严厉的开端</h2><p>当我们把自己的 “爱之切” 通过言语释放出来时，<strong>很多时候我们都是在向对方提出要求。这种要求其实内里包含了不满，所以，它经常以斥责的形态出现。</strong>这样的话，对话的开端，要么是严厉的斥责，要么在埋怨。“你就不能帮忙做一下家务吗？只知道看电脑，玩手机！” “你这么笨手笨脚的，还是等我来了。还指望你帮忙，别添乱了。” 根据 Gottman 博士的观察和统计，对话前 5 分钟的基调，基本可以决定最后的结果。<strong>如果一开头是以斥责开始，即便中间对方有一些示好，缓和的尝试，96% 的概率还是会最后不欢而散。</strong>  </p>
<p>一旦对话以严厉的口吻和基调开始，负面的交互也就非常容易接着发生。这些交互被 Gottman 博士总结为「Four Horsemen of the Apocalypse」，也就是启示录中的四骑士，传统上被解释为瘟疫、战争、饥荒和死亡。如果这四骑士持续出现，基本上可以断定婚姻可持续的可能性就比较低了。我们来看看它们是什么。  </p>
<h3 id="批评指责"><a href="#批评指责" class="headerlink" title="批评指责"></a>批评指责</h3><p>正如前面所说，我们总会有所抱怨的。但是，稍有不慎，抱怨就会转变成杀伤力更大的批评指责。  </p>
<p>上面我举的两个例句，其实就是<strong>批评指责</strong>。为什么？因为它们<strong>通常包含了“总是”，“从不”，“只知道”等全局范围的词语，并且带上人身攻击</strong>，如“笨手笨脚”。如果只是抱怨，可以通过稍微柔和，和具体一些的方式，比如：“我下班回来都累死了，现在还要忙着做饭，你能不能别看手机，帮忙晾衣服。” 这种<strong>既表达了个人的情绪，但是同时只限定在当前的情景，并给出明确的指示的抱怨，其实就比指责好很多，抵触也比较小</strong>。  </p>
<h3 id="蔑视"><a href="#蔑视" class="headerlink" title="蔑视"></a>蔑视</h3><p><strong>蔑视的出现其实代表个人心中觉得某种程度的优越感，自己比他人某方面更好，更优秀</strong>。我们每个人都有自己的优点和缺点，但是，如果你在亲密关系中，用这种优越感给对方施压，其实是很危险的。  </p>
<p>我们其实真的不容易察觉到自己在蔑视对方。但是，冷嘲热讽、挖苦、嘲笑、翻白眼、反问其实都是蔑视的形式。有时我察觉到我和家人教训儿子的时候，如果使用到了一些反问的语句，他会变得更暴躁，更不容易接受我们的意见。比如说，我们经常会说和听到的句子：“你XXX不就行了吗？”，“说得好像你做得到似的，你做给我看看？”</p>
<p>挑衅其实也是蔑视的一种。“我就是不XXX，怎么样？” 这类型的语句，话说我也从我儿子的话里了不少。我也不知道他哪里学来的，可能是他气着老妈后，被老妈这么怼过吧。  </p>
<p><strong>蔑视给对方的感觉会产生对你的厌恶感。所以，在这种感觉下，你怎么能期望对方听你的话，接受你的建议？</strong>  </p>
<h3 id="辩解"><a href="#辩解" class="headerlink" title="辩解"></a>辩解</h3><p>在对方的一些质疑情况下，另一方很容易会辩解。当然，有时候其实 Ta 说的是实情，在解释具体的原因，并不是在敷衍。但是质疑方一般在争吵情况下都不会接受解释，尤其是那些名副其实的辩解经典 “为什么你老是挑我的刺？做的好的时候不见你表扬一下？还有完没完？”  </p>
<p>因为，<strong>辩解其实表达的意思是：“错不在我，而是你”</strong>。所以，根据 Gottman 博士的调查，辩解很少凑效，反而更容易激起对方的怒火。  </p>
<h3 id="冷战"><a href="#冷战" class="headerlink" title="冷战"></a>冷战</h3><p>冷战，是当前面那些火爆的争吵升级后，导致某一方转身离开，以不回应表示回应。  </p>
<p>根据调查表示，<strong>男性充当冷战方的发起者居多。冷战和逃避其实是一个人因为心理上和身体上感受到无法承受的持续性的压力后的自我保护行为。某一方越是经常感觉到对方施加的压力，就越是警觉和担心任何可能导致对方发飙的事情，也越容易冷战。</strong>  </p>
<p>为什么说男人基本是冷战发起者居多呢？Gottman 博士说这其实是人类进化以来的结果。在面对冲突的情况下，心跳，血压，肾上腺素都会极具升高。你的伴侣会很自然的进入战斗状态，导致 Ta 不去关注问题本身和理性的思考，而是要么迎战，要么逃跑。  </p>
<p>那么，如果一个男性不是骂回去，甚至施以暴力的话，他就是选择冷战和离开了。而且，男性和女性具研究真的是很不相同的。因为在人类进化过程力，女性是哺育的角色，她们需要有快速冷静的能力才能产生足够的乳汁来哺育幼儿。所以，她们即便在暴怒后，也能比较快平息。但是男性不一样的。因为他们以前的指责是负责狩猎和保持警觉，所以那些冷静的慢一些的，更容易生存下来。  </p>
<p>正因为<strong>男性会承受更多的压力且消退得慢，他们更容易选择逃避。也正因为这样，男性对待冲突的看法，会比女性持有更加负面的情绪，持续更长时间</strong>。这也是为什么，有时双方吵架后，女方平静下来可能觉得没什么大事了，男的反而可能就突然说分手，或者离婚了。  </p>
<h3 id="修复的尝试"><a href="#修复的尝试" class="headerlink" title="修复的尝试"></a>修复的尝试</h3><p>四骑士的出现，不是说就一定会导致关系破裂。但是如果这些场景持续发生，就很危险了。Gottman 博士说它们能达到 82% 的离婚预测准确率。如果，在争吵过程中，某一方能尝试发出一些修复关系的信号的话，那会对关系有所缓和。但是如果任何一方试图做出修复，但是另一方一直视而不见，那关系破裂的概率可高达 90% 以上。  </p>
<p>修复的尝试可能只是一个小小的微笑，一句俏皮话，自嘲，或者简单的对不起。但是，如果前面的四骑士出现的次数越多，修复的尝试越难，即便双方可能越努力尝试。  </p>
<p>这本书我第一章还没有看完，但是已经被深深吸引和折服。之前我在「亲密关系的沟通没你想的那么简单」那篇文章里也提到自己以前和老婆意见相左，和听到抱怨的时候，会因为自己在反思和处理信息，并怕持续冲突而不怎么辩驳，也就基本形成了冷战的模式。之前「提问，而不是斥责」那篇文章里，也因为和儿子的对话里觉察到斥责的坏处。  </p>
<p>所以说，谈话的基调真的很重要。还有，在拿这这篇文章里的观点去指责对方前，先反省一下自己。  </p>
<p>「提问，而不是斥责」: 2017-04-09-ask-instead-of-scold<br>「亲密关系的沟通没你想的那么简单」: 2017-03-31-intimate-communication-is-not-as-easy-as-you-think</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;估计每个人都听过这样一句话：“责之心，爱之切”。这是很多父母在训斥子女时，经常引用的话。当然，更现代的表述是：“我还不是为了你好？” 这句话一说出来，是站在了多高的道德高地啊，听的人很多时候真的无力反驳。  &lt;/p&gt;
&lt;p&gt;可是，斥责真的是会让你爱的人变得更好吗？变成一个更
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Conflict" scheme="http://www.thinkingincrowd.me/tags/Conflict/"/>
    
      <category term="Criticism" scheme="http://www.thinkingincrowd.me/tags/Criticism/"/>
    
  </entry>
  
  <entry>
    <title>理所当然，在亲密关系里最要不得</title>
    <link href="http://www.thinkingincrowd.me/2017/07/01/taking-it-for-granted-is-the-last-thing-you-want-in-relationship/"/>
    <id>http://www.thinkingincrowd.me/2017/07/01/taking-it-for-granted-is-the-last-thing-you-want-in-relationship/</id>
    <published>2017-07-01T13:34:12.000Z</published>
    <updated>2017-07-08T14:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一眨眼，来北京差不多一年了。自己也不知不觉到了一个整数的节点了。  </p>
<p>到了这个节点，才开始对亲密关系有比较正确的认识，和主动去学习，说实在挺替自己和家人伤心的。不是说我和家人关系不好，而是，我只是简单的认为，只要距离足够近，时间足够多，没什么争吵，就可以了。不是总说，生活是平淡的嘛。  </p>
<p>最近断断续续在加班后，用 Audible 听完「The 5 love languages」这本书。书里面说到一个观点：<strong>每个人都有不同的表达和感受爱的方式。如果我们表达的不当，可能并没有认识到对方的需求和表达的爱意，并产生误解。</strong>  </p>
<p>书里列举了这几种爱的语言：  </p>
<ol>
<li>肯定的言语  </li>
<li>有质量的陪伴  </li>
<li>收获礼物  </li>
<li>服务行为  </li>
<li>肢体的接触  </li>
</ol>
<p>我觉得书里用语言来比喻挺合适的，尤其是当两个人的爱的表达方式是同一类型的时候，各自的要求也尽相同，就像不同的方言一样。每个人可能都熟悉自己的方言，而忽视了对方的表达方式。这个时候，<strong>我们会认为对方做的一些事情是那么的理所当然，也并不认为那是对方像你表达爱意的方式。我们把自己的要求当作是理所当然的，用自己的方言来观察对方，认为对方没有做到自己熟悉的爱的表达方式，而误解对方不爱自己了。</strong>  </p>
<p>回头看自己，我对爱的主要表达方式，应该是第 4 种。在我关爱的人需要帮助的时候，我会尽最大的努力来做任何事情。老婆生病了，在一旁照顾，买水，买吃的，各种跑腿。她怀孕了，我马上从香港回珠海，每天 6 点起来买菜做饭等。这些事情，一般都会有一个触发点，可以让我观察到她有需要帮助的时候，我可以不顾一切付出。但是，这种表达方式，意味着在没有实体的事情发生，我观察不到对方有什么实际需要帮助的地方时，我就基本不会做什么。就像最开始我说的，反正生活在一起，就可以了。  </p>
<p>但是，我老婆最主要的感受爱的方式，是第 2 种。我以前不懂得，「有质量的」陪伴中「有质量的」意思不是我一直认为的只要距离足够近，时间足够多就可以了。以前和她一起坐公司班车上班的时候，她会偶尔对我说，外面的海很蓝，花很漂亮。但是面对这些要约，我只是「嗯」一句，眼睛还是盯着自己的电脑在写代码。所以，你可以想想她心中是慢慢积累了多少不满。她的抱怨，其实从大学谈恋爱时我总是在图书馆就存在了。可是，我却会认为这是她不够独立。  </p>
<p>我在意的对方的爱的表达，可能是第 1 种吧。一点点对我的肯定，我就能安心下来。一些猜疑，就会有很大的打击。所以，我之前并没有认识到她的需要，自己的表达方式又不同，当她表达失望的情绪时，我其实会感觉非常委屈和失落。觉得自己没做错什么，却没有被理解。  </p>
<p>当各自用自己理所当然的方式来要求对方，没有接纳对方的真实想法和需求时，是很痛苦的。而这又往往会造成恶性循环。如果没有人打破这个循环，最后的结果可能就很糟糕了。我来了北京后，一次的吵架让机缘巧合的接触到一些关于亲密关系的知乎 Live 和课程，也多了些时间思考，感觉自己才有了真正的改变。</p>
<p><strong>当我真正接纳了自己的想法和行为，也认识到对方的需要和自己的是不一致的时候，就没有那么委屈和痛苦。认识到了对方的不同，没有了任何的理所当然，自己的语言，行为和心态就有很大的不同。</strong>  </p>
<p>今年的生日，迈出了我最大的一步。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一眨眼，来北京差不多一年了。自己也不知不觉到了一个整数的节点了。  &lt;/p&gt;
&lt;p&gt;到了这个节点，才开始对亲密关系有比较正确的认识，和主动去学习，说实在挺替自己和家人伤心的。不是说我和家人关系不好，而是，我只是简单的认为，只要距离足够近，时间足够多，没什么争吵，就可以了。不
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Love Language" scheme="http://www.thinkingincrowd.me/tags/Love-Language/"/>
    
  </entry>
  
  <entry>
    <title>什么时候，我们变成只会向外推卸责任了？</title>
    <link href="http://www.thinkingincrowd.me/2017/06/11/when-do-we-become-blaming-others-for-everything/"/>
    <id>http://www.thinkingincrowd.me/2017/06/11/when-do-we-become-blaming-others-for-everything/</id>
    <published>2017-06-11T11:05:48.000Z</published>
    <updated>2017-07-09T07:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在新京报看到一则<a href="http://epaper.bjnews.com.cn/html/2017-06/06/content_684198.htm?div=-1" target="_blank" rel="external">新闻</a>：  </p>
<blockquote>
<p>据媒体报道，乌鲁木齐市民陈先生电话邀请心情不好的前同事芳芳来家中做客，在陈先生到厨房准备水果时，本来坐在客厅的芳芳突然从客厅窗户坠下五楼身亡。芳芳的父母将陈先生告上法庭，索要死亡赔偿金及丧葬费等近30万元。涉事法院认定陈先生有一定过错，承担20%的次要责任，判决其赔偿芳芳家人8万元。  </p>
<p>该案中，法院判决陈先生的依据是《侵权责任法》第6条，即“行为人因过错侵害他人民事权益，应当承担侵权责任”，这就必须严格考察行为人是否有过错。法院给出的理由是，陈先生“明知芳芳当时心情不好，本应当给予安慰并注意她有无反常行为，但其未预料到芳芳会发生从其家窗户坠落而亡的严重后果，陈先生理应承担责任。”  </p>
</blockquote>
<p>按这种道理推理过去，亲戚或者朋友心情不好，约你出来聊天逛街，然后 Ta 在你陪伴的路上自己突然服毒，冲出马路，或者从商场跳楼自杀，法院也可以说你没有尽到拉住 Ta 的义务。一个人心情不好，去找心理咨询，期间可能毫无征兆地突然跳楼自杀，心理咨询师也要负责任？  </p>
<p>我不知道，对陈先生提起诉讼的芳芳家人，是怎么看待这件事情的。如果芳芳是找了自己的一个亲戚长辈聊天，然后也趁机跳楼自杀，他们会去起诉吗？法院的判决也实在是荒唐。如果说是未成年人出现意外，可能需要对监护人追究责任。可是一个具有完全行事能力的人，在清醒状态下，自己犯错，竟然还要追究他人的过错。不过，本人并非律师，这里我就不过多评论。  </p>
<p>我想说的一点其实是，很多人都只会向外推卸责任，不反思自己的过失，尤其是一些“弱者”。  </p>
<p>芳芳的家人，似乎并没有反思：  </p>
<ul>
<li>为什么芳芳要跳楼？她遇到的挫折，真的就那么无法承受？  </li>
<li>父母之前有没有，或者是怎样进行挫折教育的？  </li>
<li>在她心情低到极点前，一点征兆都没有？家人从来没有发现，也没有疏导？  </li>
<li>在芳芳在遭遇到挫折，心情低到极点的时候，为什么找人谈心的，是一个外人，而不是家人，甚至父母？  </li>
</ul>
<p>我觉得，要追究责任的话，家人和父母本身远远比一个热情招待她的外人要多。他们是不是更加应当承担所谓的“侵权责任”？他们事后真诚地像陈先生了解过芳芳当时的状态和心情吗？他们的心痛程度，内疚程度，获取钱财补偿的期望，哪个更高？诉讼对他们来说，是寻求正义，还是推卸责任的挡箭牌？不知道以后还有哪些人，敢和他们成为朋友，听他们的倾诉？或许芳芳在心情极度低落的时候，找外人倾诉，也是有原因的。  </p>
<p>现在的社会，真的看到很多类似的新闻：那些医闹，因自己疏忽导致孩子受伤的父母等。  </p>
<p>当我们只会向外推卸责任的时候，基本上能获取的，就仅仅是外在的物质赔偿。这些物质赔偿，真的能给他们带来心灵的安慰和改善？<strong>不懂得自省，只会向外推责，收获的只能是疏远，和永不成长的自己</strong>。克雷洛夫 伊凡·安德烈维奇·克雷洛夫(Ivan Andreyevich Krylov)，俄国最伟大的寓言作家说过：“<strong>自己的思想愈卑劣，就愈要挑剔别人的错。</strong>”.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在新京报看到一则&lt;a href=&quot;http://epaper.bjnews.com.cn/html/2017-06/06/content_684198.htm?div=-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新闻&lt;/a&gt;：  &lt;/p&gt;
&lt;b
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Responsibility" scheme="http://www.thinkingincrowd.me/tags/Responsibility/"/>
    
  </entry>
  
  <entry>
    <title>你可能不经意地就“贴标签”了</title>
    <link href="http://www.thinkingincrowd.me/2017/05/31/labelling-is-easy/"/>
    <id>http://www.thinkingincrowd.me/2017/05/31/labelling-is-easy/</id>
    <published>2017-05-31T10:52:25.000Z</published>
    <updated>2017-07-09T07:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>“中国人就是没礼貌”，“河南人就是XXX”，“处女座就是YYY” 这些言论，很多人现在都能理解它们其实是一种“贴标签”的行为。  </p>
<p>虽然不能说“贴标签”完全是坏事，因为它其实是人在认识事物的过程中发展出来的一种手段，可以让我们快速面对陌生的事物，知道如何更好地和它们相处。但是，如果我们习惯了“贴标签”这种行为，甚至推广到一些需要建立亲密关系的人或者事物的时候，问题可能就很大。标签一旦贴上，片面的观点就容易产生，我们就不容易看到背后的互动关系和问题的根本原因。  </p>
<h2 id="对他人的标签"><a href="#对他人的标签" class="headerlink" title="对他人的标签"></a>对他人的标签</h2><p>“你怎么老是这样？”，“Ta 什么都好，就是不好好 XX。”，“Ta 就是不爱回家，老在外面疯”，“怎么那么笨” 这些话，应该不少人都说过，尤其是父母对着自己的“熊孩子”的时候。  </p>
<p>以前我儿子不喜欢叫人。所以，其实我妈和老婆经常说他“怎么这么没有礼貌”。我虽然不知道儿子为什么不喜欢叫人，但是在这方面我能理解他，因为我自己小时候也是一样。所以，这个“标签”其实我不太认同。他不肯叫人的时候，我就和儿子说：“你看到熟悉的人，可以微笑一下，说声 Hi，或者挥挥手。也不一定是说 XXX 好。”  </p>
<p>后面经观察证实，他会很热情地向他熟悉和喜欢的人打招呼。只是，小朋友比较实诚，心情不好，遇到他不熟悉，甚至是不喜欢的人，就鸟都不鸟一下，招呼也不打。他们不懂得敷衍和皮笑肉不笑。最近「妈呀我呀」公众号推了一篇有趣的文章「我以为当妈已经够难了，没想到当小孩才是最难的！」，里面的一个场景就是：“如果大人被小孩子这样说：要大声说老板好哦！要有礼貌！声音要响亮！老板好！” 你的感觉如何？回想到你要求小朋友叫老师好的情景了吗？想想就好笑。  </p>
<h2 id="亲密关系的标签"><a href="#亲密关系的标签" class="headerlink" title="亲密关系的标签"></a>亲密关系的标签</h2><p>曾经，老婆让我感觉“怎么她现在那么依赖？以前不是很独立的吗？”。后来她忍无可忍，狠狠地抱怨我过后，我才看到背后的问题。  </p>
<p>现在回想起来，除了本人以前比较呆，不怎么懂得处理亲密关系，没及时留意到问题的发生外。那个不经意的“贴标签”行为，让我忽视了问题的根源。</p>
<p><strong>“怎么 Ta 现在这样？以前不是很 XX 的吗？” 像这样的句型，应该可以看作典型的“贴标签”行为</strong>。如果说 Ta 以前不这样，现在却变了。可以肯定的是，导致变化的原因肯定包含了外部因素，包含了 Ta 在某种互动关系里的改变。这里必须注意的是，不能把这个变化归咎到 Ta 单方面的问题上。很大程度上，应该首先从互动关系的另一方寻求导致变化的原因。  </p>
<p>所以，以前当老婆让我有那种感觉的时候，那个不经意的标签，让我忽视了我才是产生问题的原因。是我做了什么，或者是没有做什么，导致了这种改变。如果当时我及时意识到，并积极反思，可能就不需要等到老婆抱怨才看到问题在哪里了。  </p>
<h2 id="自我的标签"><a href="#自我的标签" class="headerlink" title="自我的标签"></a>自我的标签</h2><p>自我的标签，每个人可能都自己给自己贴不少。我当然不能幸免：不爱长跑，内向，不懂处理亲密关系等。给自己贴标签，其实是自我和其它事物的互动关系出了问题。像我以前认定自己不能长跑，就是因为自己和长跑这种运动关系不对，采用过不正确的方法和理念，所以直接放弃治疗。很多人放弃学习英语也是一样。  </p>
<p>不过，现在这些标签我要么撕掉，要么更深入理解它出现的场景，要么我已经“接纳”了这个标签，并尝试寻找合适的方式来慢慢改善。现在，我知道我起码可以跑 5 公里，甚至 10 公里。面对熟悉的人，我不会内向，因为在带小团队的时候，我可以主动和成员互动，也聊的不错。“内向”对我来说，只是不在一堆陌生人当中，主动搭话而已。以前在大学时浏览完那本「男人来自火星，女人来自水星」后就没什么下闻，现在能主动寻求心理和亲密关系的课程来学习，并经常回顾总结。  </p>
<p>我可能还有不少标签，但是我渐渐懂得如何面对它们，学习怎么和它们相处。<br>贴标签这种轻易下结论，而不深入探讨背后的互动关系的行为，最后可能反而强化了问题本身。  </p>
<p>想想你给自己和别人贴的标签，看看有哪些可以揭下来？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“中国人就是没礼貌”，“河南人就是XXX”，“处女座就是YYY” 这些言论，很多人现在都能理解它们其实是一种“贴标签”的行为。  &lt;/p&gt;
&lt;p&gt;虽然不能说“贴标签”完全是坏事，因为它其实是人在认识事物的过程中发展出来的一种手段，可以让我们快速面对陌生的事物，知道如何更好地
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/tags/Psychology/"/>
    
      <category term="Labelling" scheme="http://www.thinkingincrowd.me/tags/Labelling/"/>
    
  </entry>
  
  <entry>
    <title>儿子最近哭的多了，但我觉得他长大了</title>
    <link href="http://www.thinkingincrowd.me/2017/05/21/my-son-cries-more-recently-but-I-think-he-grows-up/"/>
    <id>http://www.thinkingincrowd.me/2017/05/21/my-son-cries-more-recently-but-I-think-he-grows-up/</id>
    <published>2017-05-21T02:01:19.000Z</published>
    <updated>2017-07-09T07:10:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近和老婆聊天的时候，听到她说儿子哭的次数多了。  </p>
<p>有一次，儿子因为洗澡的时间和预定的时间刚好，他没提前完成，所以没能够获取积分来增加玩手机的时间。在睡觉前，他哭了。老婆没想到他这么在意这一些积分，在安慰他的时候说：“少积一个晚上，也没什么嘛，别哭了。”没想到他哭的更伤心了。  </p>
<p>另外的一次是，上学前，他出门后发现忘记带魔方了。他想带魔方，是因为迟一些有魔方比赛，他希望能在空闲时间练习一下。所以，他面临两个选择：1）回去拿，但是应该就会迟到。2）这一天就先不带了。当时妈妈和他说：“今天就先不带了吧，不玩一个早上也没什么啦”。然后他就哭了。后来老婆问他：“你真的很想回去拿吗？那就很可能迟到，如果迟到，你就要站着早读，你自己想好怎么做吧？”然后他还是很高兴地决定回去拿魔方。  </p>
<h2 id="为什么我还觉得他长大了？"><a href="#为什么我还觉得他长大了？" class="headerlink" title="为什么我还觉得他长大了？"></a>为什么我还觉得他长大了？</h2><p>其实，我和老婆都觉得儿子是比较有主见的人，这个性格比较不像我，像我老婆多一些。但是，他以前会因为他的意见和他人不同，和其他人大声争吵，偏暴力和自我中心多一些。  </p>
<p>现在他用哭的方式来表达，意味着他能体会到另一种矛盾的声音，尊重这种矛盾的存在。他能把对外的宣泄，变成内在自我情绪的疏导，调节和妥协。这是非常大的一种进步。我觉得是共情能力的成长。当然，如果一直用哭的方式来表达，肯定也不是好的事情。但是，我觉得这是能够进行下一步，和他更好的商量和讲道理的关键，因为他能听的进去不同的声音。我们下一步是教会他使用更合适的方式来处理矛盾。以前那个大声争吵，自我中心的他是没法做到的。  </p>
<h2 id="我和他妈妈也成长了"><a href="#我和他妈妈也成长了" class="headerlink" title="我和他妈妈也成长了"></a>我和他妈妈也成长了</h2><p>可能很多看到儿子在哭的父母，会说：“你还是不是男孩子啊？哭什么！” 我很庆幸，我们没有这样做。每一个父母，和自己的孩子相处的时候，肯定都有过争吵的时候。父母经常会利用自己的权威，把自己认为正确的价值观和选择，强加到孩子的身上。他们甚至还冠冕堂皇地说：“这都是为了你好。” 我和老婆，虽然尽量会和儿子商量和讨论，但是有时也会不自觉的让他做出一些对我们来说是正确的选择，但是不是他内心想遵循的。  </p>
<p>就像那个带魔方的例子。对父母来说，当然不迟到是更加“政治正确”的事情。我们传统的观念，被罚站是不好的。而且如果我们要上班的话，也可能回去拿也意味着浪费我们的时间，我们也迟到，我们的利益也受损。可是，我们或许没有看到孩子的内心需求，他可能宁可罚站，也想回去拿。  </p>
<p>现在，我们看到了。虽然可能还不够及时，不够迅速，但是我们至少看到了，这也是我们共情能力的成长。我也相信我们以后能更及时地体会，并和儿子更好地沟通。  </p>
<p><strong>“看到不一样，才能做到不一样。面对关系难题，你需要多一双眼睛。”</strong>  </p>
<p>我现在真的是越来越喜欢这一句话。这句是李松蔚在喜马拉雅「换个角度，洞悉相处之道」的宣传语。我购买了这个专辑真的觉得物超所值。听说 5 月 31 号以后就要涨价了，所以有兴趣的朋友，可以用我这个红包链接去买。<a href="http://xima.tv/qiamR4" target="_blank" rel="external">http://xima.tv/qiamR4</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近和老婆聊天的时候，听到她说儿子哭的次数多了。  &lt;/p&gt;
&lt;p&gt;有一次，儿子因为洗澡的时间和预定的时间刚好，他没提前完成，所以没能够获取积分来增加玩手机的时间。在睡觉前，他哭了。老婆没想到他这么在意这一些积分，在安慰他的时候说：“少积一个晚上，也没什么嘛，别哭了。”没想
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/tags/Psychology/"/>
    
      <category term="Empathy" scheme="http://www.thinkingincrowd.me/tags/Empathy/"/>
    
      <category term="Mature" scheme="http://www.thinkingincrowd.me/tags/Mature/"/>
    
  </entry>
  
  <entry>
    <title>怎么可能，在我的机器都是好好的</title>
    <link href="http://www.thinkingincrowd.me/2017/05/19/problem-solving-from-another-angle/"/>
    <id>http://www.thinkingincrowd.me/2017/05/19/problem-solving-from-another-angle/</id>
    <published>2017-05-19T13:23:37.000Z</published>
    <updated>2017-05-19T13:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看的几部悬疑片，主角都淡淡地说过：“要转换角度来思考问题”。  </p>
<p>在「嫌疑犯X的献身」里面，为什么女主可以很淡定的说她没有杀死前夫，为什么她可以有“确凿的”不在场证据？后来发现是因为警察发现的尸体，和作案时间，并不是她的前夫和杀死他的那一天。  </p>
<p>在「看不见的客人」里面，协助男主分析案件的“律师”，告诉他一个小故事：“在一个空荡的谷仓里面，正中间的房梁下有一个人悬梁自尽。可是那个人脚下却没有任何可以让他垫脚站上去的东西。后来发现这个”看似“不存在”的东西，其实是一个大冰块，它是曾经存在的，只是“消失”了。  </p>
<p>悬疑片里面，有大量的这种类型的桥段。  </p>
<p>其实，当一个程序员，我们也经常需要用这种“转换角度来思考问题”的思路，来发现导致看似不可能出现的问题的原因。  </p>
<p>拿我最近两次排查系统问题来举例吧。  </p>
<p>第一个问题是，在我们平台的直播里，偶然一些原因会导致主讲人的语音缺少了长度信息。我反复看获取语音长度，和控制消息推送到直播间的相关代码。可是在语音缺失的情况下，怎么都不应该导致消息推送出去。那为什么直播间会出现那样的消息呢？后来发现，原因是在另一个统计消息点赞数，刷新缓存的任务。它会把语音长度缺失的数据也刷到缓存，所以直播间就能看到那个数据了。  </p>
<p>另一个问题是，最近我的手机会收到服务号推送直播开始的通知。可是那些直播命名都是已经结束了的。我怎么看代码都百思不得其解。我观察到两个奇怪的现象：1）误推送的消息，显示的直播时间都是差了 8 个小时，显示的是 ISO 时间。2）线上服务器的日志，根本没有这些异常通知的发送日志记录。原来，压测团队在模拟的线上环境里跑系统和后台任务的时候，用了线上环境的一些参数，导致通过线上的微信服务号，根据压测环境数据库的直播，推送了消息。  </p>
<p>我们程序员，经常被调侃说，当测试或产品告诉我们发现 Bug 的时候，我们经常会回复：“没可能，在我的机器都是好好的。” 其实，有些问题是以我们从来没有想到的角度，而被触发的。下次说没可能前，先停一停，想一想。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看的几部悬疑片，主角都淡淡地说过：“要转换角度来思考问题”。  &lt;/p&gt;
&lt;p&gt;在「嫌疑犯X的献身」里面，为什么女主可以很淡定的说她没有杀死前夫，为什么她可以有“确凿的”不在场证据？后来发现是因为警察发现的尸体，和作案时间，并不是她的前夫和杀死他的那一天。  &lt;/p&gt;

    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Problem Solving" scheme="http://www.thinkingincrowd.me/tags/Problem-Solving/"/>
    
  </entry>
  
  <entry>
    <title>初识 React, Flux 和 Redux</title>
    <link href="http://www.thinkingincrowd.me/2017/05/13/get-to-know-react-flux-redux/"/>
    <id>http://www.thinkingincrowd.me/2017/05/13/get-to-know-react-flux-redux/</id>
    <published>2017-05-13T09:18:51.000Z</published>
    <updated>2017-05-14T13:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期，我大概花了一周，每天晚上 2 小时左右和一个周末的时间，通过官方文档来了解 React, Redux, Flux 几个框架和概念。写下此文是希望帮自己梳理和巩固一下对它们的认识。如果哪里理解有误，希望大家不吝指出。  </p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>围绕 JavaScript 来设计的思想，把所有的 Component，都化作 JavaScript 的一个 function 或者 object，通过丰富的工具来支持类型，错误检查等确实是很赞的想法。如果使用的是 AngularJS 这样的模板和自定义 directive，不小心打错了字，框架是选择忽略还是报错提醒呢，因为那个它不认识的标签，可能是别家的啊？所以，在这点上，React 的做法有优胜的地方。  </p>
<p>还有，React 里面几乎所有的东西都是 Component，通过把 Component 进行高阶组合（HOC），确实可以产生威力无穷的变化。而且它的专有名词和概念，真的比 AngularJS 少太多（虽然其实东西都类似，只是 AngularJS 特意弄些名词出来）。如果能清晰理解 React 的单向数据流，和 HOC 的概念，上手应该说没 AngularJS 那么复杂。虽然老实说，HOC 可能和递归一样，对一些人来说，是非常不好理解的概念。  </p>
<p>对于一个老程序员来说，对 React 最“看不顺眼的”，莫过于 JSX 这种把 “HTML” 标签写到 JavaScript 里的鬼玩意了。我们以前的教诲是，不能把逻辑代码和表现层混杂在一起。再加上，我个人一直觉得，一个结构清晰的表现层，可以清楚地展现页面概貌，对系统的设计和理解有很大的帮助。所以，一直以来，我是倾向于喜欢 AngularJS 式的页面模板（template）风格，然后在上面添加声明式的行为。但是，随着组件化理念的发展，页面已经无法避免被切分的命运。所以，只能思考哪种才是更合适，更清晰的模块化，低耦合，高内聚的方式。或许像 Polymer 那样的 Web Component 形式？知乎上一篇文章也讨论了 <a href="https://www.zhihu.com/question/48528161" target="_blank" rel="external">JSX有哪些缺陷？</a>，大家不妨一看。  </p>
<p>至于单向数据流，和双向数据绑定，老实说，我以前是喜欢双向绑定多一些的。某种程度上来说，框架从工具层面降低程序员的心智门槛，它自己计算和处理数据的变化就可以了。反正程序员可以假定最终数据是同步的，不管它是 dirty checking 还是什么方式。但是，面对复杂的页面行为和状态变更，把数据变为 Immutable，把变更控制在有限范围，尽量编写纯函数，确实可能更好。非纯函数和对外部全局的依赖，一不小心就会出问题。以前在玩 AngularJS 1 的时候，[自己就遇到坑了][]。  </p>
<h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><p>根据 React Component 绑定数据和接收事件的形式，Flux 是秉持单向数据流动里面的一种代码架构方式。  </p>
<p>Flux 包含三大主要部分：Dispatcher, Store, 和 View（其实就是 React 的 Component）。它声称自己没有 MVC 里面的 Controller，但是有 Controller-View 和 Action Creator。真是受不了这些框架了，老是造一些名词，再标榜和以前不同。其实别管那么多，最重要的是<strong>搞清楚数据的流动情况，数据的流动情况，数据的流动情况</strong>。  </p>
<p>下面我拿消息列表的例子来说明 Flux 里面的主要部分是怎么关联，数据在里面是怎么流动的。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/flux_data_flow.png" alt="Flux Data Flow"></p>
<p>这里有两个场景：  </p>
<h3 id="页面打开，自动加载消息"><a href="#页面打开，自动加载消息" class="headerlink" title="页面打开，自动加载消息"></a>页面打开，自动加载消息</h3><p>这个场景的数据流动路线是：1 -&gt; 2 -&gt; A -&gt; B  </p>
<p>页面打开的时候，Action Creator 把 <code>LOAD_MSGS</code> 这个 Action 推给 Dispatcher。两个 Store 都会接收到这个 Action。Store B 把数据赋予 <code>msgs</code>，更改了内部 State，然后更新 View B。  </p>
<p>Store A 呢？Store A 里面的 <code>unreadCount</code> 状态数据，是依赖 Store B 里面的 <code>msgs</code> 计算出来的。所以，Store A 里的处理逻辑其实会忽略接收到的 Action，通过 <code>Dispatcher.waitFor</code> 的方法，声明必须等待 Store B 的计算完成，然后 derive 自己需要的数据，再更新 View A。  </p>
<h3 id="用户点击阅读某一条消息"><a href="#用户点击阅读某一条消息" class="headerlink" title="用户点击阅读某一条消息"></a>用户点击阅读某一条消息</h3><p>这个场景的数据流动路线是：3 -&gt; 4 -&gt; 5 -&gt; A -&gt; B  </p>
<p>当用户点击某一条消息时，Action Creator 接收到 View B 的事件，构造了包含消息 id 的 <code>READ_MSG</code> Action，推给 Dispatcher。紧接着的操作类似上面的场景，不再累述。  </p>
<p>结合场景来理解数据的流动，就能比较容易搞清楚 Flux 组成部分的定义了。  </p>
<ol>
<li>Dispatcher 是全局的，只有一个。  </li>
<li>Action Creator 负责接收 View 的事件，产生 Action。当然也可以按需，自己产生 Action。  </li>
<li>Action 只是简单的操作指令，包含必要的数据，但是没有处理逻辑。  </li>
<li>Store 有多个，同时接收所有的 Action，按各自处理 Logic，改变数据内部 State。  </li>
</ol>
<p>View 和 Controller View 的不同在于，Controller View 负责接收 Store 广播出来的事件，然后把更新的数据扩散下去其它的 View。所以 Controller View 是接近于顶层的。  </p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 又是什么鬼呢？有人问 Redux 算不算是 Flux 架构的一种实现。Redux 作者说它既是，又不是。有兴趣的朋友自己看文档官网里，作者引的 Tweet 吧。神仙也会打架的，就是因为各自造不同的名词出来。  </p>
<p>那在这个框架底下，数据的流动又是如何的呢？我们通过上面同样的场景来看一下：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/redux_data_flow.png" alt="Redux Data Flow"></p>
<h3 id="页面打开，自动加载消息-1"><a href="#页面打开，自动加载消息-1" class="headerlink" title="页面打开，自动加载消息"></a>页面打开，自动加载消息</h3><p>这个场景的数据流动路线是：1 -&gt; 2 -&gt; A -&gt; B -&gt; C -&gt; D  </p>
<p>页面打开的时候，Action Creator 把 <code>LOAD_MSGS</code> 这个 Action 作为参数调用 <code>Store.dispatch</code> 方法。然后和 Store 绑定的所有 Reducer 都会接收到 Action，和它们各自负责的部分 State 结构。Store 再把各个 Reducer 计算后的新 State 合并。Container Component 把 State 的数据转换成 Presentation Component 需要的 Property 和绑定事件。   </p>
<h3 id="用户点击阅读某一条消息-1"><a href="#用户点击阅读某一条消息-1" class="headerlink" title="用户点击阅读某一条消息"></a>用户点击阅读某一条消息</h3><p>这个场景的数据流动路线是：3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; A -&gt; B -&gt; C -&gt; D  </p>
<p>当用户点击某一条消息时，Presentation Component B 接收到用户操作，通过 Container Component B 绑定在它之上的事件，通知 Action Creator 构造了包含消息 id 的 <code>READ_MSG</code> Action，调用 <code>Store.dispatch</code> 方法通知 Reducers。后面的数据流动和上面类似。  </p>
<p>下面解释一下 Redux 和 Flux 的不同，以及里面各个部分的关键定义。  </p>
<ol>
<li>全局单一的 State（作者声称的 Single source of truth）。  </li>
<li>没有 Dispatcher（实际上统一的 Store 承担了 Dispatcher 的功能）。  </li>
<li>Reducer 应该是 pure function 纯函数。而且它们同步更新各个部分的 state，最后汇总。  </li>
<li>State is Readonly。任何改动都不改变原有的数据，而是生成新的数据。  </li>
<li>Container Component 相当于 Flux 的 Controller View。Presentation Component 是普通的 View。  </li>
<li>Action 和 Action Creator 基本是一样的。  </li>
</ol>
<p>Redux 的关键不同之处是，它只有统一的 State。所以，从一开始就要尽量设计好 State 的结构。官网上还特别提到，数据应该要 normalized，就像 RDBMS 里面存储数据那样，尽量用 id 来指向数据，不冗余。  </p>
<p>所以，在 Redux 这里，我并没有添加 <code>unreadCount</code> 这个属性给 Component A。它们应该直接从 <code>msgs</code> 里面的消息里推算出来。还有，如果出现前面说的 State 里面如果有数据相互影响的情况，我觉得可能需要在某个 Action 运算后再 dispatch 新 action 出来。因为 Reducers 的调用都是同步的，而且好像无法指定执行顺序。不过这部分我还不太确定，需要实践和再查找资料。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期，我大概花了一周，每天晚上 2 小时左右和一个周末的时间，通过官方文档来了解 React, Redux, Flux 几个框架和概念。写下此文是希望帮自己梳理和巩固一下对它们的认识。如果哪里理解有误，希望大家不吝指出。  &lt;/p&gt;
&lt;h2 id=&quot;React&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="React" scheme="http://www.thinkingincrowd.me/tags/React/"/>
    
      <category term="Redux" scheme="http://www.thinkingincrowd.me/tags/Redux/"/>
    
      <category term="Flux" scheme="http://www.thinkingincrowd.me/tags/Flux/"/>
    
  </entry>
  
  <entry>
    <title>猜来猜去，有意思吗？</title>
    <link href="http://www.thinkingincrowd.me/2017/05/13/probe-harmful/"/>
    <id>http://www.thinkingincrowd.me/2017/05/13/probe-harmful/</id>
    <published>2017-05-13T00:35:14.000Z</published>
    <updated>2017-07-09T07:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>周二晚和同事共同吃饭，并观看了「看不见的客人」这部悬疑片。电影剧情的反转真的相当意外，而且不同角度的推理也非常巧妙。影片中有各种试探性对话和策略，而这当然也是悬疑片必备的佐料。  </p>
<p>死者的父亲到男主的 Party，试探性地问他是否抽烟，并借打火机，从而认定男主和他儿子的死亡关联。  </p>
<p>男主在慢慢地叙述自己的经历和细节中，试探来帮他的律师，看她能否推理出事情的原委，是否真的足够聪明。  </p>
<h2 id="无处不在"><a href="#无处不在" class="headerlink" title="无处不在"></a>无处不在</h2><p>如果在悬疑片中，缺少了猜来猜去的过程，就已经不是悬疑片了。但是，其实日常生活中，也充满了各种试探性的谈话和行为。  </p>
<ul>
<li>买东西的时候，我们通过不断地压价，抬价，甚至假装离开，来试探对方的价格底线。  </li>
<li>工作中，旁敲侧击地从上司那了解今年是否有加薪。  </li>
<li>单恋中的人，或许会开玩笑地试探对方也是否喜欢自己。  </li>
<li>恋爱中，或婚后的人，或许会试探对方是否记得自己的生日，或者特殊纪念日。  </li>
<li>有些家长，会试探性地问小孩子要东西，看 Ta 是否“小气”；玩耍时假装被 Ta 弄伤，看 Ta 会否来安抚自己；甚至假装说“不要你了”，看 Ta 是否会感到伤心。  </li>
<li>甚至有些父母，试探性地和子女说要去老人院（「奇葩说」近期节目讨论话题，「李松蔚」公众号也有点评）</li>
</ul>
<h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>是对他人的不信任吗？我们不相信店主会一开始就提供给我们最优惠的价格；也不会相信老板会给出公司能给的最合适和最高的工资。这种不信任嘛，似乎也说的过去。  </p>
<p>但是我们为什么还会去试探自己在乎的人，甚至是最亲密的人呢？有些人可能会说：“逗着玩的啊”。真的是这样吗？  </p>
<p><strong>每一次的试探，其实背后都隐含着自己内心的一种期待。而这种基于期待的试探，其实包含了按自己的模式向对方提出的要求。</strong>  </p>
<h2 id="试探是一种伤害"><a href="#试探是一种伤害" class="headerlink" title="试探是一种伤害"></a>试探是一种伤害</h2><p>为什么这么说呢？</p>
<p>首先，<strong>当你基于某种期待，试探对方的时候，其实你是按自己的标准和行事方式来要求别人</strong>。觉得对方如果是 XXX 的话，就应该会 YYY。比如，当我们在试探对方是否喜欢自己的时候，其实是觉得，既然我喜欢你，你是不是应该也喜欢我啊？当我们试探对方是否记得自己生日或者纪念日的时候，其实是觉得，既然我记得，你不会不记得吧？当我们试探小朋友是否“小气”的时候，我们是希望我们自己对他们付出那么多的情况下，他们理应也对我们好一些。  </p>
<p>可是，你的这些期待，别人就一定得满足吗？别人就只能用你认可的方式 YYY，才说明 Ta 满足你的期待 XXX 吗？</p>
<p>并不是的。每个人表达亲密关系的语言都不同。并且，像小朋友的例子，Ta 可能只是刚好成长到了物权的拥有阶段，这个时候会显得比较“自私”，但是这是必须经历的阶段，也不代表 Ta 未来就是“自私”的人。  </p>
<p>可是，如果你因为看到对方做出和你期待外的行为或反应，就做出 Ta 不 YYY，所以不 XXX 的判断的话，很可能你会误解对方。这个时候，你无非有两种反应：  </p>
<ol>
<li>独自伤心。这对自己造成伤害，然而却因为无需有的，自身臆想的原因。  </li>
<li>发生冲突。这对他人造成伤害，他人觉得委屈，同时也削弱对方的信心。  </li>
</ol>
<p>还有另一种情况是，对方如果发现你在试探 Ta，会让 Ta 觉得受辱，被耍。说不定 Ta 还会故意反过来捉弄你。  </p>
<p>所以，无论怎样，我觉得都会削弱双方的亲密关系。  </p>
<h2 id="相信，或许更容易实现"><a href="#相信，或许更容易实现" class="headerlink" title="相信，或许更容易实现"></a>相信，或许更容易实现</h2><p>那对于自己的期待，如何实现呢？</p>
<p><strong>直接表达和询问</strong>。比如说，你直接向亲爱的人说，今天是我的生日或 XX 纪念日，我希望 YYY，因为这样我会觉得很高兴。又比如，你对你的孩子说，我也很喜欢 XXX，你可以分享一些给我吗？这种表达，能清晰说明自己的感觉，让他人理解你的需求。久而久之，对方就会习惯并了解你的习惯，喜好，和爱的语言。真正关心你的人，当然会非常乐意，并接受你提出的这些请求。  </p>
<p>当然，对方可能也会不同意。如果这个期待和需求，对你来说很重要，你可以表达出自己的伤心，和失望的感觉。如果对方珍惜你们的关系，Ta 或许会向你说明自己不能接受的原因，或许在了解到事情的重要性后，会做出改变。如果你的期待和需求，并不是非常重要，那你也可以了解到对方对这件事情的态度，了解并尊重 Ta 的模式。  </p>
<p><strong>相信，打心底地相信。</strong>一段值得维护的亲密关系，信任在里面的作用非常重要。都说爱是不索取回报的付出，那是要在对方真的不以你期望的方式回应你的时候，你依然能用你的方式去爱对方。曾经，我的儿子一直在乡下由奶奶照顾大，直到上幼儿园后回到我们身边。寒暑假，他都跟随奶奶回老家。我们打电话回去，奶奶让他和我们说说话，他有时都会拒绝。对他来说，奶奶是最亲密的人，我和他妈妈不是。但是，我们并没有因此在他面前责骂他，要求他，或者试探他。经过长时间的接触，和等待，他和她妈妈的关系变得非常好。而我现在长时间在他乡工作，每次回家，他都会强烈要求和我一起玩，晚上一起睡，为我的离开而流泪。  </p>
<p>所有的期待，伴随着坚定的信念，一定会实现。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周二晚和同事共同吃饭，并观看了「看不见的客人」这部悬疑片。电影剧情的反转真的相当意外，而且不同角度的推理也非常巧妙。影片中有各种试探性对话和策略，而这当然也是悬疑片必备的佐料。  &lt;/p&gt;
&lt;p&gt;死者的父亲到男主的 Party，试探性地问他是否抽烟，并借打火机，从而认定男主
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Asking" scheme="http://www.thinkingincrowd.me/tags/Asking/"/>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/tags/Psychology/"/>
    
  </entry>
  
  <entry>
    <title>为你的网站带上免费的安全套</title>
    <link href="http://www.thinkingincrowd.me/2017/05/07/secure-your-website-with-free-condom/"/>
    <id>http://www.thinkingincrowd.me/2017/05/07/secure-your-website-with-free-condom/</id>
    <published>2017-05-07T03:47:41.000Z</published>
    <updated>2017-05-07T04:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>我承认我标题党了一下，不过看在为你们介绍好东西的前提下，就原谅我一次吧。  </p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>无论是现实生活你要ＯＯＸＸ，还是要在虚拟世界里游历，安全都是最重要的。生活有 Durex 或者冈本，而在虚拟世界里，HTTPS 正是可以为我们的网站提供保护的套套。  </p>
<p>况且，最近我在玩微信小程序，而它要求服务器必须支持 HTTPS（可见企鹅的安全感多强）。所以在我的域名申请下来和备案通过后，我要为我的服务器准备 HTTPS 的证书和服务了。  </p>
<h2 id="怎么选"><a href="#怎么选" class="headerlink" title="怎么选"></a>怎么选</h2><p>HTTPS 的证书和服务说实在挺贵的。在腾讯云下面无论是购买 Symantec, GeoTrust 或 TrustAsia 的多域名证书，一年下来都要 5000 元左右。免费的 SSL 证书服务有好一些，如 Let’s Encrypt，StartSSL、Wosign沃通。腾讯云也有和 GeoTrust SSL 合作，提供一年的免费证书。  </p>
<p>那怎么选？  </p>
<p>首先，StartSSL、Wosign沃通作大死，很多浏览器厂商已经取消对它们新颁发的证书的信任。  </p>
<p>腾讯云的免费证书，一年后怎么办？听起来还是不够稳妥。  </p>
<p><a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a> 作为 Linux 基金会下的合作项目，它得到许多著名大厂，如 Mozilla, Chrome, Facebook, Cisco 等支持。虽然证书只有 90 天有效期，但是它的安装和设置做的相当容易，还能自动化续期，相当于就永久免费了。  </p>
<p>聪明如你，当然知道怎么选择啦。我肯定选择免费又好用的 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a>了。  </p>
<h2 id="带套套的步骤"><a href="#带套套的步骤" class="headerlink" title="带套套的步骤"></a>带套套的步骤</h2><p>接下来我就大致介绍一下怎么方便舒适地带上这个套套。  </p>
<p>下面假定你有自己的服务器，和 Shell 访问的权限。Let’s Encrypt 其实提供了一个非常方便的自动化工具，由 EFF 提供的 <a href="https://certbot.eff.org/#ubuntutyakkety-nginx" target="_blank" rel="external">Certbot</a>。  </p>
<p>大家通过上面的网站就能看到它为不同的系统，不同的网络服务器提供的安装指南。下面以在腾讯云下，Nginx 和 Ubuntu 16.10 的环境，使用 Webroot 认证方式，并且要认证的域名是 <code>funnyken.com</code> 来举例。同时假定你有一定的 Linux 和 Nginx 基础。  </p>
<h3 id="安装-certbot"><a href="#安装-certbot" class="headerlink" title="安装 certbot"></a>安装 certbot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:certbot/certbot</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install certbot</div></pre></td></tr></table></figure>
<h3 id="配置目录和权限"><a href="#配置目录和权限" class="headerlink" title="配置目录和权限"></a>配置目录和权限</h3><p>在使用工具自动化获取证书，配置之前，先为你要认证的网站新建一些目录，和做权限设置。如果你是以 <code>root</code> 的身份来运行你的服务的话，<code>sudo chown</code> 那些命令不是必须的。但是腾讯云下面的服务器默认登录和使用都是用 ubuntu 的帐号，所以还是要修改一下。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo chown ubuntu:ubuntu -R /etc/letsencrypt/</div><div class="line">sudo chown ubuntu:ubuntu -R /var/lib/letsencrypt/</div><div class="line">sudo chown ubuntu:ubuntu -R /var/log/letsencrypt/</div><div class="line"></div><div class="line">sudo mkdir -p /var/www/funnyken/</div><div class="line">sudo chown ubuntu:ubuntu -R /var/www/funnyken/</div><div class="line">mkdir -p /var/www/funnyken/.well-known/acme-challenge/</div></pre></td></tr></table></figure>
<h3 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h3><p>在下面的命令后面，你可以添加更多的 <code>-d xxx.funnyken.com</code> 来为你的其它子域名认证。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">certbot certonly --webroot -w /var/www/funnyken -d funnyken.com -d www.funnyken.com</div></pre></td></tr></table></figure>
<p>命令运行完后，会有如下类似的提示：  </p>
<blockquote>
<p>IMPORTANT NOTES:</p>
<ul>
<li>Congratulations! Your certificate and chain have been saved at<br>/etc/letsencrypt/live/funnyken.com/fullchain.pem. Your cert<br>will expire on 2017-08-01. To obtain a new or tweaked version of<br>this certificate in the future, simply run certbot again. To<br>non-interactively renew <em>all</em> of your certificates, run “certbot<br>renew”</li>
<li>If you lose your account credentials, you can recover through<br>e-mails sent to sammy@example.com.</li>
<li>Your account credentials have been saved in your Certbot<br>configuration directory at /etc/letsencrypt. You should make a<br>secure backup of this folder now. This configuration directory will<br>also contain certificates and private keys obtained by Certbot so<br>making regular backups of this folder is ideal.</li>
<li><p>If you like Certbot, please consider supporting our work by:</p>
<p>Donating to ISRG / Let’s Encrypt:   <a href="https://letsencrypt.org/donate" target="_blank" rel="external">https://letsencrypt.org/donate</a><br>Donating to EFF:                    <a href="https://eff.org/donate-le" target="_blank" rel="external">https://eff.org/donate-le</a></p>
</li>
</ul>
</blockquote>
<h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>在你的 Nginx 安装目录下，新建一个文件夹 <code>snippets</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/nginx/snippets</div></pre></td></tr></table></figure>
<p>分别创建下面两个文件：</p>
<p><code>letsencrypt.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ^~ /.well-known/acme-challenge/ &#123;</div><div class="line">    default_type &quot;text/plain&quot;;</div><div class="line">    root /var/www/funnyken;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ssl.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ssl_session_timeout 1d;</div><div class="line">ssl_session_cache shared:SSL:50m;</div><div class="line">ssl_session_tickets off;</div><div class="line"></div><div class="line">ssl_protocols TLSv1.2;</div><div class="line">ssl_ciphers EECDH+AESGCM:EECDH+AES;</div><div class="line">ssl_ecdh_curve secp384r1;</div><div class="line">ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">ssl_stapling on;</div><div class="line">ssl_stapling_verify on;</div><div class="line"></div><div class="line">add_header Strict-Transport-Security &quot;max-age=15768000; includeSubdomains; preload&quot;;</div><div class="line">add_header X-Frame-Options DENY;</div><div class="line">add_header X-Content-Type-Options nosniff;</div></pre></td></tr></table></figure>
<p>在你的 Nginx 服务器配置里面，在 <code>server</code> 内添加类似的设置：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 80;</div><div class="line">  listen [::]:80;</div><div class="line">  listen 443 ssl http2 default_server;</div><div class="line">  listen [::]:443 ssl http2 default_server;</div><div class="line"></div><div class="line">  server_name www.funnyken.com funnyken.com;</div><div class="line"></div><div class="line">  include /etc/nginx/snippets/letsencrypt.conf;</div><div class="line"></div><div class="line">  ssl_certificate /etc/letsencrypt/live/funnyken.com/fullchain.pem;</div><div class="line">  ssl_certificate_key /etc/letsencrypt/live/funnyken.com/privkey.pem;</div><div class="line">  ssl_trusted_certificate /etc/letsencrypt/live/funnyken.com/fullchain.pem;</div><div class="line"></div><div class="line">  include /etc/nginx/snippets/ssl.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后重启你的 Nginx 或者重新加载配置文件就大功告成了。  </p>
<h3 id="测试套套是否稳妥"><a href="#测试套套是否稳妥" class="headerlink" title="测试套套是否稳妥"></a>测试套套是否稳妥</h3><p>经过以上步骤，套套应该佩戴上了。不过还是要简单测试一下的。在浏览器里输入以下的地址，替换你的域名就可以了。  </p>
<blockquote>
<p><a href="https://www.ssllabs.com/ssltest/analyze.html?d=funnyken.com" target="_blank" rel="external">https://www.ssllabs.com/ssltest/analyze.html?d=funnyken.com</a></p>
</blockquote>
<h3 id="配置自动更新"><a href="#配置自动更新" class="headerlink" title="配置自动更新"></a>配置自动更新</h3><p>虽然可能经测试，目前带上的套套应该是安全可靠的。但是，正如前面所说，它只有 90 天有效期。所以还是要定期更换。我们在 Ubuntu 下面简单配置一个 Cron Job 就好了。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo crontab -e</div></pre></td></tr></table></figure>
<p>添加如下一行，让服务器每天凌晨 2 点检查一下证书，并在需要的情况下重启 Nginx 就可以了。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 2 * * * /usr/bin/certbot renew --quiet --renew-hook &quot;/bin/systemctl reload nginx&quot;</div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://gist.github.com/cecilemuller/a26737699a7e70a7093d4dc115915de8" target="_blank" rel="external">How to setup Let’s Encrypt for Nginx on Ubuntu 16.04 (including IPv6, HTTP/2 and A+ SLL rating)</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04" target="_blank" rel="external">How To Secure Nginx with Let’s Encrypt on Ubuntu 16.04</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我承认我标题党了一下，不过看在为你们介绍好东西的前提下，就原谅我一次吧。  &lt;/p&gt;
&lt;h2 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h2&gt;&lt;p&gt;无论是现实生活你要ＯＯＸＸ，还是要在虚拟
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Security" scheme="http://www.thinkingincrowd.me/tags/Security/"/>
    
      <category term="HTTPS" scheme="http://www.thinkingincrowd.me/tags/HTTPS/"/>
    
      <category term="Nginx" scheme="http://www.thinkingincrowd.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>业务与缓存</title>
    <link href="http://www.thinkingincrowd.me/2017/05/02/cache-and-business-characteristics/"/>
    <id>http://www.thinkingincrowd.me/2017/05/02/cache-and-business-characteristics/</id>
    <published>2017-05-02T10:51:29.000Z</published>
    <updated>2017-05-02T10:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在做企业系统的时候，并没有用什么缓存策略。一来是内部系统，并发不高（通俗理解就是同时找系统要数据的人不多）。而且，企业系统的订单，发票等数据，要求数据实时性高，改动也频繁，所以缓存的意义并不太大。</p>
<p>在上一家公司的时候，曾经用过高大上的 Oracle Coherence，不过一堆坑。这头改了数据，那头打开的时候数据是旧的，然后保存的时候还没错，导致各种奇奇怪怪的 bug。  </p>
<p>现在，我参与开发的是一个语音直播平台，使用缓存的场景稍微多一些。所以，在这里结合自己的实践，写一篇入门和自己的半总结给大家。  </p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>在没有缓存这个概念之前，获取数据都是直接从能永久保存数据的数据库里面读取的。而从数据库读取数据通常意味着要访问硬盘。在数据的访问量不太大的情况下，这种方式也没什么大问题。但是，如果几万人，甚至几十万人同时访问，比如打开某一个直播的详情页，全部请求都要访问数据库，读取硬盘的话，系统肯定受不了。  </p>
<p><strong>缓存的引入，是为了把数据放在访问速度更快的地方</strong>，提高用户打开网页，App 的速度，<strong>减少服务器和数据库的压力</strong>。牢记缓存的作用，才能在我们需要决定把什么东西放缓存的时候，有更明确的指导方针。不是为了缓存而缓存。  </p>
<h2 id="放什么"><a href="#放什么" class="headerlink" title="放什么"></a>放什么</h2><p>知道了为什么要使用缓存，那应该不难理解，访问次数非常频繁的数据，都应该考虑使用缓存。所以，<strong>放什么就取决于数据的读写比例，这是由业务特点决定的</strong>。  </p>
<p>还是拿直播详细资料来举例，主讲人信息，直播标题，时间和内容都是读取的次数远远大于修改的次数。这些信息在直播审核通过后，就基本不怎么更改。所以，它们是非常适合放在缓存里面的。  </p>
<h2 id="怎么放"><a href="#怎么放" class="headerlink" title="怎么放"></a>怎么放</h2><p>把数据放在缓存，不是一股脑地把数据库的数据，直接往缓存里面搬就可以的了。<strong>缓存怎么放，取决于业务特点和缓存系统的特性，因为它们是做出合适的数据结构设计和选择的关键</strong>。  </p>
<p>缓存策略有很多种，可以应用在手机客户端，浏览器，服务器端的内存型数据库等。不同的策略，要考虑的着重点都不同。本文只重点拿服务端的场景来举例。  </p>
<h3 id="缓存系统的特性"><a href="#缓存系统的特性" class="headerlink" title="缓存系统的特性"></a>缓存系统的特性</h3><p>Redis 是一个常用的服务端缓存系统。它其实是内存型 key-value 数据库。key-value 的意思就是，存数据的时候，只需要指定一个唯一的标识（key），和对应的数据（value）绑定。读取的时候只提供标识就可以了。那么，对于用户访问直播详情页的场景，我们可以用 JSON 格式表示所有的直播资料，把它转换成字符串后，和直播的唯一标识（ID）绑定，存放到 Redis。这种方式只访问一次 Redis，提供一个 key 就能拿到所有的数据，时间复杂度是 O(1)。  </p>
<p>除了字符串类型的数据以外，Redis 还支持 Hash, Set, List 等结构。直播的信息其实还可以用 Hash 来存放直播数据，但是如果要一次取出所有的直播资料，时间复杂度就会是 O(N)，N 取决于直播包含了多少属性存放在 Hash 里面。N 越大就越慢。所以，采用第一种方式更好一些。  </p>
<h3 id="缓存更新的频次"><a href="#缓存更新的频次" class="headerlink" title="缓存更新的频次"></a>缓存更新的频次</h3><p>如果你们细心留意的话，会发现参与人数这个数据，是和主讲人，直播标题，时间和内容不一样的。它是经常改变的。尤其是大热门的直播，刚刚推广后的几小时内，参与人数的变化是非常频繁和巨大的。那这种数据能不能放缓存？如果可以，应该怎么放呢？  </p>
<p>首先，这种瞬时改变量可能会很大的数据，如果要实时更新，无论是数据库还是缓存，都会造成非常严重的数据写锁。但是，仔细想想的话，直播参与人数，并不需要非常及时的更新，没必要说多了一个人购买，数值马上加一。  </p>
<p><strong>在数据实时性要求不是非常高，更新频次和量大的场景下，可以采取定期合并，批量更新的策略</strong>。也就是说，直播参与人数并不需要在每个用户购买的时候马上更新，而是由一个后台定时任务，统一通过数据库的购买记录，批量统计更新。这样的话，数据更新频次的量级，从可能是万的级别，直接下降到 1 而已。我们只需要为后台的定时任务设定一个合理的时间间隔就可以了。  </p>
<h3 id="缓存的结构设计"><a href="#缓存的结构设计" class="headerlink" title="缓存的结构设计"></a>缓存的结构设计</h3><p>通过把直播详情的 JSON 数据转换成字符串来缓存，这种方式还算比较直观，容易理解。那像 iPhone App Store 这样的页面，按不同主题来显示直播资料的页面，是否应该做缓存，能否做缓存，应该怎么做缓存呢？  </p>
<p>直播网站的首页，作为整个系统的入口，也是用户寻找信息的必经之道，访问量肯定是非常巨大的。如果在手机展示这个页面，一般首次展现（首屏）的信息就包含 3 个主题，每个主题包含最少 10 个直播，直播的个数相当多。  </p>
<p>假如没有缓存，或者缓存还是直播的粒度，那么为了拿出首屏的数据，我就需要访问 3 次数据库或者 Redis，拿到所有主题，然后再访问 30 次 Redis，拿到所有的直播。假设还要逐个统计每个直播的回答问题个数，那每个用户访问首页对系统的冲击就很大了。  </p>
<p>那我怎么处理这个首页的缓存结构设计呢？由于刚才说首屏大概有 3 个主题，每个主题下还有不少直播。所以，我在 Redis 缓存的就是分页了的，首页所有的主题和下面的直播信息。也就是说，客户端说要前三个主题，只通知服务器拿第一页数据就可以了。拿后面的数据就页数依次加一，直到没有数据返回，就表示没有更多主题了。通过这种方式，每个用户，每次访问首页只要访问 1 次 Redis 就可以了。  </p>
<p>当然，为了提高访问速度，还需要减少每次传输的数据量。所以，首页缓存的直播信息必须精简，不能像直播详情的缓存那样，包含参与者头像等信息，因为它们量大，而且没必要。  </p>
<h2 id="失效和更新"><a href="#失效和更新" class="headerlink" title="失效和更新"></a>失效和更新</h2><p>有了缓存以后，用户获取数据就不直接从数据库读取了。那么，当数据需要更新的时候，我们需要同时更新数据库和缓存。缓存失效和更新的策略，就是为了解决这个问题。  </p>
<p>这是一个非常难的问题，即便是有多年经验的程序员，也未必能很好处理。为什么说难啊？Martin Fowler 大叔在他的<a href="https://martinfowler.com/bliki/TwoHardThings.html" target="_blank" rel="external">博客</a>里面提到了一些有趣的计算机领域的难题，其中包括 Phil Karlton 说的：  </p>
<blockquote>
<p>There are only two hard things in Computer Science: cache invalidation and naming things.  </p>
</blockquote>
<p>所以，我这篇入门和半总结文就不细说了，有兴趣的同学可以参考「左耳朵耗子」陈皓的文章<a href="http://coolshell.cn/articles/17416.html" target="_blank" rel="external">缓存更新的套路</a>。在我们的直播系统，我们采用的算是第一种方式，只是实现的手段，由于我们是多地部署的系统，在失效和更新的操作上，做法有点特殊而已。  </p>
<p>相关文章：</p>
<p>在我动手写本文的时候，恰好曹政 4 月 28 日也在他的公众号「caoz的梦呓」也推了一篇「谈谈编程 之 滥用内存的现象」。文章里讲述了他给小蜜圈做技术顾问时发现的一些缓存处理问题，里面的一些例子和原则其实和我这里说的有些重合，大家不妨一并查看。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在做企业系统的时候，并没有用什么缓存策略。一来是内部系统，并发不高（通俗理解就是同时找系统要数据的人不多）。而且，企业系统的订单，发票等数据，要求数据实时性高，改动也频繁，所以缓存的意义并不太大。&lt;/p&gt;
&lt;p&gt;在上一家公司的时候，曾经用过高大上的 Oracle Coh
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Caching" scheme="http://www.thinkingincrowd.me/tags/Caching/"/>
    
  </entry>
  
  <entry>
    <title>对死亡的未知，或许确实是上帝真正的礼物？</title>
    <link href="http://www.thinkingincrowd.me/2017/04/22/unknown-when-to-die-might-possibly-the-gift-from-god/"/>
    <id>http://www.thinkingincrowd.me/2017/04/22/unknown-when-to-die-might-possibly-the-gift-from-god/</id>
    <published>2017-04-22T05:17:44.000Z</published>
    <updated>2017-04-22T05:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周的团建轮到我钦点一出电影让大家回去看。这对于一个和别人出去吃饭时，都通常说随便的人来说，这真是相当大的挑战。偶然间发现硬盘里有一出很久前经人介绍，但还没看的「超新约全书」，并且豆瓣又有 7.9 分，就选了它。  </p>
<p>这出法式喜剧/奇幻片，真和平时看的美国式喜剧/奇幻片差太多。这脑洞大，但是并没有强大的荷尔蒙刺激的电影，虽然会引诱你想看下去了解情节怎么发展，但又有点坚持不下去的感觉。  </p>
<p>事情的起因是居住在布鲁塞尔的上帝，靠一台电脑控制人类，给他们制造各种困苦，制定「人类普遍困境法则」，包括面包掉落时永远是涂有果酱的一面落地，和别人排的队总是比自己的快。他的女儿看不下去了，偷偷把全世界人类的注定死亡日期发短信告诉每一个人，然后通过洗衣机里的通道爬到人类社会寻找她的门徒，拯救人类。  </p>
<p>女主的第一个门徒，周围有上至 80，下至 8 岁的男生对她有仰慕之情，甚至还有几百个单纯地想占有她身体的男人。但是她为什么一直独处，而且在知道自己的死期后，并没做任何改变？因为自从她失去一只左手后，她的心已经死了。即使知道死期，其实和之前并没什么区别。万念俱灰估计说的就是这种感觉吧，<strong>有多少人活着只是因为没有死？</strong>当她在梦里看着自己失去的手在跳舞时，那种喜悦之情真的带来太强烈的反差了。  </p>
<p>第二个门徒是一个平庸工作，逐步缓慢升迁到暮色之年的老头。在知道日子所剩无几时，内心堆积已久的对工作的极度不满如火山迸发一样。他发疯了似的砸了自己的公文包，坐在公园长椅上细细品味阳光、微风、飞鸟，还追随飞鸟到了高山、北极圈。  </p>
<p>一个叫「色情狂」的门徒，知道自己日子无多后打算花光所有积蓄，观看情色表演，最后却在声优配音所意外碰到小时候的梦中情人。还有一个中年女人，长期和丈夫同床异梦，苦不堪言，最后却从一头黑猩猩身上寻得真正的爱情，并在一起，还把丈夫赶离家庭。  </p>
<p>电影的情节，古怪离奇，但却真实地反映了生活。引用电影里上帝知道死亡日期被泄露后暴怒的话：  </p>
<blockquote>
<p>从前呢，我抓着全人类的命门，没人知道自己的死期，所以才不敢胡作非为，明白吗？现在，他们知道了，就不会再被我牵着鼻子走了，他们将自主选择生活方式。如果她教会人类如何摆脱困境怎么办？  </p>
</blockquote>
<p><strong>不知道自己的死期，到底是好事还是坏事呢？</strong>  </p>
<p>电影里面，所有后来追随自己内心的，都是知道时日不多了的。反观，有一个知道自己很长寿的小伙，就各种跳楼跳飞机来测试自己的寿命。剧末，上帝的老婆重启了电脑，把世界变得更美好，原来本该死去的人，还活着。但是，与此同时，每个人之前收到的死亡倒计时，被收回去了。  </p>
<p>是所有人都不会死了吗？还是人们的生命，基于他们的改变，被重新计算了？  </p>
<p>乔布斯 2005 年在斯坦福演讲说到：  </p>
<blockquote>
<p>I looked in the mirror every morning and asked myself: “If today were the last day in my life, what I want to do, what I am about to do today?”  Whenever the answer has been No too many days in a row, I know I need to change something.<br>我每天早晨都会对镜自问：“如果今天是我生命的最后一天，那些原本今天要做的事我还想去做吗？”如果答案连续多次都是“不”，我知道我得改变一下了。  </p>
</blockquote>
<p>如果我的生命只剩下一天，一星期，一个月，一年，五年，十年，我还会做当下的选择吗？你呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周的团建轮到我钦点一出电影让大家回去看。这对于一个和别人出去吃饭时，都通常说随便的人来说，这真是相当大的挑战。偶然间发现硬盘里有一出很久前经人介绍，但还没看的「超新约全书」，并且豆瓣又有 7.9 分，就选了它。  &lt;/p&gt;
&lt;p&gt;这出法式喜剧/奇幻片，真和平时看的美国式喜
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Time" scheme="http://www.thinkingincrowd.me/tags/Time/"/>
    
      <category term="Death" scheme="http://www.thinkingincrowd.me/tags/Death/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 服务器代码部署</title>
    <link href="http://www.thinkingincrowd.me/2017/04/16/Node-js-Wechat-Web-App-Tutorial-Deployment/"/>
    <id>http://www.thinkingincrowd.me/2017/04/16/Node-js-Wechat-Web-App-Tutorial-Deployment/</id>
    <published>2017-04-16T07:31:17.000Z</published>
    <updated>2017-04-16T07:36:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>机器都好了，是时候让我们的代码上场了。完成了这一步，即便你不做微信后台，你也拥有一个能提供完整后端服务的服务器了。  </p>
<h2 id="SSH-Agent-Forwarding"><a href="#SSH-Agent-Forwarding" class="headerlink" title="SSH Agent Forwarding"></a>SSH Agent Forwarding</h2><p>要把代码部署到服务器的话，首先服务器能拥有和我们同等的权限去 Github 拉取代码。配置了 SSH 代理后，我们就不必把我们的 key 放到服务器，直接使用本地的就可以了。  </p>
<h3 id="修改-ssh-目录权限"><a href="#修改-ssh-目录权限" class="headerlink" title="修改 .ssh 目录权限"></a>修改 <code>.ssh</code> 目录权限</h3><p>当我们在前面绑定了我们的密钥到机器时，<code>.ssh</code> 目录就已经创建了。但是它的拥有者是 <code>root</code>，之后当我们想把 Github 的地址加入里面的 <code>known_hosts</code> 就会出问题。所以，我们要先 SSH 到机器上面，通过下面的命令，把这个目录的拥有者改过来。</p>
<p><code>sudo chown ubuntu:ubuntu .ssh/</code></p>
<h3 id="允许本地-Forward"><a href="#允许本地-Forward" class="headerlink" title="允许本地 Forward"></a>允许本地 Forward</h3><ul>
<li>使用你的文本编辑器，打开 <code>~/.ssh/config</code> 这个文件。如果不存在这个文件，通过命令 <code>touch ~/.ssh/config</code> 来创建  </li>
<li><p>在文件里面添加下面两行配置，把 <code>my-server.com</code> 换成你服务器的公网地址：  </p>
<p>Host my-server.com<br>  ForwardAgent yes</p>
</li>
</ul>
<h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>首先通过命令 <code>ssh-add</code> 把你的命令加到 ssh-agent。<em>这句命令不是每次都需要的，在 Mac 里，偶尔 agent 会不记得这个 key，所以如果你发现突然不好使了，先运行一下这命令就好了。</em></p>
<p>登录服务器后，通过命令 <code>ssh -T git@github.com</code> 看到 Github 的欢迎语就表示配置成功了：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-ssh-agent.png" alt="SSH Agent"></p>
<p>如果还有什么问题，可以参考 Github 提供的更详细的文档 <a href="https://developer.github.com/guides/using-ssh-agent-forwarding/" target="_blank" rel="external">Using SSH Agent Forwarding</a>。  </p>
<h2 id="PM2-设置"><a href="#PM2-设置" class="headerlink" title="PM2 设置"></a>PM2 设置</h2><p>虽然我们的服务器已经可以像我们一样去拉代码了，但是我们总不能每次部署，就 SSH 登录服务器，git pull 一下代码，npm 安装必要的包，然后手动重启程序吧？  </p>
<p>前面安装的 PM2 在这个时候就能发挥作用了。只要我们轻巧一段代码，它就能帮我们做到上面说的所有的步骤，把代码部署好。  </p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>SSH 登录服务器，通过 <code>mkdir</code> 命令建立代码目录，比如：<code>mkdir app</code>。</p>
<p>然后修改 <code>ecosystem.json</code> 文件如下：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"project"</span>,</div><div class="line">      <span class="string">"script"</span>: <span class="string">"index.js"</span>,</div><div class="line">      <span class="string">"env_production"</span>: &#123;</div><div class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"deploy"</span>: &#123;</div><div class="line">    <span class="string">"production"</span>: &#123;</div><div class="line">      <span class="string">"user"</span>: <span class="string">"ubuntu"</span>, <span class="comment">// Linux 用户名</span></div><div class="line">      <span class="string">"host"</span>: <span class="string">"123.207.13.232"</span>, <span class="comment">// 填写你的服务器公网地址</span></div><div class="line">      <span class="string">"ref"</span>: <span class="string">"origin/master"</span>,</div><div class="line">      <span class="string">"repo"</span>: <span class="string">"git@bitbucket.org:chengusky/thinkincrowd-server.git"</span>, <span class="comment">// 填写你的代码地址</span></div><div class="line">      <span class="string">"path"</span>: <span class="string">"~/app"</span>, <span class="comment">// 新建的代码目录</span></div><div class="line">      <span class="string">"post-deploy"</span>: <span class="string">"npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,</div><div class="line">      <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在本地命令行执行以下命令：  </p>
<p><code>pm2 deploy ecosystem.json production setup</code></p>
<p>成功后应该见到类似提示信息：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-pm2-setup.png" alt="PM2 Setup"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>一般来说，不同的情景用不同的 <code>NODE_ENV</code> 环境变量，并引用不同的配置文件。开发的环境是 <code>development</code>，还有测试环境 <code>test</code> 和线上环境 <code>production</code>。所以，部署前，你还要准备一个新的配置文件 <code>production.js</code> 放在 <code>config/base/</code> 目录下。  </p>
<p>今后，每次修改了代码并 push 到 Github，你都只需要执行以下命令就可以完成部署了：  </p>
<p><code>pm2 deploy ecosystem.json production</code></p>
<p>成功后应该看到类似的提示信息：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-pm2-deploy.png" alt="PM2 Deploy"></p>
<p>然后我们再 SSH 登录服务器，输入命令 <code>pm2 status</code> 就能够看到服务器运行状况。 <code>pm2 log thinkincrowd</code> 就能够看到你的服务器日志（把 <code>thinkincrowd</code> 替换为你的 app 的名字）。</p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-pm2-status.png" alt="PM2 Status"></p>
<h2 id="开放服务器端口"><a href="#开放服务器端口" class="headerlink" title="开放服务器端口"></a>开放服务器端口</h2><p>到这里，离服务器能访问就只剩下最后一步了。  </p>
<p>在我们购买云主机的时候，我选择的安全组是「Linux安全组放通22端口」，它默认只让外界通过 22 端口，也就是 SSH 来访问机器。  </p>
<p>那么，现在我们来放开必要的端口，让我们能在浏览器访问我们的系统。  </p>
<h3 id="新增安全组"><a href="#新增安全组" class="headerlink" title="新增安全组"></a>新增安全组</h3><p>点击「安全组」选项：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-security-group.png" alt="Security Group"></p>
<p>克隆原来的「Linux安全组放通22端口」，并自己命名：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-security-group-clone.png" alt="Security Group Clone"></p>
<p>点击「加入实例」操作，并选择你的主机，确定就可以了：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-security-group-instance.png" alt="Security Group Instance"></p>
<h3 id="新增端口"><a href="#新增端口" class="headerlink" title="新增端口"></a>新增端口</h3><p>选择我们刚新建的安全组，点击「编辑规则」操作，新增两行，并分别输入 <code>3000</code> 和 <code>80</code> 端口：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-security-group-port.png" alt="Security Group Port"></p>
<p>大功告成。现在在浏览器输入你主机的公网 IP 和端口（3000 或者 80），看看你的服务器是不是就能访问了？为什么 80 端口也可以，我们的 Node.js 服务明明是 3000 的啊？前面安装的 Nginx 帮你搞定了一切。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/10-deploy-security-group-done.png" alt="Security Group Done"></p>
<p><em>注意：很多云服务商会要求机器绑定的域名要备案了才能开放 80 端口，要不然会被封。所以，在我们拥有一个备案了的域名前，还是先别开放 80 端口吧。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器都好了，是时候让我们的代码上场了。完成了这一步，即便你不做微信后台，你也拥有一个能提供完整后端服务的服务器了。  &lt;/p&gt;
&lt;h2 id=&quot;SSH-Agent-Forwarding&quot;&gt;&lt;a href=&quot;#SSH-Agent-Forwarding&quot; class=&quot;head
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Server" scheme="http://www.thinkingincrowd.me/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 服务器环境配置</title>
    <link href="http://www.thinkingincrowd.me/2017/04/16/Node-js-Wechat-Web-App-Tutorial-Server-Setup/"/>
    <id>http://www.thinkingincrowd.me/2017/04/16/Node-js-Wechat-Web-App-Tutorial-Server-Setup/</id>
    <published>2017-04-16T03:30:57.000Z</published>
    <updated>2017-04-16T07:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们的后端代码已经基本成型了。为了让它成为真正的微信后台，我们必须将代码部署到服务器，以便微信能够和我们的后台通信，把我们公众号收到的消息转发给我们，以便我们进行后续的处理。  </p>
<h2 id="申请云主机"><a href="#申请云主机" class="headerlink" title="申请云主机"></a>申请云主机</h2><p>目前国内比较知名的云计算服务商有阿里云，腾讯云，UCloud，美团云，青云等。国外的有 AWS，Google Cloud，Microsoft Azure 等。  </p>
<p>鉴于我们的服务器是为了承担微信公众号后台，本身腾讯云对微信的服务器网络解析和连接都有优化，所以我就选了腾讯云来作为我的云主机提供商。  </p>
<p>目前在 <a href="https://www.qcloud.com/" target="_blank" rel="external">https://www.qcloud.com/</a> 还有 30 天的云服务器免费使用。大家可以选择离自己近的区域购买服务器，我买的是广州 3 区的，配置大概如下：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-server-config.png" alt="Server Config"></p>
<p>付款后，就能看到你的云服务器在「云主机」页面列出来了。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-server-console.png" alt="Server Console"></p>
<h3 id="验证远程登录"><a href="#验证远程登录" class="headerlink" title="验证远程登录"></a>验证远程登录</h3><p>机器准备好了后，我们可以测试能否登录上机器了。我们通过 ssh 命令和分配的公网 IP 来登录：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-password-login.png" alt="Password Login"></p>
<p>这时，你输入你购买机器时配置的密码，就可以登录了。但是，这种方式其实不太安全，密码设简单容易让别人破解，复杂了还不好记。所以，我们可以利用密钥要登录。我们点击操作台菜单的「SSH 密钥」选项，然后点击按钮「创建密钥」，就可以根据需要生成新的密钥对，或者利用你系统已经有的公钥来直接绑定。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-create-ssh-key.png" alt="Create SSH Key"></p>
<p>在 Mac 下通过下面的命令就可以复制已有的公钥到剪贴板（假定你使用 Github 后应该已经有密钥了）:  </p>
<p><code>pbcopy &lt; ~/.ssh/id_rsa.pub</code></p>
<p>然后粘贴到弹窗中「输入公钥」的文本框，命名保存。  </p>
<p>最后，把刚才新建的密钥，绑定到你的主机就可以 SSH 无密码登录了。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-server-bind-key.png" alt="Server Bind Key"></p>
<p>下图是登录后，和退出的样子。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-server-logined.png" alt="Server Logined"></p>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="准备安装脚本"><a href="#准备安装脚本" class="headerlink" title="准备安装脚本"></a>准备安装脚本</h3><p>确保能远程到机器，我们就可以准备安装所需要的工具软件了，因为一开始它基本是裸机，只有你指定的操作系统。  </p>
<p>因为只是个人使用，所以我没有买云的数据库和缓存，也没有分开两台机器来各自安装数据库和我们的后台，虽然理论上来说，数据库应该要和 Application 分开。  </p>
<p>在 <a href="https://github.com/kenspirit/javascript-study-group/tree/master/scripts" target="_blank" rel="external">kenspirit/javascript-study-group/scripts</a> 文件夹下面，我准备了所有需要用到的安装和配置脚本。首先，我们通过 scp 的命令把他们复制到服务器上面。（你们只要把 <code>wechat</code> 替换为你们机器的公网 IP 就行了）  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/09-scp-scripts.png" alt="SCP scripts"></p>
<p>复制完文件，我们就登录进去检查一下。通过 <code>cd scripts</code> 进入文件夹，<code>ll</code> 查看文件详情，<code>chmod +x *.sh</code> 为所有可执行的文件（.sh 后缀）添加运行的权限。  </p>
<h3 id="安装-Redis-和-MongoDB"><a href="#安装-Redis-和-MongoDB" class="headerlink" title="安装 Redis 和 MongoDB"></a>安装 Redis 和 MongoDB</h3><p>我们只需要执行命令 <code>sudo ./install_db_ubuntu_16.sh</code>，脚本就会下载所有相关的文件，安装，配置，和设定 Redis 和 MongoDB 为自启动服务。  </p>
<p>所有的命令完成，返回命令行后，我们可以 <code>sudo reboot</code> 来重启机器，然后再通过 <code>redis-cli</code> 和 <code>mongo</code> 来确定 Redis 和 MongoDB 是不是都安装启动正常了。  </p>
<h3 id="安装-Nginx，Node-js，NPM-和-PM2"><a href="#安装-Nginx，Node-js，NPM-和-PM2" class="headerlink" title="安装 Nginx，Node.js，NPM 和 PM2"></a>安装 Nginx，Node.js，NPM 和 PM2</h3><p>同理，我们只需要执行命令 <code>sudo ./install_app_ubuntu_16.sh</code>，脚本就会下载所有相关的文件，安装和配置。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的后端代码已经基本成型了。为了让它成为真正的微信后台，我们必须将代码部署到服务器，以便微信能够和我们的后台通信，把我们公众号收到的消息转发给我们，以便我们进行后续的处理。  &lt;/p&gt;
&lt;h2 id=&quot;申请云主机&quot;&gt;&lt;a href=&quot;#申请云主机&quot; class=&quot;head
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Server" scheme="http://www.thinkingincrowd.me/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>提问，而不是斥责</title>
    <link href="http://www.thinkingincrowd.me/2017/04/09/ask-instead-of-scold/"/>
    <id>http://www.thinkingincrowd.me/2017/04/09/ask-instead-of-scold/</id>
    <published>2017-04-09T01:41:47.000Z</published>
    <updated>2017-07-09T07:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的一个团建活动是大家一起看一部电影，然后分享。这次大家选择的电影是从看过 <a href="http://www.imdb.com/title/tt1187043" target="_blank" rel="external">三傻大闹宝莱坞 3 Idiots</a> 后一直很喜欢的 Aamir Khan 拍的 <a href="http://www.imdb.com/title/tt5074352/" target="_blank" rel="external">摔跤吧！爸爸 Dangal</a>。这电影说的是一个拥有为国获取摔跤金牌梦的父亲，如何培养两个女儿成为摔跤能手并寻求金牌梦的故事。  </p>
<p>在电影里面，这个父亲真的是几乎完美：  </p>
<ul>
<li><p>不把牢骚发泄到妻女身上  </p>
<p>他老婆连续生了 4 个女孩。我想中国内如果有怀着同样理想的父亲，也难免会抱怨妻子几句，甚至家暴，虐婴，什么都出来了。  </p>
</li>
<li><p>注重教育，因材施教</p>
<p>即便某程度上来说，他也是为了满足个人的目标，才让女儿学摔跤。但是通过前面的铺垫（他强调摔跤是流淌在血液里的能力，天生的），他也是看到两个大女儿的潜力，才教她们摔跤。而且，他也认真督促小的学习英语。</p>
</li>
<li><p>不畏惧世俗和闲人闲语</p>
<p>在连续生育几个女儿，坚持让她们摔跤，穿男生的服装，剪短头发，被全村的人笑话，也不动摇。要和整个世俗对抗，真的不容易的。  </p>
</li>
<li><p>想尽一切办法帮助女儿</p>
<p>放弃工作而耕地，以便获取更多时间指导教育女儿。包下整个剧场看往期摔跤比赛片，给女儿建议。</p>
</li>
<li><p>没利用父亲的角色威胁子女听话</p>
<p>虽然在他女儿小时候，他确实是利用权威来让女儿进行艰辛的训练。但当女儿从国家体育学院回来，质疑他的教学方法过时的时候，他并没有利用权威来压制，也没有任何恶毒的言语，他只想用行动来证明。女儿受挫败哭诉的时候，他也没有回过头来落井下石。  </p>
</li>
</ul>
<p>整个电影，我印象最深刻的是，他和他大女儿在泥地赛场较量的情景。当他女儿说他以前教的方法已经过时的时候，他很生气，还重重地摔了他女儿一下。这里让我想起自己在放假期间，和儿子打羽毛球的经历：  </p>
<p>儿子和他的几个同学在双打，我自己在旁边玩起手机。后来不知道什么原因，他们中的一个小朋友 A 君，用羽毛球拍打了 B 君。我发现的时候，B 君已经捂着背部，痛苦地坐在地上。我当然马上斥责 A：“你不能用球拍打人”。后来 A 君和 B 君在争吵，我隐约听到 A 君说“你为什么要笑我”之类的话。最后 B 君离开前，对 A 君说了句狠话，我儿子就重复了一遍给 A 君听。我这时又大声呵斥了一句：“不需要你重复。你看到 A 做了什么不对的没？”</p>
<p>我回过头在想，是否能有更好的沟通方式，来把我们的观点，传递给子女，并让他们接受？我们同样想传递我们的价值观给我们的子女或他人，但是我们都犯了一个错误：<strong>直接的否定和斥责，断了后续对话的可能，甚至让彼此的对话变为争执，而不是冷静地讨论</strong>。  </p>
<p>当时，我想向我儿子和小朋友们传达两个“价值观”：  </p>
<ul>
<li>采用武力是不对的  </li>
<li>不要因为那个人是你的好朋友，就忽视他做的不对的地方，甚至支持他  </li>
</ul>
<p>我犯的第一个，也是最重要的错误是，我其实并没有搞清楚 A 君攻击 B 君的真正原因。我只看到了结果，也就是打人这个武力行为。但是我没有看到整个关系里面，B 君承担了什么角色，他到底做了什么导致 A 君那么愤怒，至少语言上没体现。即便我们都知道 B 君肯定在某些事情上冒犯了 A 君，A 君才会动怒，但是大人的习惯通常都是先制止武力行为，管制住主动方，以免事态更严重。这样，受委屈的 A 君更不容易接受我讲的道理。因为我一开口就说了：“你不能用球拍打人”，这里似乎就已经把所有的错误都定性在 A 君了。反而，如果我对 A 君说的是：“是什么导致你那么愤怒，要打 B？”，首先让 A 君感到被理解，然后再根据原因，恰当地指责 B 君，让 A 再冷静一下，最后回过头让 A 君知道武力并不是最好的解决办法，这样的劝导可能更容易接受。  </p>
<p>第二个错误是，我当时没意识到儿子说那句话背后的意义。那是为他和 A 君友谊的行为体现。回想自己小的时候，其实也有过拉帮结派，互撑各自好友的情况。在 A 君为了捍卫自己正当利益没有被我看到和承认的前提下，我否定了儿子的行为，可能会削弱 A 君和我儿子的友谊。而儿子会觉得我没“帮”他朋友，削弱了我和他之间的关系。或许我只是问儿子：“你觉得 B 说的对吗？A 打人对吗？”，留下两个问题就可以了。  </p>
<p><strong>习惯通过平和地提问，解释清楚原因来沟通，或许更能引发对方继续和我对话</strong>。因为，有些情况下，双方讨论的是哪种行为更合适的，而不是谁完全正确或者错误。即便真的完全错误，如果背后正当的动机没有被理解，对方也不可能去改变并寻求更合适的行为。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的一个团建活动是大家一起看一部电影，然后分享。这次大家选择的电影是从看过 &lt;a href=&quot;http://www.imdb.com/title/tt1187043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三傻大闹宝莱坞 3 Idiots&lt;/a&gt; 
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Conflict" scheme="http://www.thinkingincrowd.me/tags/Conflict/"/>
    
  </entry>
  
  <entry>
    <title>怎么样才算得上是全栈</title>
    <link href="http://www.thinkingincrowd.me/2017/04/01/what-is-full-stack/"/>
    <id>http://www.thinkingincrowd.me/2017/04/01/what-is-full-stack/</id>
    <published>2017-04-01T02:14:32.000Z</published>
    <updated>2017-04-06T13:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全栈的起源"><a href="#全栈的起源" class="headerlink" title="全栈的起源"></a>全栈的起源</h2><p>全栈 (Full-Stack) 这个词，我印象中它是出现在 Node.js 开始流行后。当 JavaScript 可以通过 Node.js 运行在服务端的时候，很多人都说 JavaScript 可以统一世界了。甚至还有一句话：「凡是能用 JavaScript 实现的，最终都会用 JavaScript 实现！」。这句话比「PHP 是全世界最好的语言」还要霸气吧？  </p>
<p>其实这句话的<a href="https://blog.codinghorror.com/the-principle-of-least-power/" target="_blank" rel="external">来源</a>是 Jeff Atwood 的 Atwood’s Law。他的原话是这么说的：  </p>
<blockquote>
<p>any application that can be written in JavaScript, will eventually be written in JavaScript.</p>
</blockquote>
<p>Jeff Atwood 是著名的 Coding Horror 博主，也是 Stack Overflow 的 co-founder。当然我不知道他宣布这个定律时是不是纯属开玩笑。他说这句话的时候，还列了一些其它技术大牛的<a href="http://www.globalnerdy.com/2007/07/18/laws-of-software-development/" target="_blank" rel="external">关于软件开发的定律</a>。他声称他的定律是从 Tim Berners-Lee 的 The Principle of Least Power 推导过来的。Tim Berners-Lee 又是谁呢？Wikipedia 上面是这么描述的：Inventor of World Wide Web。他的 Principle of Least Power 是这么一段话：  </p>
<blockquote>
<p>Computer Science in the 1960s to 80s spent a lot of effort making languages which were as powerful as possible. Nowadays we have to appreciate the reasons for picking not the most powerful solution but the least powerful. The less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative from, anyone can write a program to analyze it.</p>
</blockquote>
<p><em>Notes: 个人觉得最后的 declarative from 应该是 declarative form。</em></p>
<p>大意就是说，计算机科学领域花了很多年月和精力，一直追求把编程语言设计得尽可能地强大。可现在，我们应该意识到，要选择的应该是最不强大的语言，而不是反过来。原因是，语言越不强大，我们就能在它之上做更多事情。如果你使用一种简单的声明式手法编写了一个语言，任何人都可以写另一个程序来分析它。  </p>
<p>JavaScript 确实并不是一种最强大的语言。它其实是 Brendan Eich 在 Netscape 时，为 Web 和 HTML 创造的一种<em>胶水</em>语言，来让 Web 变得更动态。这门语言是他花了 10 天的时间写出来的。JavaScript 其实一直被很多人鄙视，觉得它根本不是一门正式的语言。还有很多人用下面的一幅图来说明它的优劣之差。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/chapter1-good-parts.jpg" alt="The Good Parts vs Definitive Guide"></p>
<p>现在的 JavaScript 相比当初，已经变得很强大。同时，围绕着它，伟大的工程师们创造了很多的工具和框架。所以，很多人把它比喻成 Web 的汇编语言，最基础的语言。我们甚至可以把很多用其它一些高级的语言写的程序，转译为 JavaScript 的代码，然后在 Web 运行。听起来很神奇吧？  </p>
<p>那是不是真的学会了 JavaScript，你就可以称自己为全栈工程师呢？  </p>
<h2 id="为什么有全栈这种说法"><a href="#为什么有全栈这种说法" class="headerlink" title="为什么有全栈这种说法"></a>为什么有全栈这种说法</h2><p>要了解全栈，我们首先来了解一下栈是什么东西。在我之前写的，被新生大学引用的文章，「<a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a>」里面，我作了一个类比：栈就像超市里叠在一起的一箱箱牛奶。栈是一种叠在一起的形态。你远看它是一个整体，但是其实它分很多层。既然有分层，那全栈的最朴素的定义，就是所有的层。  </p>
<p>所以，当你说一个人是全栈工程师，就是说他能包干所有的事情。  </p>
<p>所有的事情到底包含了什么？上面的定义还是太模糊了。我们不妨从技术和产品两个层面来细分一下。  </p>
<h3 id="技术层面的分层"><a href="#技术层面的分层" class="headerlink" title="技术层面的分层"></a>技术层面的分层</h3><p>技术层面，有一个专门的名词，叫<em>技术栈</em>。它就是用分层的角度，来看待一个产品背后用到的所有的技术。  </p>
<p>拿大家最熟悉的 Web Application，其实也就是网站，来简单说明一下吧。  </p>
<ol>
<li><p>第一层统称前端。<br> 这一层包括网页的视觉，设计，布局和交互。现在我们接触的网页，都不仅仅是信息展示了。大部分都为用户提供一些操作和交互，以达到特定的目的。比如，大家上携程订酒店，可以输入日期，城市，酒店名，然后查找相关信息。如果你填入日期不对，网页上还会给予你提醒。  </p>
</li>
<li><p>第二层统称后端。<br> 这一层为前端提供数据，负责业务逻辑处理，存储数据，与外部系统集成等。比如，当你选择好酒店，根据页面的引导确认订单，然后利用微信，支付宝或者银行付款。那么，从生成订单的逻辑，保存你的资料数据，和微信集成，到最后给你发确认邮件等，都和后端密切相关。  </p>
</li>
</ol>
<p>上面只是很笼统的分了两层。其实无论是在传统的 IT 企业，还是互联网公司，计算机技术类职位有很多分类。  </p>
<p>前端很大，可以拆分出视觉设计，交互，和 Web 页面开发。有些大公司甚至还把 Web 页面开发分拆出专门写 CSS 和专门写 JavaScript 交互逻辑的团队。另一些公司的前端可能还包括 iOS, Android 开发。  </p>
<p>后端其实也还能分出好几层。有写业务逻辑的开发团队，有数据库管理人员也就是 DBA，运维，和安全等。即便是写业务逻辑的开发团队，也可能根据使用的语言再细分，比如 JAVA, Go, Ruby, Node.js 等。  </p>
<h3 id="产品层面的分层"><a href="#产品层面的分层" class="headerlink" title="产品层面的分层"></a>产品层面的分层</h3><p>从打造一个完整的产品的角度，栈的分层就有另外一种方式。  </p>
<ol>
<li>栈的最顶层，是产品经理，业务分析人员等。他们负责对整个产品的方向和功能，做详细的规划和定位。  </li>
<li>接下来的一层负责开发，成员可以包括架构师，开发团队，设计团队等负责实际打造整个产品的人。测试团队有可能同属于开发，也有可能是分拆出来的另一个团队。  </li>
<li>产品上线后，市场和运营的部门需要负责推广和运作。当然，这一层并不一定在最底层。有些工作甚至早于开发。  </li>
</ol>
<h3 id="为什么有分层"><a href="#为什么有分层" class="headerlink" title="为什么有分层"></a>为什么有分层</h3><p>虽然上面的分层方式非常简单粗暴，但我相信大家无论是从技术层面，还是整个产品层面，现在对它们各自的技能栈都有了大概的了解。  </p>
<p>那为什么会这样分层，这是由什么决定的呢？我相信大家其实都能猜到。这和开发这个产品的团队，企业组织架构有密切关系。其实在软件开发和系统设计领域就有一条著名的康威定律，<a href="https://en.wikipedia.org/wiki/Conway&#39;s_law" target="_blank" rel="external">Conway’s_law</a>：</p>
<blockquote>
<p>organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations</p>
</blockquote>
<p>它的意思是说，企业设计的系统，其实做出来的设计是受限于它本身的内部沟通架构的。虽然这个定律说的是系统设计，但是我觉得道理是相通的。所以，一般情况下，企业越大，组织架构层级或者部门越复杂，分层可能越多越细。而小的团队，里面每个人承担的责任更广泛，更杂。  </p>
<h3 id="什么是全栈"><a href="#什么是全栈" class="headerlink" title="什么是全栈"></a>什么是全栈</h3><p>我相信到这里，大家可能对「怎么样才算得上是全栈」有一定的想法了。  </p>
<p>从技术的角度来说，大部分人的想法就是，全栈就是所有的技术都懂。能够从视觉设计，页面交互，后台业务逻辑，做到服务器管理运维等。也就是说，全栈就要求这个人是技术大拿，会很多编程语言，精通各种领域。  </p>
<p>如果从这种观点出发，其实没几个人敢声称自己是全栈，因为很容易被其它技术人员拎起其它技术就抡过去，说：“XXX 你懂吗？不懂？那还好意思说全栈。” 所以，你们可以理解，为什么之前因为 JavaScript 能写后端了，就能刮起一股全栈风，声称学会 JavaScript 就能包打天下，就是一名全栈开发者。但同时，也有不少技术人员，鄙视或者调侃这种观点和这些人。大家现在也能够体会，为什么笑来老师在微博上说，一个人如果不笨，通过一年的学习时间，也是可以成长为全栈工程师，并且搞全栈班培训，被黑的多么厉害了吧？  </p>
<p>从产品的角度来说，一些技术人员胆敢声称是自己是全栈的时候，另外又会有一波人拿其它方面的能力来质问他：“你会 YYY 吗？只懂技术算个毛。那些单枪匹马的成功创业者才有资格说自己是全栈。”  </p>
<p>所以说，关于全栈，每个人都有不同的定义。  </p>
<h2 id="我的全栈观"><a href="#我的全栈观" class="headerlink" title="我的全栈观"></a>我的全栈观</h2><p>我认为，全栈是一种态度和学习能力。它代表一种思考和对待问题的方式，而不是一种最终的状态。  </p>
<p>首先，态度的意思就是不给自己设限。通常情况下，一个团队里面分不同的角色，我们各自都在某一个领域努力。但是，如果其它领域的负责人离职或请假，系统的瓶颈已经不在你负责的领域，团队需要你学习跨领域的知识来解决问题的时候，你不能说我不懂，这个问题不是我负责的，是前端或者后端的，然后就不管。  </p>
<p>有了端正的态度，还需要一定的学习能力。如果说，要你去解决一个问题，还要等你去培训学习那么一年半载回来再说，那肯定不行了。通常情况都要求我们自己马上寻找资料，现学现用来解决问题。  </p>
<p>具备了前面两种条件，要做的就是为实现自己的目标和产品，持续不断地学习任何需要的技能。计算机领域变化的那么快，现在需要的技术栈，可能几年后就被淘汰了。  </p>
<p>全栈虽然确实需要有一定的技术广度，但并不是一定要精通所有的技术。而是当工作或者项目需要的时候，你能很乐意并迅速学习和使用新的技术，而不是一直待在原来的舒适区。甚至，有时候要求你学习的不是一门新的语言，一项技术，而是要求你学美术设计，学习产品，运营或者项目管理等其它技能。  </p>
<p>所以说，全栈不是一种最终的状态，而是一条永无止境的道路，一种追求。我也才刚刚启程。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全栈的起源&quot;&gt;&lt;a href=&quot;#全栈的起源&quot; class=&quot;headerlink&quot; title=&quot;全栈的起源&quot;&gt;&lt;/a&gt;全栈的起源&lt;/h2&gt;&lt;p&gt;全栈 (Full-Stack) 这个词，我印象中它是出现在 Node.js 开始流行后。当 JavaScript 可
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Full-Stack" scheme="http://www.thinkingincrowd.me/tags/Full-Stack/"/>
    
  </entry>
  
  <entry>
    <title>亲密关系的沟通没你想的那么简单</title>
    <link href="http://www.thinkingincrowd.me/2017/03/31/intimate-communication-is-not-as-easy-as-you-think/"/>
    <id>http://www.thinkingincrowd.me/2017/03/31/intimate-communication-is-not-as-easy-as-you-think/</id>
    <published>2017-03-31T13:13:17.000Z</published>
    <updated>2017-07-09T07:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在「<a href="http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/">最值得投资的东西，你却可能把它忘了</a>」里说到，最值得投资的，应该是对你重要的人。很明显，如果你已经有了伴侣，Ta 无疑是最重要的人了，没有之一。下面就信守上篇文章的承诺，谈谈我自己的经历和想法。</p>
<p>有一次和老婆吵了一架，心情降到极点，什么心情都没有。不止怎么的，在知乎 Live 看到了李松蔚和冼艺哲Casper 一些关于沟通，亲密关系的 Live，然后我一口气买了 6 个，听了两天。</p>
<p>说说我听了他们的 Live 后的感受和根据自身情况的总结吧。</p>
<h2 id="小心你固化了-Ta-和你的沟通模式"><a href="#小心你固化了-Ta-和你的沟通模式" class="headerlink" title="小心你固化了 Ta 和你的沟通模式"></a>小心你固化了 Ta 和你的沟通模式</h2><p>在李松蔚的「如何应对亲密关系中的困境与冲突」Live 里面说到，沟通的类型分两种：对称型沟通，互补型沟通。</p>
<ul>
<li>对称型沟通：双方冷战，或者像军备竞赛那样不断升级争吵。双方地位平等。  </li>
<li>互补型沟通：一方主动抱怨，一方被动接受。或者一方忽略，另一方主动迎合。双方不平等地位。  </li>
</ul>
<p>争吵情况下，我和我老婆的沟通，通常属于互补型。因为多数是她在抱怨（抱怨在这里是中性词），而我主要在听，不怎么回答和说话。形成这种局面其实是有原因的。首先，我成长的主要处事方式就是“被动地处理”一些发生了和要面对的事情，而且在处理亲密关系方面也不成熟，过错多数在我。即便我不认同她一些观点，由于害怕冲突，担心影响我们的关系，所以，在面对激烈的争吵时，我也不会太激烈地辩驳。</p>
<p>一般情况下，固化了的对称型沟通，双方没有一方肯先服软。固化了的互补型沟通，弱势方不敢升级为对称型。可是，李松蔚在 Live 里说到：<strong>良好的关系，要能在这两种沟通类型中转换的</strong>。研究婚姻闻名的 John Gottman 也有观点表示，防止和避免冲突其实会破坏婚姻。而亲密关系中的双方，<strong>只要让正面与负面的互动比例高于 3:1，就是良性和稳定的关系，并不需要完全零冲突</strong>。</p>
<p>所以，双方应当注意沟通类型的恰当转换。如果你一直是弱势方，你不妨主动寻求变动，有时候恰当的冲突，未尝不是好事。如果你一直是强势方，或许应该考虑一下恰当弱化，让对方和你保持对称型沟通。比如说，我应当更主动道歉或者平静地回应，或者我老婆应当稍微引导我回应，虽然这对于在气头上的女人来说，要求有点高。</p>
<p>还有，李松蔚在他的 Live 提到双方关系里非常重要的一个概念，<strong>授权</strong>。你别看授权像是主动性的词语，其实我的被动，不回应，在争吵状态下，也是授权对方成为互补型的主动方。同样，其实我老婆在气头上时对我的不理睬，也是授权了我处于互补型被动方。</p>
<h2 id="沟通的重点是情感诉求"><a href="#沟通的重点是情感诉求" class="headerlink" title="沟通的重点是情感诉求"></a>沟通的重点是情感诉求</h2><p>我想，每一个女人都能深刻理解这个观点，但是我觉得大多数的男人并不知道。很多男的，包括我，都认为平时相安无事，平平静静地生活就是万幸了。自己如果还要挑起一些东西来说，简直就是作大死。（冼艺哲Casper 的 Live 「你和你的伴侣真的在沟通吗？」里的话）</p>
<p>可是，有研究表明，女人一天要通过表情，肢体，语言等发出 20000 个交流信号，而男性只需要 7000 个。所以为什么说男的下班回家都几乎不用说话，女的还想扯老公聊这聊那，矛盾也容易由此产生。</p>
<p>我不知道这个研究的真实性，不过听了冼艺哲Casper 的 Live 后，我终于能理解真正的沟通不在于语言，而是情感的交流。每次当女方想沟通的时候，她其实发起了一次情感交流的要约。她可能想男方理解她的委屈，或者把对方关注点转到她身上，又或者是期望一起参与某些事情来保持亲密的感觉。<strong>谈话的内容并不是重点，而是内容背后的情感诉求。而且，面对沟通要约，最重要的是男方要表现出一种面对，而不是背对的态度</strong>。</p>
<p>举一个简单的例子，在外逛街的时候，老婆会问我想吃什么，并让我做主。可是，我往往又把这个问题丢回给她，问她想吃什么。这时就出问题了。我只看到内容谈话的内容是吃什么，没理解背后的诉求是她想我做主，希望寻求一种被宠爱和照顾的感觉。我对吃没要求，但是我知道她相对有选择，所以希望满足她的需要，反过来问她。大家的关注点不一样。另外，我把问题丢回给她，我表现出来的感觉就是背对的，而不是面对的态度，所以她会感觉很不好。</p>
<p>回到我们吵架的场景时，我的心理状态是什么呢？由于我是典型男生思维，觉得平时相安无事就没问题了。所以在她抱怨的时候，我是有点措手不及的，我其实在认真听，和思考是不是真的自己做的不对。所以，我表现出来的现象就是沉默。不过，即便我发现是自己做的不对了，我也沉默很久了，不敢道歉，也不会去哄哄。所以，经常给对方的感觉也是在背对她的沟通。</p>
<p>这都是我做的不好的地方。刘轩（公众号「轩言」）最近刚和赖佩霞开了个直播，说到道歉是家庭关系中很重要的部分。“道歉，应该是来自于对人的爱、对整个家庭的爱、对自己的爱”。回头我也要看看。</p>
<h2 id="争论的关键不在于谁正确"><a href="#争论的关键不在于谁正确" class="headerlink" title="争论的关键不在于谁正确"></a>争论的关键不在于谁正确</h2><p>夫妻间的争论和抱怨是不可能避免的。而且，研究婚姻闻名的 John Gottman 也说，夫妻之间三分之二的争吵其实是“无解的”。既然无解，为什么还要吵，而且可能还互不迁就，吵得不可开交。其中，很大部分原因就是大家只看到吵架的内容，一直想证明自己是对的，对方是错的，却没有注意背后真正的心理诉求。</p>
<p>李松蔚在他的「如何应对亲密关系中的困境与冲突」Live 中特别举例说明这一点。他还提到<strong>元沟通</strong>的概念。其实，最近涌出所谓的元认知，元学习等概念也是一样的。本质上就是必须意识到自己在思考，学习，和沟通。就像是自己的意识跳出自己的身体，作为旁人来审视自己一样。<strong>元沟通目的不是从自己出发，而是为了让双方看到大家的诉求，拼起来看到双方要在关系里头共同完成什么</strong>。</p>
<p>之前，在儿子犯错后，关于如何批评教育的方式，我和老婆有着不同的见解。儿子的性格有时比较倔，我觉得应该态度相对温和，在不激怒他的情况下好好讲道理，这样他才能更容易听进去。她就觉得我有时说话太软，没有效果，应该更强硬地用一些禁止性的手段和话语。其实，这两种方法都秉持着同样的目的，只是从两种不同的角度来考虑，并没有完全对错。正如之前写的「<a href="http://www.thinkingincrowd.me/2017/03/04/frequent-anxiety-might-due-to-prevention-focused-personality/">时常感到焦虑可能因为你是防御型人格</a>」一文提到 Promotion 和 Prevention Goal。</p>
<p>此外，我老婆不说的话，我还不知道背后原来还有截然不同的情绪的诉求。当年老婆生了后没有辞职，我爸妈也没退休，所以我儿子是我母亲在乡下带大的，儿子的情感依托都在我妈身上多。儿子小时候有一次不听话，老婆打了他手一下，小家伙就记仇了。加上她身体不太好，所以经常都是我带儿子出去玩。慢慢地，儿子就相对听我妈和我的话，也亲近些。但是和我老婆的关系就相对疏远些。所以，在教育方面当我和我老婆有不同的意见的时候，儿子当然倾向于听我的，老婆就感觉在家庭里被疏远了。这就更加造成我老婆必须和我要争论谁是正确的了。</p>
<p>所以，如果从对错出发，我如果错了并顺从老婆的做法，她的感觉就会不同。如果我能更早察觉到背后的情感诉求，大家的沟通可能会更有效些。</p>
<h2 id="正面的基调"><a href="#正面的基调" class="headerlink" title="正面的基调"></a>正面的基调</h2><p>在冼艺哲Casper 的 Live 里面，反复强调一点就是大家<strong>沟通的时候要确保是良好的出发点和基调</strong>。沟通的目的不是为了战胜对方，证明对方是错的。</p>
<p>所以，大家一定要秉持一种信念，双方还是相爱的，希望对方变得更好。这样，即使你是在抱怨，也尽量用一些中性的词汇。后者用表达负面感觉的词汇时，加一些正面的词汇，尽量不去刺激对方。</p>
<p>我觉得基调和信念真的很重要。如果某一方放弃 Ta 所坚持的信念，可能就无法挽回了。以前网上还是哪里不是有一个笑话吗？一个女的老是怀疑自己老公有外遇，本来他老公是没有的，但最后就破罐子破摔了。因为既然她老婆都不信任他，干脆真去找一个好了。其实外遇不是导致婚姻问题的原因，而是结果。</p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>其实写完这篇文章，一开始我真不太敢发。后来想想其实没什么，所有的关系都存在各种问题。况且，<strong>能正确的面对自己，认识到自己的不足，才有可能改变和进步</strong>。上面写的大条道理，但是我也不敢说认识到这些问题的做法后以后就不会犯错了。只是我的认知上有了更清晰的指引。</p>
<p>其实我之前决定离开珠海到北京工作，除了自己追寻事业外，还希望让老婆不工作，好好休息，并让儿子和她有更多亲密接触的机会，也把教育儿子的重任教给她，信任她。目前来看，儿子和她的关系确实好了非常多，而且她变得比我更有耐心。我们都进步了，我真的非常高兴。</p>
<p>最后，还是要推荐一下李松蔚和冼艺哲Casper 的知乎 Live。里面还有其它精彩内容和实例，包括蔡格尼克记忆效应，男女的情绪特点，比如男生情绪可能不容易爆发，但不知不觉跌落更快，更无法挽回等。我建议有伴侣的都可以买来听听，真觉得不错。下面是我自己听的，也觉得不错的几个：</p>
<p>李松蔚：北大心理学博士。他是偏理性的理工男风格，比较客观分析心理现象。<br>冼艺哲Casper：港大，婚姻与家庭治疗的临床心理工作者。她是偏感性的知性女人。听她的 Live 就觉得哇塞，原来女的是那么想的，又觉得她懂男性的心理，说的很对。</p>
<ul>
<li><a href="https://www.zhihu.com/lives/779765069494878208" target="_blank" rel="external">李松蔚 - 如何应对亲密关系中的困境与冲突</a></li>
<li><a href="https://www.zhihu.com/lives/752271603613564928" target="_blank" rel="external">李松蔚- 人际互动的奥秘</a></li>
<li><a href="https://www.zhihu.com/lives/743228787038113792" target="_blank" rel="external">冼艺哲Casper - 你和你的伴侣真的在沟通吗？</a></li>
<li><a href="https://www.zhihu.com/lives/780455259406364672" target="_blank" rel="external">冼艺哲Casper - 异地恋，这一段独立而丰盛的旅程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在「&lt;a href=&quot;http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/&quot;&gt;最值得投资的东西，你却可能把它忘了&lt;/a&gt;」里说到，
    
    </summary>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/categories/Relationship/"/>
    
    
      <category term="Communication" scheme="http://www.thinkingincrowd.me/tags/Communication/"/>
    
  </entry>
  
  <entry>
    <title>最值得投资的东西，你却可能把它忘了</title>
    <link href="http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/"/>
    <id>http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/</id>
    <published>2017-03-25T02:08:47.000Z</published>
    <updated>2017-03-25T02:10:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="值得投资的东西太多"><a href="#值得投资的东西太多" class="headerlink" title="值得投资的东西太多"></a>值得投资的东西太多</h2><p>什么东西最值得投资？不同的人有不同的答案。  </p>
<p>最直接的想法，投资嘛，股票，比特币，房子都是最值得投资的，尤其是大家炒的热火朝天的时候。每次只是恨自己怎么不早点知道。  </p>
<p>健身风潮来的时候，又有很多人会说，最重要的是身体和健康。因为没有了健康，就什么都没有了。身体是本钱，根基。  </p>
<p>最近学习风潮很猛烈，说是开启和进入了知识付费和变现的年代。各种直播，学习的平台都推出教大家如何自我管理，理财，长眼界等投资自己的课程。最值得投资的，变成了知识，能力，成长，注意力等。  </p>
<p>其实什么东西才是最值得投资的东西呢？  </p>
<h2 id="什么才最重要"><a href="#什么才最重要" class="headerlink" title="什么才最重要"></a>什么才最重要</h2><p>3 月 23 号晚上，笑来老师在得到为他的「通往财富自由之路」专栏做直播。直播里提取了专栏讲到的一些重要的概念，当然就有注意力，投资，心态等。  </p>
<p>可是，让我感触最深，直播完后我第一时间和朋友说的一个观念就是：“<strong>重要的是把精力放在你身边对你很重要的人身上。以身作则地影响 Ta，改变 Ta，和 Ta 一起变得更好。</strong>”  </p>
<h2 id="谁才重要的人"><a href="#谁才重要的人" class="headerlink" title="谁才重要的人"></a>谁才重要的人</h2><p>他们可能是你的大学舍友，同事，父母，伴侣，或者儿女，就是那些<strong>和你接触时间最长的人</strong>。  </p>
<p>试想一下，  </p>
<p>如果你不愿意去帮助你的同事，教导你的下属，他们遇到问题的时候，你老是抱怨他们能力不够而不是耐心培训他们，你怎么可能解脱出来，去做更有挑战性的事情？工作那么多年来，任何同事有问题来找我，我都努力帮助他们。我也从无保留地传递我认为有价值的知识和信息给我带过的团队成员。所以，一直以来，我也比不少人有更多机会和较好的口碑。  </p>
<p>如果你的父母，老是干涉你的生活，唠叨你去找男女朋友，或者用不恰当的价值观评判你现男女朋友，而你却不肯花时间慢慢和他们聊天，改变他们的想法，你怎么可能用你想要的方式生活。或者他们三天两头吵架，你成了磨心，时不时收到投诉电话，那怎么可能安心生活和工作。  </p>
<p>如果你的伴侣，经常对你抱怨，或者在儿女的教育方法上和你产生分歧和争吵，你怎么可能静心在家里学习和自我成长。可能你都不愿意下班回家。  </p>
<p>如果你的儿女，经常在外面闯祸，被老师投诉，你想想你能有多少时间安下心做自己想做的事情。  </p>
<p>或许，你可以说，我不管还不行吗？如果真的可以，那他们并不能被定义为对你来说重要的人。如果你真的可以不管和离开，那他们和路人可能没什么区别。除非你真的真的真的能彻底离开，否则是没法放弃治疗的。  </p>
<h2 id="如何处理亲密关系"><a href="#如何处理亲密关系" class="headerlink" title="如何处理亲密关系"></a>如何处理亲密关系</h2><p>这是一个超级复杂的问题，对我来说超级头疼。  </p>
<p>以前，我仅仅是一个“听话的儿子”，所以身份相对简单，家庭也比较和谐。所以，一直以来，我只需要关注“自己的”成长，没有或者很少<strong>「主动地关注」身边最重要的人的需要</strong>。很多时候，我都在<strong>「被动地处理」一些发生了和要面对的事情</strong>。  </p>
<p>这种生活和行为方式一直比较适用。现在，我已经是人之夫，和有了自己的儿子。当我的角色发生那么多的变化后，以前那种模式肯定是无法满足需求的。可是，我这方面的学习的转变一直比较慢，真是辛苦我的夫人了。  </p>
<p>留个悬念，下篇文章再说说我自己的经历和想法。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;值得投资的东西太多&quot;&gt;&lt;a href=&quot;#值得投资的东西太多&quot; class=&quot;headerlink&quot; title=&quot;值得投资的东西太多&quot;&gt;&lt;/a&gt;值得投资的东西太多&lt;/h2&gt;&lt;p&gt;什么东西最值得投资？不同的人有不同的答案。  &lt;/p&gt;
&lt;p&gt;最直接的想法，投资嘛，
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="成长" scheme="http://www.thinkingincrowd.me/tags/%E6%88%90%E9%95%BF/"/>
    
      <category term="关系" scheme="http://www.thinkingincrowd.me/tags/%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>时常感到焦虑可能因为你是防御型人格</title>
    <link href="http://www.thinkingincrowd.me/2017/03/04/frequent-anxiety-might-due-to-prevention-focused-personality/"/>
    <id>http://www.thinkingincrowd.me/2017/03/04/frequent-anxiety-might-due-to-prevention-focused-personality/</id>
    <published>2017-03-04T13:20:17.000Z</published>
    <updated>2017-04-06T13:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在听 Audible Book「Succeed: How We Can Reach Our Goals」。作者在某一章的开头举了一个例子，我觉得真的和我一模一样。</p>
<p>作者的小儿子在学走路的时候，虽然她和她丈夫都怀着希望他能掌握这门技能的目的，但是他们夫妻二人的心态和策略是完全不同的。作者始终担忧她儿子摔伤，各种小心和保护，甚至楼梯也不让上。但是她丈夫就乐于看他儿子挑战各种环境。</p>
<p>也就是说，对于同样期望儿子学会走路的目的，他们各自的关注点是不同的：</p>
<ul>
<li>尽量不受伤（Prevention focus）  </li>
<li>尽量接受挑战（Promotion focus）  </li>
</ul>
<p><strong>不同性格的人，要实现不同的目标，他们倾向于从不同的角度来分析和前进。不同的思考方式，对推进的速度，坚持时间的长短，实现目标或失败后的感受，都有不同的影响。</strong></p>
<p>读完那章书，我发现自己是非常偏向于防御型的。为什么这么说呢？</p>
<ul>
<li>购物的时候，我更关注于耐用性，可靠性，口碑，而不是潮流，新颖和花俏的功能  </li>
<li>旅游的时候，家人的安全，甚至高于享受嬉戏和游乐的感觉  </li>
<li>工作的时候，我更多是认为要完成的任务是应尽的责任，避免批评和责备，而不是追求表扬和荣誉  </li>
<li>投资的时候，我的策略相对保守，并稍微分散投资  </li>
<li>开车的时候，我尽量和前车隔较远的距离，提前刹车  </li>
<li>吃饭的时候，我基本都是菜剩下的多，因为怕后面有饭没有菜了  </li>
</ul>
<p><strong>进取型（Promotion）性格的人，更多是从最大化收益，提高自身满足感到理想中的状态这种角度来考虑的。而防御型（Prevention）性格的人，则是希望评估所有风险，尽量减少损失，觉得要做的事情都是应该要做的，尤其是满足生存需要的事情</strong>。就因为防御型性格的人，对他关注的事情都认为是「生存所需」，所以一旦无法达成，会感到生命受到威胁，从而产生焦虑的情绪。防御型性格的人，有更强的危机感。</p>
<p>但是进取型的人，目标对他们来说是理想中期望能额外获得的东西。所以，即便失败了，感受到的则多是失望和伤心而已。</p>
<p>所以，如果你时常焦虑，你可以分析一下自己是不是偏向于防御型性格的人。</p>
<p>文章里还有一句话，我觉得非常精准地描述出防御型性格的人的普遍心理状态：</p>
<blockquote>
<p>Too much self-admiration, it seems, feels dangerous to them.</p>
</blockquote>
<p>过多的自我崇拜，对他们来说是非常危险的事情。所以，一般这些人都比较谦虚，信心不足。</p>
<p>当然，<strong>防御型性格的人，不是做任何事情都持防御心态的。只是每个人都会以倾向于某种类型为主。一个人做不同类型的事情，甚至同一件事情的不同阶段，关注点都可能会不同</strong>。比如，当一个人被游说去健身房，这时候他可能是被美好身段的理想状态而吸引，受进取型思维的影响来启动和推进，热情也相对较高。但是，到了后面，那些没有转换成防御型心态的人，没把维持好的身体作为目标，可能到了平台期，或者受到一点失败挫折，就放弃了。</p>
<p>所以，并不是说防御型性格就不如进取型性格好。为了能更好地实现你的目标，用自己感觉最舒服，和目标最匹配的方式来推进和维持是最好的。</p>
<p>回到焦虑的问题上，我目前也没有答案说如何帮助防御型性格的人解除焦虑。但是，至少现在我能从一个新的角度来认知自己。这其实就是元认知，只有认识到自己是如何思考，才有可能会改变。而且，以后应对各种事情，我都会尽量从 Promotion 和 Prevention 两种角度来思考，看哪种方式更合适。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在听 Audible Book「Succeed: How We Can Reach Our Goals」。作者在某一章的开头举了一个例子，我觉得真的和我一模一样。&lt;/p&gt;
&lt;p&gt;作者的小儿子在学走路的时候，虽然她和她丈夫都怀着希望他能掌握这门技能的目的，但是他们夫妻二人
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Prevention" scheme="http://www.thinkingincrowd.me/tags/Prevention/"/>
    
      <category term="Anxiety" scheme="http://www.thinkingincrowd.me/tags/Anxiety/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 登录验证和授权</title>
    <link href="http://www.thinkingincrowd.me/2017/02/25/Node-js-Wechat-Web-App-Tutorial-Access-Control/"/>
    <id>http://www.thinkingincrowd.me/2017/02/25/Node-js-Wechat-Web-App-Tutorial-Access-Control/</id>
    <published>2017-02-25T15:20:00.000Z</published>
    <updated>2017-03-25T02:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>帐号登录验证和权限设置，可以说是任何一个系统都必须具备的基本功能。无论是电商，社交，还是企业系统，甚至连输入法等工具，都可以让你注册一个帐号。方式从最传统的帐号密码登录，到用社交帐号绑定不等。  </p>
<h2 id="登录验证（Authentication）"><a href="#登录验证（Authentication）" class="headerlink" title="登录验证（Authentication）"></a>登录验证（Authentication）</h2><p>登录有什么用呢？最基本的目的当然是为了让系统在茫茫人海中认得你。你上次来干什么了，做到哪一步，这次需要接着做吗？当然，验证的部分是为了不让其他人冒充你。所以，最基本的功能就是：  </p>
<ul>
<li>记得之前的你  </li>
<li>确保真的是你  </li>
</ul>
<h3 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h3><p>为了让系统记得之前的你，后台当然要保存和记录一些数据，比如你的个人资料，上次没有写完的文档。但是，比如说你用浏览器打开了你的邮箱，写邮件，系统怎么知道这次保存的邮件内容，是你的，而不是别人的呢？不可能让你每保存一次都用密码验证一下吧？  </p>
<p>其实，当你成功登录验证后，服务器端通常会生成并维护一个会话，同时为这个会话绑定一个 ID（Session ID）。然后它把这个 ID 通过 Cookie 保留在你访问服务器的浏览器端。  </p>
<p>后面每一次对服务器的请求或操作，浏览器都会带上这个 Cookie，服务器通过 Session ID 来提取相应的 Session 数据，并识别出你。所以你的每一个操作，系统都能知道是你，并记得之前的你。但是，如果这个会话过期了（比如说登录后长时间没任何操作），系统就需要你重新登录验证一次才能继续操作。  </p>
<p>虽然服务器的 Session 允许存储不少信息，但是一般只存储用户 ID 就够了。<strong>数据存储的越多，越浪费内存和影响性能</strong>。同时，在一些用户量大，需要做负载均衡的系统，任何一个请求都不能保证下一次和这次通信的服务器是同一个，所以 Session 的数据一般都存储在所有服务器都能访问的内存型数据库，比如 Redis。  </p>
<p>在 <code>evergrow</code> 框架里面，Session 的配置代码在 <code>/system/session-manager.js</code> 文件里。<code>evergrow</code> 也是使用 Redis 来存储 Session 资料，所以在你需要使用 Session 功能时，记得启动 Redis 服务器。  </p>
<h3 id="Passport"><a href="#Passport" class="headerlink" title="Passport"></a>Passport</h3><p>为了确保真的是你，系统必须使用某一种方式来登录验证。要自己写一个登录验证的功能不难。但是要写一个好用，并且容易扩展的验证功能就不容易了。<code>evergrow</code> 使用了一个叫 <a href="http://passportjs.org/" target="_blank" rel="external">Passport</a> 的中间件，并默认提供了最基本的帐号密码登录的方式。等你了解了 Passport 的使用后，你就可以轻松地改成用微信，微博登录等。  </p>
<p>我们先来看看 Passport 的配置。代码基本都在 <code>/module/auth/auth-manager.js</code> 里面，才 50 行。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1) Part 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureAuth</span>(<span class="params">app</span>) </span>&#123;</div><div class="line">  app.use(passport.initialize())</div><div class="line">  app.use(passport.session())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2) Part 2</span></div><div class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</div><div class="line">  done(<span class="literal">null</span>, user._id)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</div><div class="line">  UserManager.load(id)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      done(<span class="literal">null</span>, user)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 3) Part 3</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">localAuth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> passport.authenticate(<span class="string">'local'</span>, &#123;failWithError: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</div><div class="line">  usernameField: <span class="string">'loginId'</span>,</div><div class="line">  passwordField: <span class="string">'password'</span>,</div><div class="line">  passReqToCallback: <span class="literal">true</span></div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, loginId, password, verified</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!loginId || !password) &#123;</div><div class="line">    verified(<span class="literal">null</span>, <span class="literal">false</span>, &#123;message: <span class="string">'Invalid login info.'</span>&#125;) <span class="comment">// err, user, info</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  UserManager.findLocalUser(loginId)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> UserManager.validatePassword(password, user)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">isValid</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (user) &#123;</div><div class="line">            <span class="keyword">delete</span> user.password</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">return</span> isValid ? user : <span class="literal">null</span></div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (user === <span class="literal">null</span>) &#123;</div><div class="line">        verified(<span class="literal">null</span>, <span class="literal">false</span>, &#123;message: <span class="string">'Invalid login info.'</span>&#125;)</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      logger.info(&#123;req: req&#125;, <span class="string">'User Login successfully'</span>)</div><div class="line">      verified(<span class="literal">null</span>, user)</div><div class="line">    &#125;)</div><div class="line">    .catch(verified)</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>第一部分只是配置。<code>configureAuth</code> 方法在 <code>/system/server-manager.js</code> 里面被调用。要注意的是它应该在配置 Session 之后才调用。  </p>
<p>第二部分是序列化（serialize）和反序列化（deserialize）用户信息。这里就是前面说的在 Session 里存储什么数据了。序列化的时候，你们看到我只存了 <code>user._id</code>。反序列化的时候，通过前面存的 id 在通过查找数据库 <code>UserManager.load(id)</code> 来获取用户，然后放到 Session 里，供后续的中间件或代码使用（通过 <code>req.user</code> 获取）。  </p>
<p>第三部分是注册验证手段到 Passport 里面。因为默认 <code>evergrow</code> 用的是帐号密码登录，所以这里的配置就是用的 <code>LocalStrategy</code>。不同的验证方式在 Passport 里面是通过注册不同的插件来实现的。这部分代码其实不难，大意就是通过哪些字段获取帐号和密码信息，然后如何根据这些信息判断是否有这样的用户，和提供的资料是否准确。如果你想换不同的登录验证方式，找另一个插件来配置一下就可以了。  </p>
<p>如何使用配置好的登录验证方式呢？其实就在登录的那个路由，文件 <code>/module/auth/auth-routes.js</code> 里。<code>AuthManager.localAuth()</code> 方法返回的中间件，就是我们配置的插件，会自动帮我们做登录验证。登录验证通过后，操作就会传递到 <code>AuthController.signin</code> 里做下一步操作了，比如根据用户类型跳转去不同的页面。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/signin'</span>,</div><div class="line">  summary: <span class="string">'Sign In'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthManager.localAuth(), AuthController.signin],</div><div class="line">  validators: &#123;</div><div class="line">    body: joi.object().keys(&#123;</div><div class="line">      loginId: joi.string().required(),</div><div class="line">      password: joi.string().required()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>登录验证配置部分到这里就完了，下面我们看看如何让系统知道每一次操作的人是谁，并知道他的身份和权限。  </p>
<h2 id="授权（Authorization）"><a href="#授权（Authorization）" class="headerlink" title="授权（Authorization）"></a>授权（Authorization）</h2><p>登录验证是为了确定你的身份，有机会进入系统的大门。授权是为了确定做的操作，都是被允许的，你有被赋予权限。系统需要知道你是普通用户，还是论坛坛主，又或者是整个系统的超级管理员。  </p>
<p><code>evergrow</code> 里通过 <code>/module/user/user-model.js</code> 的 <code>isAdmin</code> 标记来简单区分你是管理员还是普通用户。虽然简单，但是搞清楚原理后，再按照自己需求修改就可以使用 ACL 或者 RBAC 之类的模式。  </p>
<h3 id="如何控制权限"><a href="#如何控制权限" class="headerlink" title="如何控制权限"></a>如何控制权限</h3><p>最简单的权限控制，可以是根据登录的用户类型，在浏览器的页面里，禁止或者隐藏相应的按钮或者链接。因为现在很多页面都是通过 Ajax 来请求数据并动态渲染，所以不少人会简单在前端来实现这样的功能。但是，这样做是相当危险的。稍微有点开发知识的人，都能轻易显示你网页上隐藏的内容。  </p>
<p>那么，是否通过服务端渲染页面来隐藏就可以了呢？这也是不够的。如果你的请求路由和参数被猜到，但是没有限制特定的人群才能访问，比如修改用户资料的接口，那么一些黑客就能夺取你系统的超级用户权限。  </p>
<p>有兴趣的朋友可以看一看 <a href="https://arstechnica.com/business/2012/03/hacker-commandeers-github-to-prove-vuln-in-ruby/?comments=1" target="_blank" rel="external">Hacker commandeers GitHub to prove Rails vulnerability</a> 这篇文章。里面提到的「Mass assignment vulnerability」在 Ruby on Rails 和 Node.js 系统里面很常见。所以，在 <code>evergrow</code> 框架，每一个请求都用 <code>joi</code> 来限定能提交的参数名字和类型，并通过中间件来保护特定的接口。  </p>
<p>我们来看下面的代码：  </p>
<ul>
<li><code>AuthController.ensureAuthenticated</code> 这个中间件，就是帮我们确认用户是否已经登录。  </li>
<li><code>UserController.isAdmin</code> 确保操作的用户是管理员。  </li>
<li><code>UserController.isOwner</code> 确保链接传的 <code>id</code> 参数，是当前登录用户的 <code>id</code>。  </li>
</ul>
<p>所以，下面的配置意思就是：获取用户的接口只能是登录后的用户，并且是管理员才能调用。修改用户资料的接口，只允许指定的字段提交修改，像 <code>isAdmin</code> 这样的字段肯定不能提交。用户自己只能修改自己的信息。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  path: <span class="string">'/'</span>,</div><div class="line">  summary: <span class="string">'Gets all users'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthController.ensureAuthenticated, UserController.isAdmin, UserController.listUser],</div><div class="line">  validators: &#123;</div><div class="line">    query: joi.object().keys(&#123;</div><div class="line">      search: joi.string().allow(<span class="string">''</span>),</div><div class="line">      order: joi.string().valid(<span class="string">'desc'</span>, <span class="string">'asc'</span>).default(<span class="string">'asc'</span>),</div><div class="line">      limit: joi.number().integer().max(<span class="number">100</span>).default(<span class="number">10</span>),</div><div class="line">      offset: joi.number().integer()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/:id'</span>,</div><div class="line">  summary: <span class="string">'Updates user profile'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthController.ensureAuthenticated, UserController.isOwner, UserController.updateUser],</div><div class="line">  validators: &#123;</div><div class="line">    body: joi.object().keys(&#123;</div><div class="line">      loginId: joi.string().required(),</div><div class="line">      phone: joi.string().required(),</div><div class="line">      email: joi.string().email(),</div><div class="line">      password: joi.string(),</div><div class="line">      imageUrl: joi.string(),</div><div class="line">      confirmPassword: joi.string()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="evergrow-的设置"><a href="#evergrow-的设置" class="headerlink" title="evergrow 的设置"></a>evergrow 的设置</h2><p>为了方便测试，所以还没有加任何权限控制在前两章的 API 上，现在是时候了。假设我们的需求是：  </p>
<ol>
<li>任何人都能看到所有没有删除的，审批通过的图片。  </li>
<li>登录后，自己还可以看到审批中，或者自己删除了的图片，并可以重新上传图片。  </li>
<li>管理员可以做上面任何操作，并且可以通过，或者拒绝任何图片。  </li>
</ol>
<p>我先带大家在 evergrow 里实现前两点，第三点作为练习。  </p>
<h3 id="页面权限控制"><a href="#页面权限控制" class="headerlink" title="页面权限控制"></a>页面权限控制</h3><p>既然所有人都能看到图片，我们先在导航栏放一个链接打开图片列表页。打开 <code>/view/common/_nav.html</code>，可以看到有这么一小段代码：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">typeof</span>(<span class="attr">currentUser</span>) !== <span class="string">'undefined'</span> &amp;&amp; <span class="attr">currentUser</span> &amp;&amp; <span class="attr">currentUser.isAdmin</span>) &#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/page/list"</span>&gt;</span>User Management<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>这里有两个链接：  </p>
<ul>
<li><code>/</code> Home 页面在最左边。谁都可以访问</li>
<li><code>/user/page/list</code> 是用户管理页面，但是只有管理员（有 <code>isAdmin</code> 标记的用户）才能访问</li>
</ul>
<p>这里比较特别的地方就是 <code>&lt;% ... %&gt;</code> 里面包含的代码。首先，如视图那章所说，它是被模板引擎执行的代码。然后这里访问的 <code>currentUser</code> 是什么呢？它就是当前登录的用户。如果你的页面路由调用了 <code>AuthController.ensureAuthenticated</code> 或者 <code>AuthController.setUserToResources</code> 中间件，在页面模板里面就能访问这个变量。  </p>
<p>所以，这段代码的意思就是，只有当浏览页面的用户是管理员的话，才能把 User Manangement 的链接代码包含到页面里。用 Chrome 打开页面，按 F12（Windows 里）或者 Option+Command+I（Mac 里）调出开发者工具，使用元素选择工具点击 Home 链接，就能看到效果如下图。这就是后端渲染和权限控制的好处之一。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-server-rendering.png" alt="Server Rendering"></p>
<p>所以，如果你要加谁都可以访问的图片列表页，只要把下面一段代码加到它们中间好了。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/image/page/list"</span>&gt;</span>Image List<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-image-list-stage-1.png" alt="Image List - Stage 1"></p>
<p>不过由于我们的页面没有任何控制，所以 <code>Create</code> 按钮和列表里面的 <code>Action</code> 操作栏都存在，所以我们要改进一下。同上面的原理一样，我们可以在 <code>/view/image/imageList.html</code> 做一点小改动：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Image List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-12"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">typeof</span>(<span class="attr">currentUser</span>) !== <span class="string">'undefined'</span> &amp;&amp; <span class="attr">currentUser</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">v-on:click</span>=<span class="string">"createImage"</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">// 省略</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> isLogin = <span class="literal">false</span></div><div class="line"><span class="keyword">var</span> userId = <span class="literal">null</span></div><div class="line"></div><div class="line">&lt;% <span class="keyword">if</span> (<span class="keyword">typeof</span>(currentUser) !== <span class="string">'undefined'</span> &amp;&amp; currentUser) &#123; %&gt;</div><div class="line">  isLogin = <span class="literal">true</span></div><div class="line">  userId = <span class="string">'&lt;%= currentUser._id %&gt;'</span></div><div class="line">&lt;% &#125; %&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">  <span class="attr">block</span>('<span class="attr">moduleScript</span>')<span class="attr">.append</span>(</div><div class="line">    <span class="attr">Loader</span>('/<span class="attr">public</span>/<span class="attr">build</span>/<span class="attr">imageList.min.js</span>')</div><div class="line">      <span class="attr">.js</span>('/<span class="attr">public</span>/<span class="attr">js</span>/<span class="attr">common</span>/<span class="attr">common.js</span>')</div><div class="line">      <span class="attr">.js</span>('/<span class="attr">public</span>/<span class="attr">js</span>/<span class="attr">image</span>/<span class="attr">imageList.js</span>')</div><div class="line">      <span class="attr">.done</span>(<span class="attr">assets</span>, <span class="attr">config.site_static_host</span>)</div><div class="line">  )</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<p>这里有一点点不同的就是，多了一个 <code>&lt;script&gt;</code> 标记。里面定义了一个 <code>isLogin</code>，<code>userId</code> 变量，然后根据用户是否登录来设置它的值，最后在 <code>/public/js/image/imageList.js</code> 里根据它们来决定是否把最后一列放到 <code>columns</code> 数组里面。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 省略</span></div><div class="line"></div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'deleted'</span>,</div><div class="line">  title: <span class="string">'Deleted?'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value === <span class="literal">true</span> ? <span class="string">'Deleted'</span> : <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;]</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isLogin) &#123;</div><div class="line">  columns.push(&#123;</div><div class="line">    field: <span class="string">''</span>,</div><div class="line">    title: <span class="string">''</span>,</div><div class="line">    width: <span class="number">60</span>,</div><div class="line">    align: <span class="string">'center'</span>,</div><div class="line">    halign: <span class="string">'center'</span>,</div><div class="line">    events: &#123;</div><div class="line">      <span class="string">'click .edit'</span>: (e, value, row, index, activeBtn) =&gt; &#123;</div><div class="line">        $(<span class="string">'#imageId'</span>).val(row._id)</div><div class="line">        $(<span class="string">'#imageUrl'</span>).val(row.url)</div><div class="line">        $(<span class="string">'#gender'</span>).val(row.gender)</div><div class="line">        $(<span class="string">'#deleted'</span>).prop(<span class="string">'checked'</span>, row.deleted)</div><div class="line">        $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (row.createdUserId !== userId) &#123; <span class="comment">// 如果图片不是当前用户创建的，不能修改</span></div><div class="line">        <span class="keyword">return</span> <span class="string">''</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="string">`&lt;div class="btn-group dropdown"&gt;</span></div><div class="line">        &lt;button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;</div><div class="line">          Action &lt;span class="caret"&gt;&lt;/span&gt;</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;ul class="dropdown-menu"&gt;</div><div class="line">          &lt;li class="edit"&gt;&lt;a href="#"&gt;Edit&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;`</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="comment">// 省略</span></div></pre></td></tr></table></figure>
<p>好了，页面处理完了，剩下就是控制后台如何区分登录还是没有登录，最后决定列出不同的图片给用户。  </p>
<h3 id="后端权限控制"><a href="#后端权限控制" class="headerlink" title="后端权限控制"></a>后端权限控制</h3><p>我们找到图片列表对应的 Controller，把查询的逻辑修改如下就可以了。<code>req.user</code> 就是获取登录用户的方式。如果没有这个信息，操作的就是没有登录的用户。  </p>
<p>查询数据库的时候，一般只要把 Model 里面的字段，和对应你想过滤的值，设到 params 里面就可以了，像没登录那种情况一下。  </p>
<p>不过这里还有一些特殊的符号，如 <code>$or</code>, <code>$ne</code>。它们是 MongoDB 的操作符，对应的意思是<code>或者</code>，<code>不等于</code>（not equal），详情可参考 MongoDB API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listImage</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  req.query.sort = <span class="string">'updatedAt'</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> params = parseRequestParams(req)</div><div class="line">  <span class="keyword">var</span> user = req.user</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!user) &#123;</div><div class="line">    <span class="comment">// 没登录</span></div><div class="line">    params.deleted = <span class="literal">false</span></div><div class="line">    params.status = IMAGE_CONSTANTS.STATUS_APPROVED</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAdmin) &#123;</div><div class="line">    <span class="comment">// 登录，普通用户</span></div><div class="line">    <span class="keyword">var</span> userId = user._id.toString()</div><div class="line"></div><div class="line">    params.$or = [&#123;</div><div class="line">        createdUserId: userId</div><div class="line">      &#125;, &#123;</div><div class="line">        createdUserId: &#123;$ne: userId&#125;,</div><div class="line">        deleted: <span class="literal">false</span>,</div><div class="line">        status: IMAGE_CONSTANTS.STATUS_APPROVED</div><div class="line">      &#125;]</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 管理员什么特殊处理也不需要</span></div><div class="line"></div><div class="line">  ImageManager.list(params)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">entities</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> res.json(parseResultForTable(entities))</div><div class="line">    &#125;)</div><div class="line">    .catch(next)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的页面效果如下图：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-image-list-stage-2.png" alt="Image List - Stage 2"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul>
<li>只有打开自己创建的图片，才能有修改的权限。（参考用户资料修改页面相关代码：<code>loadUserPage</code>, <code>/view/user/userProfile.html</code>, <code>/public/js/user/userProfile.js</code>）</li>
<li>管理员可以浏览，删除，修改，通过，或者拒绝任何图片。  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;帐号登录验证和权限设置，可以说是任何一个系统都必须具备的基本功能。无论是电商，社交，还是企业系统，甚至连输入法等工具，都可以让你注册一个帐号。方式从最传统的帐号密码登录，到用社交帐号绑定不等。  &lt;/p&gt;
&lt;h2 id=&quot;登录验证（Authentication）&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Access Control" scheme="http://www.thinkingincrowd.me/tags/Access-Control/"/>
    
  </entry>
  
</feed>
