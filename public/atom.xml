<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking in Crowd / 鹄思乱想</title>
  <icon>https://www.gravatar.com/avatar/153cbdd8bc3e96a5208e80ecef4159a4</icon>
  <subtitle>Swan flying in the immense sky</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2020-02-16T14:46:44.218Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name>鹄思乱想</name>
    <email>chengusky@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一文读懂 AWS IAM</title>
    <link href="http://www.thinkingincrowd.me/2020/02/16/aws-iam/"/>
    <id>http://www.thinkingincrowd.me/2020/02/16/aws-iam/</id>
    <published>2020-02-16T14:46:27.000Z</published>
    <updated>2020-02-16T14:46:44.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>IAM 是 AWS 云平台中负责身份认证，和权限控制的服务。AWS 云虽然分了很多个区（Region），但 IAM 是 Global，全局的。<br>所以，它的数据和配置的更改，也是 Eventually Consistent 的。</p><h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><p>在讲 IAM 的权限控制是怎么工作之前，先强调两个最重要的安全理念。</p><p><strong>Grant Least Privilege</strong></p><p>在 AWS 里面，每一个用户默认都是没有任何权限的。他甚至不能查看自己的密码或 access key，丢失了也只能重新生成。</p><p><strong>Lock Away Your AWS Account Root User</strong></p><p>AWS 账户开通的时候，你的登录邮箱和密码，就成为了这个账户下的超级管理员，它默认是什么都可以干的。<br>所以，和在 Linux 下不要滥用 root 一样，不要用这个超级帐号做日常操作，而是创建一个有 Full Administrator 权限的用户。</p><h2 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works?"></a>How It Works?</h2><p>权限控制有两个基本概念：</p><ol><li><strong>Authentication</strong> - 确认是否为有效用户，是否允许登录/接入</li><li><strong>Authorization</strong> - 确认用户当前请求的操作（读写资源），是否合法</li></ol><p>所以，IAM 最重要就是管理 Identity，和控制 Resource 的操作。</p><h3 id="Identity-Principal"><a href="#Identity-Principal" class="headerlink" title="Identity/Principal"></a>Identity/Principal</h3><p>从资源访问的角度来看，使用 AWS 资源的其实不单单是具体的人，还可能是 Application。所以，AWS 里面的身份，分几种：</p><ul><li>User</li><li>Application</li><li>Federated User</li><li>Role</li></ul><p>能在 AWS IAM 控制台里创建的，只有 User 和 Role。而 User 在创建的时候，可以指定它的访问类型。是凭借用户名密码在 Console 登录，还是使用 Access Key ID 及 Secret 通过 API 来访问，还是两者皆可。</p><p>要特别注意的是，User 是直接操作 AWS 资源的用户，而不是你自己开发并部署在 AWS 的系统里面的用户。IAM 的 User 是有数量限制的，最多 5000 个。</p><p>如果你开发的系统需要操作 AWS 资源，比如说上传文件到 S3，那你需要用的是 Federated User。通过 OpenID Connect（如 Google/Facebook）或者 SAML 2.0（如 Microsoft AD），你的系统用户可以在登录后换取代表某个 AWS Role 的临时 token 来访问 AWS 资源。</p><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>访问和使用 AWS 资源有两种方式，一种是通过页面登录，也就是 Console。一种是通过 AWS API，也就是接口，包括 CLI, SDK 或 HTTPS 请求。</p><p>IAM User 在 Console 页面登录需要提供 AWS 帐号名，IAM User 名和密码。AWS 帐号名是 AWS 云服务开通时，系统生成的一串数字，或者是你赋予的别名。它其实就是一个多租户系统里面的租户帐号。<br> AWS 还会为每个帐号提供一个独特的登录链接，比如我的测试帐号： <a href="https://kcawsfree.signin.aws.amazon.com/console" target="_blank" rel="noopener">https://kcawsfree.signin.aws.amazon.com/console</a> 。<code>kcawsfree</code> 就是我帐号的别名。</p><p>而如果是使用 API 访问 AWS，我们是需要用 IAM User 的 Access Key ID 及 Secret 来为这个 HTTP 请求生成签名的。为请求签名，是大多数的 API 集成的一种安全性考量。微信，支付宝等平台都这么做。为什么呢？  </p><ol><li>确认请求发起方是合法的，就是确保你就是你。</li><li>保护数据传输过程的安全，就是确保数据没被篡改。</li><li>防止重放攻击，就是确保一个请求不被多次使用，滥用或者冒用。</li></ol><p>签名需要根据什么信息生成呢？可以说是包含了请求唯一性的所有信息：  </p><p>请求的接口版本号<br>请求的操作是什么（Action）<br>请求的日期<br>所有请求的参数等</p><p>AWS 的请求样例：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://iam.amazonaws.com/?Action=AddUserToGroup</span><br><span class="line">&amp;GroupName=Managers</span><br><span class="line">&amp;UserName=Bob</span><br><span class="line">&amp;Version=2010-05-08</span><br><span class="line">&amp;AUTHPARAMS</span><br></pre></td></tr></table></figure><p>其实，如果你是使用 AWS SDK 或者 CLI，它会根据你配置的 Access Key 自动签名。只有当你自己发起一个 HTTP 请求的时候，才需要自己实现签名的逻辑。</p><h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><p>所谓是否有足够的权限，就是验证以下三者在一个请求的场景下，是否被允许：</p><ol><li>主体（Identity）</li><li>操作（Action）</li><li>资源（Resource）</li></ol><p>AWS 是通过策略（Policy）来定义权限（Permissions）的。最基本的策略有两大类。一种是 Identity-based policy，另一种是 Resource-based policy。前一种挂在 User/Role/Group 上面，用以定义这些被挂载的主体，能对什么资源进行怎样的操作。而后一种直接挂载在 AWS 资源上面，用以定义哪些主体可以对这个资源做什么样的操作。</p><p>AWS Policy 的 Permissions 定义，在内部是通过一个 JSON 格式来表示的。我们来看一个样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">"ListAndDescribe"</span>,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Action"</span>: [</span><br><span class="line">        <span class="string">"dynamodb:List*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Describe*"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">"SpecificTable"</span>,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Action"</span>: [</span><br><span class="line">        <span class="string">"dynamodb:BatchGet*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Get*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Query"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Scan"</span>,</span><br><span class="line">        <span class="string">"dynamodb:BatchWrite*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Delete*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:Update*"</span>,</span><br><span class="line">        <span class="string">"dynamodb:PutItem"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"arn:aws:dynamodb:*:*:table/MyTable"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">"AllowAllActionsForEC2"</span>,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"ec2:*"</span>,</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">"DenyStopAndTerminateWhenMFAIsNotPresent"</span>,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Deny"</span>,</span><br><span class="line">      <span class="attr">"Action"</span>: [</span><br><span class="line">        <span class="string">"ec2:StopInstances"</span>,</span><br><span class="line">        <span class="string">"ec2:TerminateInstances"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"*"</span>,</span><br><span class="line">      <span class="attr">"Condition"</span>: &#123;</span><br><span class="line">        <span class="attr">"BoolIfExists"</span>: &#123;</span><br><span class="line">          <span class="attr">"aws:MultiFactorAuthPresent"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个策略控制了 DynamoDB 和 EC2 的访问权限。它看起来很复杂，但其实结构很清晰。这里面最主要的元素就是 <code>Effect</code>, <code>Action</code>, 和 <code>Resource</code>。它们确定了什么资源上的哪些操作，是被允许，还是禁止的。它们是 AND 的逻辑组合。</p><p>Statement 里前两个 Permission，允许用户获取 DynamoDB 里面的资源信息，但是只有 MyTable 这个表能做写操作。而后两部分允许用户对 EC2 做任何操作，但是停止和结束 Instance 则必须通过了 MFA 登录认证后才可以。</p><h3 id="Policy-Evaluation-Logic"><a href="#Policy-Evaluation-Logic" class="headerlink" title="Policy Evaluation Logic"></a>Policy Evaluation Logic</h3><p>一个用户或者角色主体上，可以拥有多个不同的 Policy。所以，Policy 的权限验证逻辑，可谓相当复杂。<br>在讲验证流程前，我再重复一次 AWS 权限的设计原则，这对流程的理解很重要。</p><ul><li>如果<strong>有显式的 Deny，就禁止</strong>。  </li><li><strong>Grant Least Privilege</strong> 原则。如果没有显式赋予权限，也就是没有任何 Policy 为请求的资源和操作定义了 <code>Allow</code> 权限，那这个主体就没有权限（Implicit Deny）。  </li></ul><p>AWS 对收到的操作请求，会根据以下的流程来判断这个请求的主体是否有操作权限：</p><ol><li>Deny evaluation</li><li>AWS Organizations service control policies (SCP)</li><li>Resource-based policies</li><li>IAM permissions boundaries</li><li>Session policies</li><li>Identity-based policies</li></ol><p>第一步，首先把 2 至 6 里面的所有 policy 的显式 Deny 拿出来。如果当前的请求属于 Deny 的范围，直接禁止操作。这个就是第一个原则。</p><p>第二步到第六步，是具体的 policy。如果该主体有这个类型的 policy 存在，就按照第二个原则处理。如果没有，跳到下一个 policy 类别的检查。</p><p>那么多种的 Policy 类别，为什么是这个排列顺序呢？我是这么理解的：</p><ol><li>Organization SCP 作为组织级别策略，优先级最高。</li><li>Resource-based policy 可以跨帐号赋予权限，级别比后面的高一些。</li><li>Permission Boundary 的作用是提前为用户定义一个最大的权限范围，避免意外打开了权限的情况，所以比后面的级别要高。</li><li>Session policies 是会话级别，允许临时赋予权限，所以比 Identity-based policies 高。</li><li>Identity-based policies 是最稳定的，所以检查放在最后。</li></ol><p>不过，这里有一个特例，就是 Resource-based policy。如果它是 Implicit Deny 的情况，还是会继续后面的检查，不会阻止。<br>还有一个复杂的情况是关于 Session policy 的，这个就不在本文解释了，具体可看<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session" title="Session Policy" target="_blank" rel="noopener">文档</a>。</p><p>其实，即便逻辑复杂，判断是否有权限还是可以简单地总结为一句话：  </p><p><strong>只有具备显式的 Allow，并且没有显式的 Deny，才有权限。</strong></p><p>或者</p><p><strong>如果没有显式的 Allow，或者有显式的 Deny，就没有权限。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h2&gt;&lt;p&gt;IAM 是 AWS 云平台中负责身份认证，和权限控制的服务。AWS 云虽然分了很多个区（Region
      
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="AWS" scheme="http://www.thinkingincrowd.me/tags/AWS/"/>
    
      <category term="IAM" scheme="http://www.thinkingincrowd.me/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>上了云，远程工作就没问题了吗？</title>
    <link href="http://www.thinkingincrowd.me/2020/02/09/Can-remote-working-be-smooth-after-moving-all-to-cloud/"/>
    <id>http://www.thinkingincrowd.me/2020/02/09/Can-remote-working-be-smooth-after-moving-all-to-cloud/</id>
    <published>2020-02-09T02:00:00.000Z</published>
    <updated>2020-02-16T14:46:14.504Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前，我就期望能尝试下远程工作。一种崇尚已久的，更高效，更自由的方式。没想到，这个愿望，在 2020 年开初就因一个从没想到的悲剧而“实现”了。</p><p>这个全民悲剧就不多说了。能看懂 “<strong>能。明白</strong>” 这几个字的，就能体会我的心情。</p><p>最近很多技术公众号都发表了关于远程工作的文章，包含了工具的推荐，和要注意的事项，包括文档协作、视频会议、任务管理、工作协同等。</p><p>其实，我觉得现在欠缺的不是工具。不然，为什么网上还有不少人爆出公司执行远程工作同时，推出了一些幺蛾子政策：全程打开视频摄像头、10分钟内必须回复、每天发日报、估算效率等。</p><p>这些政策的出现，除了所谓的信任问题外，总的来说还是老板担心远程工作会影响效率。</p><p>效率的提高，需要从软硬两方面下手。</p><p>硬件方面，上了云，就减少了 VPN，Remote Desktop 的使用，降低网络卡壳的影响。公众号里介绍的协同工具，其实也算是在硬件方面提供助力为主。</p><p>但是，不是说上了云，什么都在线，效率就上来了。正如武林高手草木皆可为剑，摘叶即可伤人。<strong>工具虽然重要，但主要还是看怎么使用这些工具</strong>。</p><p>决定效率最关键的，还是软的方面，也就是沟通。</p><p>我说的沟通不是单纯地指用了什么通讯工具（邮件还是即时聊天），而是如何协作，如何使用那些协同工具。这些工具的目的就是提升沟通的效率。<strong>软件工程领域，沟通和协作是很多方面的。既有人和人的沟通，更多的是人和机器，系统的沟通</strong>。</p><p>如果有 Code Review，需要喊一嗓子，还是能自动发代码审查请求到模块负责人或者指定人员？</p><p>有多少比例的自动化测试，还是全人工测试？</p><p>通过看板来了解各方进度和项目障碍，还是靠写工作报告，发邮件？</p><p>持续集成环境是否会出问题？开发是否需要跨团队找人解决？</p><p>服务器和网络设置能像 AWS 的 CloudFormation 那样一键部署，还是需要人手几天的配置？</p><p>开发人员需要新服务器或数据库资源，网络接入，环境对接，需要层层审批获取权限，还是能自动化？即便同样使用的都是 AWS。如果使用传统的 RBAC，每为一个新资源赋权都要去改 Role。而使用 ABAC，则能更方便灵活地做权限管理。</p><p>工具用不好就算了。最可笑的是，可能云平台或工具本身已具备灵活的资源申请，权限控制和管理的能力，却被企业以安全的名义（Least Privilege 原则），实则不信任，强加上一些人手的，半自动化的审批流程，或者限制了一些功能。如果用的是被阉割的云平台，则让人啼笑皆非。</p><p>我认为，即便一家软件公司不是完全远程工作的模式，还需要面对面交流，也应该时不时尝试远程工作，来衡量组织内部的协作模式是否高效。</p><p><strong>远程工作应该是一个目标。它是衡量一家软件公司运作是否高效的一个指标</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久以前，我就期望能尝试下远程工作。一种崇尚已久的，更高效，更自由的方式。没想到，这个愿望，在 2020 年开初就因一个从没想到的悲剧而“实现”了。&lt;/p&gt;
&lt;p&gt;这个全民悲剧就不多说了。能看懂 “&lt;strong&gt;能。明白&lt;/strong&gt;” 这几个字的，就能体会我的心情。
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Productivity" scheme="http://www.thinkingincrowd.me/tags/Productivity/"/>
    
  </entry>
  
  <entry>
    <title>没想到看书也需要勇气</title>
    <link href="http://www.thinkingincrowd.me/2019/11/30/never-thought-one-book-takes-courage-to-read/"/>
    <id>http://www.thinkingincrowd.me/2019/11/30/never-thought-one-book-takes-courage-to-read/</id>
    <published>2019-11-30T10:11:39.000Z</published>
    <updated>2019-11-30T10:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>听到”勇气“这个词，你想到的是什么？</p><p>挺身而出的见义勇为者？不畏强权的斗士？还是奋不顾身的创业者？</p><p>你是否觉得勇气都需要在光辉的领域，在这些“大”事才能呈现？只有这样才足以被称为有勇气之人？</p><p>其实不是的。</p><p>对于严重抑郁症患者，能坚持活着，就需要很大的勇气；减肥人士，能毅然拒绝手边的零食炸鸡，也需要勇气。</p><p><strong>我们做的每一个选择，都取决于当时内在的勇气充足与否。</strong></p><p>我在国庆期间第一次读完《被讨厌的勇气》这本书时，忍不住在朋友圈感叹：</p><blockquote><p>被阿德勒种草。这是一本所有人都应该看的书，比任何道德教育更有价值的书。应该从初中起就被列为必读书籍。</p></blockquote><p>年少之时，我讨厌语文，基本没看过任何文学作品，即便是男生标配的武侠小说。除了学习教材或专业类书籍，我会拿来看的“书”，恐怕只剩下漫画了。看完《被讨厌的勇气后》，我忍不住感慨，如果以前能看到这本书，该多好。然而，这么一想，已经有违阿德勒的观点了。</p><p>虽然前面盛赞这本书，但我觉得并不是所有人都能马上接受阿德勒的观点。​你体会一下书中的这两个观点：</p><ol><li>心理创伤并不存在  </li><li><strong>你的不幸，皆是自己“选择”的</strong>  </li></ol><p>很残酷是不是？本来你看心理学书籍就是为了抚慰心灵，现在的你可能已经够伤心困惑的了，但是却还要被正面捅上一刀：“这是你自找的”。</p><p>最开始读这本书时，你可能会有种“没什么事情做不了，只是你自己没有勇气去做而已。”的近乎居高临下，站着说话不腰疼的感觉。书中那个和“禅师”辩论的“青年”，在最开始的辩论过程中，就被经常气得浑身发抖，但又哑口无言。能坚持把书看下来，真的需要点勇气。</p><p>即便我认为，心理创伤还是存在的，像经历残酷战役的军人，或者被暴力虐待过的人患上的 PTSD。而且，我们也不是说想变主动，变勤快，变温和，只要心想，马上就能改变的。但是，书中“禅师”和“青年”的对话，的确能为你提供新的思路和角度，有种豁然开朗的感觉。</p><p><strong>阿德勒心理学主张的是自我决定理论，目的论</strong>。他并不赞同精神分析学派的方式。因为关注过去，挖掘深层原因来解释事物很容易会陷入“决定论”的思维方式。最近流行的“原生家庭”说法，就是被很多人找来的当借口，把自己“无法改变”的责任，推给他人。</p><p>书中给我感触最大的两句话是：  </p><blockquote><p><strong>决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。</strong></p><p><strong>重要的不是被给予了什么，而是如何去利用被给予的东西。</strong></p></blockquote><p>儿时课本中的张海迪，澳大利亚那位天生没有四肢的尼克·胡哲（Nick Vujicic），杭州保姆纵火案的“老婆孩子在天堂”，汶川地震的幸存者，他们经历了别人难以置信的缺失和悲痛，却还能为这些经历赋予了与众不同的意义，继续前行，甚至活出更精彩的人生。</p><p>老实说，换作是我遇到上述的困难，真的未必能克服。不过，只要知道自己还是能有掌控的能力，未来就不缺希望。看过这本书，能为自己充实点勇气，积蓄点动力，为生活带来一丝转变，其实已经值得。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;听到”勇气“这个词，你想到的是什么？&lt;/p&gt;
&lt;p&gt;挺身而出的见义勇为者？不畏强权的斗士？还是奋不顾身的创业者？&lt;/p&gt;
&lt;p&gt;你是否觉得勇气都需要在光辉的领域，在这些“大”事才能呈现？只有这样才足以被称为有勇气之人？&lt;/p&gt;
&lt;p&gt;其实不是的。&lt;/p&gt;
&lt;p&gt;对于严重抑郁
      
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Courage" scheme="http://www.thinkingincrowd.me/tags/Courage/"/>
    
  </entry>
  
  <entry>
    <title>我是如何从一个“愤青”变成“亲中”的？</title>
    <link href="http://www.thinkingincrowd.me/2019/10/12/how-I-change-from-angry-youth-to-be-patriot/"/>
    <id>http://www.thinkingincrowd.me/2019/10/12/how-I-change-from-angry-youth-to-be-patriot/</id>
    <published>2019-10-12T00:47:43.000Z</published>
    <updated>2019-10-12T00:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/kenspirit/blog-cdn-data/blob/master/truth-over-fact.JPG?raw=true" alt="truth-over-fact">  </p><p>自从香港发生一些示威事件后，我的心情一直无法平复。作为一个会讲标准粤语的广东人，一个大半职业生涯在港资企业，在港工作过一年时间，一个有着好几个香港朋友的人来说，心情真的很不好受。</p><p>很早就想写些什么，但迟迟没有下笔。心情杂乱是一方面，主要原因则是目前这个乱局，谁是谁非，要抓住最开始那个源头，太难了。所以，无论我怎么写，写什么，可能都会招来持对立观点的人一顿攻击。以前流传的一句名言：<strong>“我不同意你的观点，但是我誓死捍卫你说话的权利”</strong>，现在还有多少人能做得到。</p><p>不过，不吐不快。即便可能因此损失一些朋友，但或许对你我也是好事。</p><h3 id="为什么我变了？"><a href="#为什么我变了？" class="headerlink" title="为什么我变了？"></a>为什么我变了？</h3><p>我以前也认为中国的自由民主是不足够的（即便现在还是不足够），特别是言论上，而且还有很多政府不作为行为。所以，我在大学时候，很倾向于出国，希望去到一个更自由的地方。国内有些什么贪腐案件，政府做的不好的地方，我会特别留意并把它拿来当支持自己观点的证据，证明我的想法是对的。</p><p>那为什么我现在变成“亲中”了呢？首先，“亲中”不代表我认为中国什么问题都没有。我依然看到政府还有做的不好的方面。“亲中”只是代表我认同自己是中国人，并且有义务使之变得更好，为了我的后代。</p><p>整个转变，主要是因为我看到了一个现实：“<strong>任何国家政权，都天然维护自己的国家利益，甚至不惜牺牲其它国家民族的利益。一个国家内的媒体机构，绝大多数都是为了国家政权而服务的。</strong>”</p><p>我已经不怎么相信以前崇拜的那些灯塔国，美国等西方国家，会真正为了理想的自由民主，为全世界人民谋福利。很多时候他们的政治宣言，行动等，都只是为了自己的政治生涯和国家利益而已。</p><p>连我一直笃信 “Don’t be evil” 的 Google，其实也会根据很多说不明的利益，更改搜索结果。这个 Motto 后来也被悄悄改成 “Do the right thing” 了。最近在 Facebook 有一个亚裔员工，帮跳楼的中国留学生公开发言，被开除了。</p><p>我不是说中国什么都好，只是不盲目相信国外只有美好。</p><p>帮我打破幻想的，主要是我越来越多地看到，一些西方媒体的报道是如何歪曲事实，来论述它们口中的真相。媒体的观点，取材，绝大多数都是以想让你看到什么，想让你有什么结论的前提来构建的。那是它们口中的真相，其实并不是事实。而所谓的“真相”，往往取决于人的角度和观点。</p><p>下面是一些例子：</p><p><a href="https://weibo.com/1401527553/I3PBNlNkn" target="_blank" rel="noopener">扭曲原话</a><br><a href="https://weibo.com/1401527553/I1n3Of3IU" target="_blank" rel="noopener">选择“真相”而不是“事实”</a><br><a href="https://weibo.com/1401527553/HETZoFBJs" target="_blank" rel="noopener">故事的两面，只看你选择什么来报道</a><br><a href="https://weibo.com/1401527553/I98cf3ARZ" target="_blank" rel="noopener">看似真话，实际误导</a>  </p><p>如果你认为我也是选择符合我观点的证据来服务我的观点，那就对了。我不否认这种可能性。只是，你是不是也想想，自己也是有可能倾向于相信你本来就认定的观点？</p><p>George Orwell 说过:  </p><blockquote><p>“The people will believe what the media tells them they believe”。</p></blockquote><p>人总是相信自己愿意相信的一些观点。所以，两大观点对立的媒体，很容易让你倾向于选择那些和你原来的观点一致的报道，而忽略了另一方即便是事实的报道。</p><h3 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h3><p>这种情况下，我们还能相信什么呢？这时候，我<strong>能坚守的，只能是自己认定的最基本的一些世界观和原则</strong>：</p><ol><li>我不同意你的观点，但是我捍卫你说话的权利。  </li><li>暴力，和伤害他人的正当权益是不可接受的，尤其是不能用一些“伟大”的理由或借口。</li></ol><p>所以，如果你要问我对这次香港示威的基本态度是什么？就是不认同所有的暴力行为。</p><p>即便你有很崇高的理由，也不能使用暴力和伤害他人的正当权益。值得别人尊重的，只有如他们这样：</p><p><a href="https://weibo.com/1401527553/Ia4dJg7xV" target="_blank" rel="noopener">在弗格森枪击案引发的骚乱之后，奥巴马曾公开表示</a></p><p><a href="https://weibo.com/1750070171/IavWJ5x8m" target="_blank" rel="noopener">被英国警方逮捕的极端环保者</a></p><h3 id="为什么示威发展成这样？"><a href="#为什么示威发展成这样？" class="headerlink" title="为什么示威发展成这样？"></a>为什么示威发展成这样？</h3><p>现在，示威的一方，认为是政府警察的错；政府认为是对方的错。现在双方就像争吵红了眼的夫妻双方，不断升级各自的手段，维持各自的情绪和态度，生怕一退缩下来，就输了。这种对称式的升级，只有当一方能突然退出这个循环，或者压倒性的暴力，才可能有打破的机会。但是，无论怎么样，我都不希望是大暴力收场，两败俱伤。</p><p>按示威者所言，他们也是不崇尚暴力，希望和平示威的。那为什么他们要蒙面？为什么他们不制止在游行中实施暴力，打杂破坏的人员？在一些视频里面，一些香港年轻人甚至说，他们使用暴力，进行经济和其它破坏，正是他们的目的。他们说就是要打倒了才能重建。</p><p>我觉得，现在的示威群体，已经专横和偏执化了。任何一点理性的反对意见，已经没法被听进去。</p><p>下面是在《乌合之众》这本出名的大众心理学书里面，关于群体方面的描述。所以，如果在示威群体中提出反驳意见，可能已经被排挤出去了。</p><blockquote><p>群体只知道简单而极端的感情；提供给他们的各种意见、想法和信念，他们或全盘接受，或者一概拒绝，将其视为绝对的真理或绝对谬误。<br>…<br>个人可以接受矛盾，进行讨论，群体是绝对不会这样做的。在公众集会上，演说者哪怕做出最轻微的反驳，立刻就会招来怒吼和粗野的叫骂。<br>…<br>专横和偏执是一切类型的群体的共性</p></blockquote><p>有不少示威人士都认定，那些暴力人士，是警察的奸细。可见，本来属于正义的警察，已经被认定为暴力和群众的对立面。在没有了信任的基础上，可以说你做什么都是错的。他们为什么不会认为，那些就像是港产片里面的卧底，目的只是为了抓获混入和平示威人士的暴力份子呢？只能说，他们已经完全不信任警察了。  </p><p>如果说那些带面罩的暴力人士是非和平示威人士，甚至是警察奸细，而你是和平示威人士。那与之区分的最好的途径，不是脱掉面具吗？甚至在政府颁布反蒙面法后，为什么还公然反抗法律？不蒙面，本来就是和平示威的要求，为什么他们反而不采纳？这也只能说明，他们已经完全不信任政府了。而且，蒙面本身，已经成为了示威这个群体的特征，质疑和反对这个特征，相当于质疑和反对示威的诉求，是不可接受的。</p><h3 id="怎么破？"><a href="#怎么破？" class="headerlink" title="怎么破？"></a>怎么破？</h3><p>最近在看的《Change: Principles of Problem Formulation and Problem Resolution》里面说到，<strong>一些看起来合理的处理问题的手段，其实只是起了短暂解决问题的作用，但是却反而长期维持了问题的存在</strong>。越是坚持采用相似的手段，问题就越难解决。</p><p>现在示威人士和政府双方，感觉都陷入了各自认为对的解决问题的方式上，却反而维持了问题，甚至在恶化。</p><p>在这种情况下，要产生真正的改变，企图追究最开始问题形成的原因来解决问题其实已经没有用了，而是需要观察现在用来解决问题的手段。要判断是否需要从另一个角度或维度上改变当前的手段。正如，如果你一开始失眠，可能只是因为恰巧睡前吃喝了什么，或者近期有什么突发事情。但是，如果你已经持续失眠了几个月，那可能就要观察你一直以来是如何尝试解决失眠的，用了什么方法。因为一开始失眠的原因，已经不再是导致现在持续失眠的原因了。而可能是现在尝试解决失眠的手段，反而维持了失眠的现象。</p><p>所以，如果从改变当前解决失眠的手段入手，比如停止所有尝试入睡的努力，平静的和自己说，既然睡不着了，那就干脆不睡了，做自己想做的事情吧。这样做，其实反而可能可以减轻了自己给自己带来的压力，让你忍不住就产生了睡意，然后睡着了。</p><p><strong>想解决一些顽固的问题，有时可能需要用一种看起来反直觉的，荒谬的手段来解决</strong>。</p><p>假如，政府突然宣布，鉴于大多数人都认同示威行为，并且他们都自认为是和平的示威人士，所以政府不会再派出任何警力去示威地点企图维持秩序，将交由他们自己组织管理。只要不带面罩，就是和平示威。如果真的还有暴力份子存在，请他们注意安全，和暴力份子保持距离。警察如果接到报警，才会出发处理。如果示威群众真的认为有能力阻止暴力的发生，才去制止他们，或者在远处拍照，录像再转交给警方。</p><p>这里创造的悖论就是说：既然你们原来不信任政府和警察，并认为政府干预了正常的示威，那政府就先承认大多数都是和平示威人士，让你们自己内部和少数的暴力份子疏远。把道德高点和责任还给示威人士，让他们自己考虑所有可能面对的情况，并判断什么应对手段是和自己的身份或观点违背的。</p><p>政府还可以让示威人士选出一两个代表，全球直播和政府对话。因为只有一两个人，就没有了群体的疯狂；而且通过全球直播，直接咨询示威代表如何解决那些暴力，侵犯他人权益的行为，解决冲突，把一部分外部矛盾转化为内部。</p><h3 id="未来会如何？"><a href="#未来会如何？" class="headerlink" title="未来会如何？"></a>未来会如何？</h3><p>我其实一直觉得，香港作为一个在中国内具备特殊地位，更多自由度的地区，它的一个伟大的使命是充分发挥它的影响力，软实力，慢慢辐射广东，华南，甚至全国，让中国变得更美好，民主和自由。但是，这次的示威，似乎起了反效果，感觉有点可惜。不知道经此一役，香港的未来会如何。毕竟，这次的蝴蝶效应，竟然是一个香港人在台湾杀了人，导致大陆看不到 NBA，炒鞋的凉了。</p><p>正如前面所说，我对外媒也是越来越鄙视，玩的双标也越来越多，越来越不靠谱（参见下面对“莫顿叉”这个解释）。最近国外那些环保人士示威，虽然没有暴力行为，但是也采用很多严重影响社会和他人利益的方式来表达。顿时感觉整个人类社会，辛苦建立的文明，怎么那么快，那么突然就堕落了。乌合之众啊，人类的理性实在是太脆弱了。</p><p><img src="https://github.com/kenspirit/blog-cdn-data/blob/master/Morton&#39;s%20fork.jpg?raw=true" alt="Morton&#39;s fork">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/kenspirit/blog-cdn-data/blob/master/truth-over-fact.JPG?raw=true&quot; alt=&quot;truth-over-fact&quot;&gt;  &lt;/p&gt;
&lt;p&gt;自从香港发生一些示威
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Politics" scheme="http://www.thinkingincrowd.me/tags/Politics/"/>
    
  </entry>
  
  <entry>
    <title>有时候，你对下属，比对自己的孩子还要好</title>
    <link href="http://www.thinkingincrowd.me/2019/08/02/sometimes-you-treat-your-subordinates-better-than-your-child/"/>
    <id>http://www.thinkingincrowd.me/2019/08/02/sometimes-you-treat-your-subordinates-better-than-your-child/</id>
    <published>2019-08-02T13:32:41.000Z</published>
    <updated>2019-08-02T13:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚上完了一个系统养育的线上课程，又紧接着参加了公司安排的一个两天的「优秀导师」培训。突然间发现，我们很多做家长的，对自己的下属，甚至比对自己的孩子或至亲还要好。</p><h3 id="你是-Boss-还是-Leader？"><a href="#你是-Boss-还是-Leader？" class="headerlink" title="你是 Boss 还是 Leader？"></a>你是 Boss 还是 Leader？</h3><p>大家可能看过类似的比较：  </p><p>Boss 使用权威；Leader 使用领导力。<br>Boss 制造畏惧；Leader 制造吸引力。<br>Boss 喜欢惩罚；Leader 喜欢指导。<br>Boss 绩效导向；Leader 发展导向。<br>Boss 喜欢控制和命令；Leader 喜欢引导和鼓励。  </p><p>很多人都会说：“我们更喜欢 Leader，而不是 Boss”。  </p><p>可是，我们在面对孩子的时候，是像 Boss 多一些，还是 Leader 多一些？</p><h3 id="你有用心去建立关系吗？"><a href="#你有用心去建立关系吗？" class="headerlink" title="你有用心去建立关系吗？"></a>你有用心去建立关系吗？</h3><p>一个成功的导师，带教新人的第一步是什么？建立关系和信任。</p><p>想想我们会为了和下属打好关系，帮助他们成长，我们做过什么？我们请 Ta 吃饭；花心思花时间来单独指导；当 Ta 遇到困难时，甚至还能共情地提问和引导，了解 Ta 真实的想法；我们察言观色，判断下属是否有抗拒心理，然后再想办法灵活应对。</p><p>可对着孩子，我们又做了多少？我们花过多少心思和孩子建立关系？还是我们默认拥有了父母的角色，就不需要用心去经营这段关系了？</p><h3 id="你违反了多少指导的原则？"><a href="#你违反了多少指导的原则？" class="headerlink" title="你违反了多少指导的原则？"></a>你违反了多少指导的原则？</h3><p><strong>表扬要公开，批评要私下</strong></p><p>  多少家长在饭桌上，在外人面前，在众目睽睽下批评自己的孩子。</p><p><strong>给出明确具体的指示</strong></p><p>  想像一下，老板对你说：”你写得这都是什么狗屎？重新写一遍！“ 你觉得这样的回应对你有帮助吗？但是，如果他说的是：”这里写的太笼统，你可以加一些具体的案例，数字，突出重点。“，你又有什么感觉？平时对待你的下属，指导你的孩子，你多数用的是哪种方式？  </p><p><strong>对事不对人</strong></p><p>  ”你怎么这么笨啊？“ ”你怎么一点上进心都没有？“ ”你看看某某做的比你好多少？“<br>  这些伤自尊的话，可能你对孩子说过不少吧？给 Ta 贴了多少标签？​可你对你的下属说过吗？为什么你会懂得给你下属面子？</p><h3 id="你是否期待-Ta-马上就变好？"><a href="#你是否期待-Ta-马上就变好？" class="headerlink" title="你是否期待 Ta 马上就变好？"></a>你是否期待 Ta 马上就变好？</h3><p>指导下属的时候，我们知道有时候难免要手把手教。还知道不可能一步到位，会帮他把目标进行分解，慢慢改进。我们还能认识到，不同的人有不同的特长，成长速度也不同，并针对他们的优缺点来安排任务。</p><p>可是对孩子呢？我们期望 Ta 一下子就能端端正正地坐上 45 分钟做作业不开小差。我们理所当然地认为孩子到了多少岁了，就应当具备了某种技能。还拿 Ta 和其他人比较，质问 Ta 为什么做不到。</p><p>在公司培训后回家的路上，我和另一位妈妈对养育问题都有了很大的感慨。之前还自认为自己做的应该可以了，在面对孩子的缺点和不足时，已经很耐心地去引导孩子，和给予意见。可现实却是大大地打脸。</p><p>她回想起自己教儿子练字时给予的那些回应，恰恰印证了培训老师教的方法。</p><p>她儿子的字写得很潦草，所以一直要求他练字。但是，她儿子一直非常抗拒。一开始她给的反馈就是：”你怎么写得这么乱？就不能整洁一些吗？“ 可是无论怎么说，都没有效果。后来，她给孩子的反馈变了：“你写的字，至少要在方块格子里面吧？我们的中文字是方块字，你写的这些有哪些可以算是方块的样子呢？” 这些改变了的反馈虽然可能还不算完美，但是，他儿子写的字竟然就慢慢变好了。更神奇的是，他儿子对练字的态度也都改变了，还会主动邀请她，看看自己的字写得怎么样。</p><p>其实，真的，<strong>”没有教不好的孩子，只有不会教的父母“</strong>。</p><p><strong>”养育孩子，其实养育的是自己“</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚上完了一个系统养育的线上课程，又紧接着参加了公司安排的一个两天的「优秀导师」培训。突然间发现，我们很多做家长的，对自己的下属，甚至比对自己的孩子或至亲还要好。&lt;/p&gt;
&lt;h3 id=&quot;你是-Boss-还是-Leader？&quot;&gt;&lt;a href=&quot;#你是-Boss-还是-Le
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Education" scheme="http://www.thinkingincrowd.me/tags/Education/"/>
    
      <category term="Coach" scheme="http://www.thinkingincrowd.me/tags/Coach/"/>
    
  </entry>
  
  <entry>
    <title>福尔摩斯爸爸和华生妈妈</title>
    <link href="http://www.thinkingincrowd.me/2019/06/25/holmes-dad-and-watson-mom/"/>
    <id>http://www.thinkingincrowd.me/2019/06/25/holmes-dad-and-watson-mom/</id>
    <published>2019-06-25T14:55:06.000Z</published>
    <updated>2019-06-25T15:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在美剧 Elementary（福尔摩斯）第 5 季里面，Joan Watson 遇到了她当医生时救过的一位贩毒黑帮人员 Shinwell Johnson。Shinwell 在假释期间，表达了对生活的悲观情绪和想重新做人的意愿，Joan 也为他提供了很多帮助。可因为 Shinwell 一直不被社会接纳，Joan 提议跟她学做侦探。Shinwell 觉得自己并不合适，谢绝了她的提议。而 Sherlock Holmes 其实也同样觉得他没潜质。  </p><p>后来 Joan 知道他重新接触黑帮，找他沟通，反而被 Shinwell 怒斥，劝她别多管闲事，并让她从此远离自己。虽然 Joann 有点无奈，但她始终觉得 Shinwell 并没真正变坏。后来，他们发现 Shinwell 是在帮 FBI 在黑帮内做线人。可是这个 FBI 职员并没登记他为正式线人，而只是利用他的信息来抢劫黑帮，最后还嫁祸他杀人。幸亏 Holmes 最终揭露了对方的阴谋，并帮 Shinwell 擦去了凶器上的指纹，他才免去了牢狱之灾。  </p><p>Shinwell 想重新打入黑帮，帮警察做线人，是因为他在监狱内看到不断有他的后来者入狱，他想改变这一切。可是 Holmes 一直不赞成，也认为他没有足够的能力，还尝试说服警察那边不要接纳他，并派人跟踪他。不过，到了最后，Holmes 终于接受了他，并教他当线人的一些必要技能。</p><p>虽说这个剧情是成人之间的侦探类故事，可是却颇有父母和子女相处的影子。  </p><h3 id="给-Ta-我认为好的"><a href="#给-Ta-我认为好的" class="headerlink" title="给 Ta 我认为好的"></a>给 Ta 我认为好的</h3><p>Joan 一开始看到 Shinwell 需要帮助时，她尽自己最大的能力，并把自己认为是最好的东西（做侦探）教给他。我们当父母的，也习惯于把自己经历过的事情，对好坏优劣的判断，教给下一代。这种可能带着血一般痛苦教训的经验，大部分情况下是避免子女走弯路的好事。</p><p>但是，有时对方未必会这么认为，尤其在叛逆期的孩子，或者 Ta 认为你的指导某程度上是贬低 Ta 的时候。</p><p>Holmes 自认为（当然大多数情况确实是）他的智商和判断能力，是碾压很多普通人的，所以他经常非常直言并很没有礼貌地对他人做出指点。大多数的父母，当然也觉得自己的经验和智商都是碾压自己的子女，因为他们还是孩子嘛。所以，他们很常单方面根据自己的判断，决定某些事情是否适合于对方。</p><h3 id="好意被拒绝"><a href="#好意被拒绝" class="headerlink" title="好意被拒绝"></a>好意被拒绝</h3><p>而当你的好意或建议被拒绝，你关心的人看似朝你觉得错误的方向走时，你会怎么办？很多人可能说出类似的气话：  </p><p>“我真是懒得理你了！“<br>”所谓’不听老人言，吃亏在眼前‘，出事了不要来找我！“<br>“你怎么这么倔！”<br>“你不 xxx 就不要认我作老爸！”</p><p>Holmes 得知 Joan 协助 Shinwell 联系警察，登记做正式线人后，则单方面尝试阻碍事情的发生。这其实和有些父母很像。在孩子不认可自己的意见，坚持自己的做法时，有些父母会自作主张地帮对方决定，甚至寻找相关方加以阻挠。</p><p>如果父母靠的是强行灌输意志的方式，来给孩子传承经验和给予指导，很可能会遭遇反弹。并且，或许也会因此抹杀了 Ta 的体验感，破坏 Ta 对自我能力做判断，做决定，和承担相应后果的能力。再说，我们认为的好与坏，未必适用于孩子，未必适应未来社会。</p><p>那我们该怎么做呢？</p><h3 id="妥协后的全力支持"><a href="#妥协后的全力支持" class="headerlink" title="妥协后的全力支持"></a>妥协后的全力支持</h3><p>Shinwell 怒斥 Joan 离开时，Joan 并没有过多斥责，只是表达出我依然关心你，有什么事情随时来找我的态度。  </p><p>Holmes 最后做的，也是值得我们学习的：<strong>明知道对方的决定不是自己认同的方向，但还是尽量协助 Ta，提升 Ta 的能力以更适合向那个方向发展。</strong> 这才能算得上是全心全意的支持。</p><p>现在，很多父母都会说：“我对小孩子没什么要求，只要 Ta 能照顾好自己，找到自己的兴趣，以后想做什么就做什么。”</p><p>这种说辞看起来相当体谅自己的孩子，似乎背后充满了无限的支持。可是，真正落实到生活上，做的和说的就不太一样的：自作主张地报一堆学习班；或者常说 “你看 XXX 的语文/数学/英语/科学/政治为什么就那么高分，你怎么才 80 多？”。有多少父母可以接受得了孩子哪怕一点点偏科？他们既要孩子全面发展，又希望 Ta 能有某些特长。我们经常感叹别人家的孩子怎么从小在某些领域就那么厉害，可是自己又有多大的勇气和精力去支持自己的孩子做 Ta 喜欢的事情？  </p><p>“Ta 还小，还没成年，并不知道好和坏，也不知道现在应该做什么。” 这是无数家长的理由，同样也是在一些时候束缚着我的枷锁。在哪些方面可以尊重孩子的选择，哪些应该家长强制要求，我也把握的还不好。<strong>可要到孩子多少岁了，我们才会认为 Ta 可以自己做决定，尊重 Ta 的选择了呢？这个问题值得每位父母思考。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在美剧 Elementary（福尔摩斯）第 5 季里面，Joan Watson 遇到了她当医生时救过的一位贩毒黑帮人员 Shinwell Johnson。Shinwell 在假释期间，表达了对生活的悲观情绪和想重新做人的意愿，Joan 也为他提供了很多帮助。可因为 Shin
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Support" scheme="http://www.thinkingincrowd.me/tags/Support/"/>
    
  </entry>
  
  <entry>
    <title>你制定的规则未必比 996 要强</title>
    <link href="http://www.thinkingincrowd.me/2019/06/02/the-rules-you-made-might-not-be-better-than-996/"/>
    <id>http://www.thinkingincrowd.me/2019/06/02/the-rules-you-made-might-not-be-better-than-996/</id>
    <published>2019-06-02T13:04:18.000Z</published>
    <updated>2019-06-02T13:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>小时候，我们觉得自己要遵守大人和社会制定的各种规则，实在是太不自由了。<br>长大后，当需要为别人制定规则时，你可能会发现这是更令人头疼的事情。</p><p>这怎么可能，制定规则还不简单吗？是啊，你定你的规则，没人拦着你。</p><p>可你凭什么让别人遵守？甚至你本人都未必能遵守自己定下来的规则吧？</p><p>我家那个娃，不像我以前那么“听话”，为了让他遵守一些约定，可是伤透了我们夫妻俩脑筋，还经常为此吵架争论。</p><p>一般来讲，规则是围绕着某些特定的原则来制定的。如果违背了规则或约定，相应会有要承担的后果（一般来说应当是不作为的直接后果）。如何制定规则，以及选择什么样的后果或惩罚措施能凑效并促使对方以后能尽量遵守是非常困难的。</p><p>举几个最简单，但又最头疼的事情给你体会一下。</p><h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>你觉得吃饭的原则有哪些？那些什么手要端碗，吃干净等琐碎的点就不说了，最基本的应该有这些吧：</p><ol><li>菜上了桌，所有人都应当入席</li><li>等人齐了，才能动碗筷</li><li>按需装盛，不强占，不浪费</li></ol><p>如果当你上了菜，叫孩子过来吃饭的时候，他还沉迷于某个东西，或者说：“不，我等会再吃。”？Ta 算违反了第一条规则吗？你的反应会是怎样？你需要看 Ta 当前在忙什么才做出决定吗？  </p><ul><li>如果 Ta 在做作业？  </li><li>如果 Ta 在看书？  </li><li>如果 Ta 在拼乐高或积木？  </li><li>如果 Ta 在看电视？  </li><li>如果 Ta 在玩手机？  </li></ul><p>到哪一个你就无法忍了？是否违反了第一条规则和 Ta 正在做什么有关系吗？是不是某些事情就情有可原？为什么呢？和你判断 Ta 正在做的事情是否有意义有关？谁有资格做出这个判断呢？  </p><p>好，不管 Ta 现在做的是什么，你已经认定了 Ta 违反了规则一，那你会采取什么措施让 Ta 知道这个原则必须遵守？或者打算让 Ta 承担什么后果？  </p><ul><li>强行中止 Ta 目前的行动  </li><li>放狠话：“现在不来就别吃了！”  </li><li>打一顿  </li><li>说：“最后吃完的洗碗”  </li></ul><p>对我来说，虽然到了最后两个我就觉得不是正当理由，但我基本是无论儿子在做什么，都会要求按时吃饭，因为要规律饮食。所以，我可以容忍一两分钟，毕竟有可能手上的事到了最后关头啥的。所以，我会说的是：“你最后吃完，就负责洗自己的那个碗和装菜盘子”。他一般都会马上过来因为他不喜欢洗碗。但是，老婆说这个做法没法让他体会第一个规则的意义，就是饭桌礼仪。你们觉得有什么更好的办法，兼顾两者呢？</p><h3 id="睡觉"><a href="#睡觉" class="headerlink" title="睡觉"></a>睡觉</h3><p>按时睡觉对我儿子来说也是老大难问题。他睡眠时间一直不太够，偶尔晚饭后就要在沙发那里睡那么一会。但是他老是很早起来，晚上又不喜欢早睡。以前如果不禁止他早起后看电视，还能更早。</p><p>我们对于睡觉的原则是：“小朋友要有 10 小时左右的睡眠时间。”，所以，我们定的规则就是 9 点半前所有事情都必须完成。那么，我们给予的半小时玩游戏的奖励，也就意味着 9 点前必须完成所有的作业，洗澡等。</p><p>但是，他总能找到拖延睡觉的方式，比如 9 点半后开始吃宵夜。这个我觉得他是知道我们在这方面不会怎么拦他，而且这时候我们也会趁机要求他吃水果。</p><p>所以，这点上我都没什么好措施，也想不到什么好的后果来让他承担，从而促使他改变。</p><h3 id="做作业"><a href="#做作业" class="headerlink" title="做作业"></a>做作业</h3><p>你们觉得这方面的原则是什么呢？至少应该有这两点吧。  </p><ul><li>独立完成</li><li>按时按质按量完成</li></ul><p>为了达成目标，要把规则制定成“不完成作业前不能去玩”吗？感觉又不太人性化，上了一天课，放学后应当可以轻松一下。我们也希望能让儿子有运动锻炼，晒晒太阳的时间。</p><p>可是，要他回头按约定的时间回家做作业就头都大了，老是不守约定，玩了就不愿意回来了。回到家后问作业多不多，他就说不多。但是又经常拖拉到深夜，尤其是有语文阅读或作文的时候。</p><p>所以，要如何制定规则和违规后的惩罚呢？任由他给老师点名，罚抄之类吗？不是不行，但不是每个小孩都受，有些可能越罚越反叛。而且，我在上篇「<a href="http://www.thinkingincrowd.me/2019/05/21/call-for-parent/">叫你的家长来！</a>」的文章也说过，很多老师最后其实是把球踢回给家长而已。  </p><p>如果最后变成要我们在边上监督他，那就违背了原则一，依赖惯了怎么办？如果完全让他自主安排时间，却又经常拖到最后才做。他怎么就不能像我小时候那么听话，先把作业做完，然后才去没后顾之忧地玩呢？感觉他就似乎有所谓的拖延症那样。（虽然李松蔚老师说过，有些有拖延症的人其实挺厉害的。他们对自己的能力其实认识的很清楚，因为能在截至日期前把事情做的刚刚好，又不至于太差。）</p><p>曾经，他作业做到很晚，我们怕耽误他晚上睡觉时间，让他第二天早点起来再做。没想到他后来就利用这个规则，拖到晚上不想做了就说累，但第二天早上又不愿意起来。后来有一次我就逼他作业晚上必须当天做完，一直做到十一点多。</p><p>所以，现在只能和睡觉共享同一招，没按时间做完作业就没手机玩了；全部作业做完才能睡。可是这种做法似乎并没太多提高他的积极性。</p><p><strong>对于规则制定者来说，平衡好各方各面，减少被利用的漏洞，同时又尽量引导去好的一方面是非常难的</strong>。虽然说强制 996 是很多公司领导懒政的表现，但你也未必能制定比它更“简单公平”的规则。在公司制定的规则，你还可以那“钱”来约束一个人，但是在家里呢？<strong>规则怎么制定，以及设定怎样的惩罚措施，可以很好地反映制定者的层次</strong>。</p><p>不知道非 IT 界的有多少人知道之前的<a href="https://www.zhihu.com/question/50600301" target="_blank" rel="noopener">阿里巴巴安全部门月饼事件</a>？有兴趣的可以看看。说说你了解的，或经历的与规则相关的趣事？或者给予我一些建议？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小时候，我们觉得自己要遵守大人和社会制定的各种规则，实在是太不自由了。&lt;br&gt;长大后，当需要为别人制定规则时，你可能会发现这是更令人头疼的事情。&lt;/p&gt;
&lt;p&gt;这怎么可能，制定规则还不简单吗？是啊，你定你的规则，没人拦着你。&lt;/p&gt;
&lt;p&gt;可你凭什么让别人遵守？甚至你本人都
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Rule" scheme="http://www.thinkingincrowd.me/tags/Rule/"/>
    
  </entry>
  
  <entry>
    <title>区块链和贸易战</title>
    <link href="http://www.thinkingincrowd.me/2019/05/26/blockchain-and-trade-war/"/>
    <id>http://www.thinkingincrowd.me/2019/05/26/blockchain-and-trade-war/</id>
    <published>2019-05-26T03:53:52.000Z</published>
    <updated>2019-05-26T04:08:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我接触比特币，到认识区块链，到目前参与联盟链相关的开发项目，我对比特币和区块链的认识，由全面的盲目相信，到冷淡排斥，到现在秉持技术的理性和带着忧虑的天真期望。</p><p>最初的盲目相信，因为我看到比特币在自由，公正（无法篡改），平等（公平奖励）方面的理念，以及中本聪对各国政府和法币资本体系的态度。这种天生带点反叛，又有点天真美好的想法，真的是很吸引我。</p><h3 id="冷淡排斥"><a href="#冷淡排斥" class="headerlink" title="冷淡排斥"></a>冷淡排斥</h3><p>后来，随着虚拟货币的疯狂，我一开始是兴奋的，不是因为它的价值疯涨，而是因为我以为终于有更多人看到它的价值，认可它。但是，一系列的疯狂发币，推广，欺诈，不切实际的伪概念，让我对大部分的币和所谓的区块链项目都很排斥，也认识到大多数的吹捧，仅仅是金钱方面的贪婪。</p><p>作为一个技术人员，我认为区块链就是一个拥有无法篡改特性的分布式数据库。所以，它可以让以前缺乏信任的组织或个人，通过技术手段，增强信任，加速数据的分享。于公链，它应当具备激励手段，才能让参与者有热情和贡献；于联盟链，则侧重于数据合作共享。</p><p>ArcBlock 公众号的这篇文章<a href="https://mp.weixin.qq.com/s/aEy8MpIQB8jd7OO35tvkvQ" target="_blank" rel="noopener">拨开“名词”迷雾，五图看清区块链网络发展趋势</a>，很透彻地说明区块链作为技术，和以往的互联网，承担的角色是一样的。它是基础架构，而在此之上的用户，并不需要留意到它的存在，正如现在的网络用户不需要知道 TCP/IP。</p><p>而现在很多所谓声称构建在区块链上的 Dapp，和以前的没任何区别。它们除了可能基于某个公链，还依附于某个特定的中心化的 Dapp 服务提供商。那这个服务提供商，背后究竟有没有使用区块链，其实用户并不清楚。</p><p>所以，那段时间也写了好几篇文章：</p><p><a href="http://www.thinkingincrowd.me/2018/03/30/many-blockchain-products-are-trash-compared-to-bitcoin/">很多所谓的“区块链”项目，在比特币面前就是渣</a><br><a href="http://www.thinkingincrowd.me/2018/05/08/is-blockchain-valuable/">区块链到底有没有价值</a><br><a href="http://www.thinkingincrowd.me/2018/05/23/is-press-one-investment-logic-reasonable/">PRESS.one 的投资逻辑」合理吗？</a>  </p><p>从上面的几篇文章可以看出，我对很多区块链项目或想法都是持怀疑态度的，即便我依然相信这个技术和某些项目。我的看法，慢慢趋向于技术层面的理性考虑和分析。</p><h3 id="带着期望的忧虑"><a href="#带着期望的忧虑" class="headerlink" title="带着期望的忧虑"></a>带着期望的忧虑</h3><p>根据 ArcBlock 的<a href="https://mp.weixin.qq.com/s/3LgWjI7DanziUWsl_g4aEQ" target="_blank" rel="noopener">去中心化应用的五大制胜关键</a>里面提到的其中四大关键：  </p><ul><li>支持去中心化的用户身份</li><li>支持用户的数据可迁移性</li><li>必须建立在开放协议之下</li><li>充分利用数字资产的优势</li></ul><p>这些要求，都是革当前中心化巨头的命。</p><p>现在的互联网，远没有以前开放了。数据孤岛现象相当明显。各大巨头都把用户数据抓在自己手里，不让搜索引擎抓取。用户数据，用户关系，可谓巨头的核心资产。如果 Dapp 的制胜关键，是要让用户数据可迁移，建立在开放的协议下，则是要求现有的巨头放弃自己的核心用户资产，谈何容易。而数字资产，则是挑战当前的各国政府和法币资本体系，更是困难重重。</p><p>我现在参与的联盟链项目开发，参与方遍布国际。国内的企业担心国外云平台安全，不能把数据存放在国外服务器。反之亦然。</p><p>最近，美国从打击华为开始，和我们祖国展开的贸易战，更是说明了国家层面的利益，对技术和商业自由活动的打击。连标榜自由的灯塔国尚且如此恶心，要通过区块链实现自由互通，可谓“路漫漫其修远兮”啊。</p><p>有兴趣的朋友，可以看看 TK 教主的两篇微博：</p><p><a href="https://weibo.com/1401527553/Hu9Dk7lKd" target="_blank" rel="noopener">数字货币神教要成事</a><br><a href="https://weibo.com/1401527553/HvEHlFRzo" target="_blank" rel="noopener">《“法国华为”是如何被美国吃掉的？》</a>  </p><p>区块链要发展，可能关键不在于技术，而在于和现实的强权对抗。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从我接触比特币，到认识区块链，到目前参与联盟链相关的开发项目，我对比特币和区块链的认识，由全面的盲目相信，到冷淡排斥，到现在秉持技术的理性和带着忧虑的天真期望。&lt;/p&gt;
&lt;p&gt;最初的盲目相信，因为我看到比特币在自由，公正（无法篡改），平等（公平奖励）方面的理念，以及中本聪对
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Blockchain" scheme="http://www.thinkingincrowd.me/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>叫你的家长来！</title>
    <link href="http://www.thinkingincrowd.me/2019/05/21/call-for-parent/"/>
    <id>http://www.thinkingincrowd.me/2019/05/21/call-for-parent/</id>
    <published>2019-05-21T15:19:14.000Z</published>
    <updated>2019-05-21T15:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天我在<a href="https://m.weibo.cn/status/4373333325766309" target="_blank" rel="noopener">微博</a>上看到了如下文字，甚是感慨，就转发到了朋友圈。有人评论说：“这太极端了吧？”。我想针对此再详细说说我的想法。</p><blockquote><p>我记得我小的时候，如果一个学生在学校犯了错误，老师很生气，于是老师使用了最终手段「我要把你家长叫来！」<br>我一直很好奇一个问题，家长比起教师更缺乏教育经验，也没有接受过系统的教育训练，为什么老师束手无策的时候家长却可以解决呢？</p><p>后来一个数学老师和我说，其实根本目的从来就不是让家长能解决什么问题。<br>而是让家长感到莫大的羞辱，然后回去把孩子骂一顿打一顿，干一些法律不允许教师做出的行为，教唆家长来执行它，来让自己解气。<br>于是还发展出一个更高级的玩法。就是打电话到家长的公司，让家长的上司给家长传达学生在学校里干的坏事，以加强这一行为的报复感。<br>而对于能否从根本上解决学生的问题，其实并不抱太大的期待。</p><p>从那个时候我就知道，一旦一个老师使用了「叫家长」的招数，就直接证明了这个教师职业能力的缺乏，并且怀着极强的报复心试图霸凌学生。<br>而从理解这一点的根本意义之后，就再也不害怕什么叫家长不叫家长了。</p></blockquote><p>先说我的观点吧，即便不是 100%，99% 的老师都是这样的。而真正怀着了解家里情况，沟通学生现状的由来，并尝试解决问题的老师太少。如何知道 Ta 是哪种老师呢？只看以下两点就够了。</p><ol><li>方式</li><li>态度</li></ol><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>先不说叫家长，老师对家长施加压力，甚至羞辱家长的方式其实都很常见。现在都有家长群，或者“校训通”（学校和家长单向通信的某种短信服务），老师每天都可能在里面点名“某某”哪些方面表现不好。</p><p>管理学上有个指导原则：“<strong>公开赞扬，私下批评</strong>”。但是，从我小时候到现在，学校教育无处不存在公开批评。这也难怪，中华的传统美德。所谓的抓典型就是这个理。</p><p>我有幸在上班期间接到一次儿子在学校打来的电话。儿子当时哭得很凄凉，我问：“怎么了？” 他说：“我被老师叫到办公室，然后让我打电话给家长。” 我说：“那你做了什么让老师罚到办公室，然后要打电话给我？” 他说：“我在课堂上写金牌学案了。” 我一听，好吧，先回了一句：“我知道了。老师要和我说吗？” 然后他在那头问老师。期间我听到老师和他说的一些片段：“打给谁了？你们说的粤语，我听不懂。告诉你爸爸了是吧？” 然后儿子回复我说不用和老师讲，就挂电话了。</p><p>事情的缘由就是儿子觉得老师讲的内容都懂了，想在课堂上提前把作业做了，晚上多些时间玩。结果被老师抓住说不听课。</p><p>虽然错的是儿子，但我其实是有点气愤的。做本堂课的作业，还不是讲话影响他人什么的，这样的事，竟然还要动用到打电话给家长？老师是没有其它合适的教育手段了吗？我觉得私下肯定一下他的能力，问他一个难一点的问题，然后指出上课不听讲会遗漏一些重要的内容，让他意识到自己的错不更好吗？让小朋友打电话给家长，而不是自己和家长谈，这明显只是想借助家长的权威来惩罚学生。</p><p>同理，在开家长会（令一种叫家长来的形式）的时候，你听老师发言的话，就能知道一个老师的教育理念和处理方式有没有问题。有些老师直接就让家长每天检查作业，签名什么的，一看就是推个锅让家长监督。本来要做什么作业，做的怎么样，就是学生的责任，老师监督审核为辅。有问题一直没法调整，家长再协助教育。一上来就检查签名的，就是想借父母权威，帮自己省事。</p><p>所以，你想知道老师叫家长究竟是什么目的，是羞辱学生或家长，施加压力，还是想更好地解决问题，看 Ta 使用的方式就行了。</p><h2 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h2><p>商量如何解决问题，和斥责的态度，我觉得大家应该都能分得清楚吧？<strong>老师和家长，在教育孩子上，我觉得地位是平等的，是双方共同的责任</strong>。我不会觉得孩子学习或者纪律不好，是老师的责任，也不会觉得完全是家长的责任。</p><p>我可以理解，教育孩子是很难的事情，很容易就火冒三丈，血压飙高。但是，一但叫家长来了，如果 Ta 和家长对话的时候，都无法用稍微平静的语气，平等对话，而是斥责，埋怨家里没管教好，你也可以知道 Ta 是想和你一起解决问题，还是羞辱你，让你自己去解决问题。</p><p>被叫见家长，是令人头疼的问题。但是，如果让我遇到一个真正想着如何与家长一起解决问题的老师，被 Ta 叫见家长，是幸运的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天我在&lt;a href=&quot;https://m.weibo.cn/status/4373333325766309&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微博&lt;/a&gt;上看到了如下文字，甚是感慨，就转发到了朋友圈。有人评论说：“这太极端了吧？”。我想针
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Education" scheme="http://www.thinkingincrowd.me/tags/Education/"/>
    
  </entry>
  
  <entry>
    <title>我们总会尽最大可能“被看见”</title>
    <link href="http://www.thinkingincrowd.me/2019/05/01/we-go-length-to-be-seen/"/>
    <id>http://www.thinkingincrowd.me/2019/05/01/we-go-length-to-be-seen/</id>
    <published>2019-05-01T03:15:30.000Z</published>
    <updated>2019-05-01T03:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周六，是儿子邀请同学到家里来搞生日聚会的日子。<br>但是，在聚会前几天，儿子向我们说，有个经常在班里欺负其它人的 W 同学，不知道为什么知道了这个聚会，已经向儿子施压，说自己一定会来。即便儿子已经拒绝过他，还是担心他会硬闯。</p><p>聚会当天，这件事前令他担忧的事情真的发生了。W 同学向另一位受邀的同学谎称自己也受邀，拿到了地址，然后不请自来。W 同学来到我们家后，一开始在显摆他带来的超大吃鸡阻击枪（抱歉我真的不知道型号），然后又拿奶片糖分给其他人吃，还当场玩起了吃鸡游戏。但是，也只是有一两个小朋友搭理他。</p><p>根据我们和儿子之间的约定，如果他不请自来，我和妈妈会把他请走。原因是他之前还打过不少同学，包括我儿子，所以大部分同学都不喜欢和他在一起玩。而且，来参加聚会的同学的家长都不知道他会出现。因此，即便他目前没做什么过分的事情，我们觉得，如果继续让他留着，同学们没法玩得尽兴，家长可能也会有意见。</p><p>大雨倾盘下了半小时多，终于渐停。我们拿出来一部分吃喝的东西招呼过大家后，妈妈单独和 W 同学私下说明了原因，并告诉他只要以后不欺负小朋友，下次一定让他参加聚会。然后就让他带上自己的东西和一些吃的离开了。</p><p>聚会正式开始了好一会，我们一直好奇怎么还有一位同学还没到。后来发现原来 W 同学一直坐在我们单元楼下，而那位没到的同学就在楼下玩他的手机。</p><p>啰啰嗦嗦的讲了这么久，不知道大家从中看到了什么。你觉得如果这件事情发生在你孩子身上，或者你讨厌的人不请自来到了你的聚会，你会怎么做？</p><p>据了解，这已经不是 W 同学第一次闯入其他人的生日聚会了。如此大费周章地纠缠于他人，显摆他的玩具，拉拢玩伴，到底是为什么呢？</p><p>我觉得他是太<strong>渴望关系，渴望被看见，被认可</strong>了。</p><p>一直以来，欺负同学的他经常被排斥和忽视。缺乏关系的他，自然不被看见和认可。为了把自己卷入到某种关系里头，让自己有参与和存在感，一些行为，甚至是带“强迫性”的，就很自然的出现的。但是，为什么一开始的时候，他要去“欺负”同学，让这个恶性循环得以开始呢？据了解，他的爸爸和爷爷都比较暴力。所以，可能暴力也是他唯一知道的相处方式。  </p><p>关系对于人来说是非常重要的。</p><p>据闻神圣罗马帝国皇帝腓特烈二世曾经做过一个臭名昭著的实验，来证明人类的原始语言是什么。他让一批护士照顾婴儿，期间只进行喂养和洗澡，但严禁任何必要的互动，并在任何情况下都不得说话和发声进行语言的安抚。结果，腓特烈二世并无从实验获得任何结论，因为所有的婴儿都因为缺乏基本的爱和互动而死亡了。另一个美国心理学家哈利·哈洛进行的恒河猴实验（又称母爱剥夺实验）也反映出关系对灵长类生物的重要性。</p><p>缺乏关系，当然就无法“被看见”。</p><p>上面的例子看起来比较遥远，甚至荒谬。但是我们自己对“被看见”，被认可的需求也应该很熟悉吧？今天剪了一个头发，怎么都没人发现？我发的朋友圈怎么都没人点赞？我写的文章，怎么都没人看和打赏？</p><p>儿子幼儿园玩伴的妈妈，我一直很敬佩的一位家长，她了解到上面的事情后，和我分享了下面的一段话。我觉得大家都可以学习体会一下：</p><blockquote><p>我们班也有个同学，也很淘气，元元班长管理他时，曾经也打元元，老师，校长都找他和他家长谈过话，没用，之后还是照样，后来我找他谈，夸赞他的优点，我教元元也用同样的方法管理他，其他人都说他不好，我就让元元找他的优点说，（他有次科学考了全班第一），现在再没听到元元说他欺负她了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周六，是儿子邀请同学到家里来搞生日聚会的日子。&lt;br&gt;但是，在聚会前几天，儿子向我们说，有个经常在班里欺负其它人的 W 同学，不知道为什么知道了这个聚会，已经向儿子施压，说自己一定会来。即便儿子已经拒绝过他，还是担心他会硬闯。&lt;/p&gt;
&lt;p&gt;聚会当天，这件事前令他担忧的事
      
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
  </entry>
  
  <entry>
    <title>基于特性的测试更接近于第一原理</title>
    <link href="http://www.thinkingincrowd.me/2019/04/16/property-based-test-is-closer-to-first-principle/"/>
    <id>http://www.thinkingincrowd.me/2019/04/16/property-based-test-is-closer-to-first-principle/</id>
    <published>2019-04-16T13:47:23.000Z</published>
    <updated>2019-04-21T14:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近翻译了一篇<a href="https://elixirschool.com/zh-hans/lessons/libraries/stream-data/" target="_blank" rel="noopener">文章</a>，里面介绍的是 Elixir 生态下，一个基于特性测试（property-based test）的工具库 StreamData。里面的概念还真是第一次听，也给我带来一些新的想法。强烈建议大家看看，即便你不懂 Elixir 语法，但也不妨碍看懂。</p><p>关于单元测试，我自认是没有使用 TDD，也确实写的不多，但也不是没有任何经验（在我的博客 Unit Test 标签下还是有那么几篇文章的）。平时我们写的测试，都是基于用例的单元测试（example-based test）。基于用例的意思，就是选择几种不同的输入值（example），判断输出是否和期望相同。这种做法的不足地方在于，如果开发人员经验不足，选择的用例没有包含极端情况，或边界值，可能就会隐含特定条件下会触发的 bug。</p><p>而基于特性的测试可以很好的解决这个问题。那基于特性是什么意思呢？</p><p>那篇<a href="https://elixirschool.com/zh-hans/lessons/libraries/stream-data/" target="_blank" rel="noopener">文章</a>里要测试的函数功能很简单，就是把输入的字符串，列表等数据，按另一个输入的次数，复制多次。函数签名可想象为 <code>duplicate(source, count)</code>。加入你输入的参数为 <code>&quot;a&quot;</code> 和 <code>4</code>，那输出值就是 <code>&quot;aaaa&quot;</code>。</p><p>平时我们要测试这个函数可能会分别考虑 <code>source</code> 为空字符串，<code>null</code>值，超长字符，空列表，<code>count</code> 为 <code>0</code>，正整数，负数等情况，分别写不同的测试用例，尽量覆盖不同的情况。最后的断言（assert）也一般是 <code>&quot;aaaa&quot; === duplicate(&quot;a&quot;, 4)</code> 这样的方式。</p><p>但是，当使用基于特性的思维来测试这个函数时，我们要考虑的点就不同了，最后写的断言也不一样。</p><p>这个函数的功能，就是把源数据，复制零或多份。所以，它的特性只有这两点：  </p><ol><li>返回值的长度，是源数据长度 * <code>count</code>（复制次数）</li><li>返回值只是源数据的不断重复，不会包含其它任何数据</li></ol><p>这就是这个函数的特性。所以，相应的测试用例的断言，也只有这两个。</p><p>所以，这种测试代码的编写，你需要做的就是总结出要测试的函数的核心特性。StreamData 这个工具库，则为每一个测试用例生成各种随机数据，并默认运行 100 次，试图帮你找出破坏代码行为的特殊数据。</p><p>用这种方法来写测试和断言和平时的做法还是很不一样的，一开始会很不习惯的。但是，我觉的这种思维方式似乎更接近于第一原理的运用，促进深入思考。Elon Musk 是这么说第一原理的：</p><blockquote><p>[With <a href="https://en.wikipedia.org/wiki/First_principle" target="_blank" rel="noopener">first principles</a>] you boil things down to the most fundamental truths … and then reason up from there.”  </p></blockquote><p>JavaScript 也有一个基于特性的测试工具库 <a href="http://jsverify.github.io/" target="_blank" rel="noopener">JSVerify</a>，下次写单元测试时我要尝试一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近翻译了一篇&lt;a href=&quot;https://elixirschool.com/zh-hans/lessons/libraries/stream-data/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;，里面介绍的是 Elixir 生态下，
      
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Unit Test" scheme="http://www.thinkingincrowd.me/tags/Unit-Test/"/>
    
      <category term="First Principle" scheme="http://www.thinkingincrowd.me/tags/First-Principle/"/>
    
  </entry>
  
  <entry>
    <title>从未快乐地加班意味着从未投入，但这不是强制加班的借口</title>
    <link href="http://www.thinkingincrowd.me/2019/04/13/never-ot-means-never-all-in-but-not-reason-of-compulsory-ot/"/>
    <id>http://www.thinkingincrowd.me/2019/04/13/never-ot-means-never-all-in-but-not-reason-of-compulsory-ot/</id>
    <published>2019-04-13T07:07:56.000Z</published>
    <updated>2019-04-13T07:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 <a href="https://github.com/996icu/996.ICU" target="_blank" rel="noopener">996.icu</a> 事件在程序员界闹得沸沸扬扬。  </p><blockquote><p>什么是 996.ICU？工作 996，生病 ICU。  </p></blockquote><p>996 其实是一种程序员界的一种工作状态：早上 9 点上班到晚上 9 点，一周工作六天。  </p><p>996 某种程度上来说只是加班的一种形式。这么多年来，去面试毕业生的时候，都会有人问：“你们公司要加班吗？” 然后我基本会反问：“你认为怎么样才算加班？什么样的加班你是不能接受的？”  </p><p>我说说自己的加班经历，和对加班的理解吧。</p><p>我试过加班到凌晨 4 点，然后 8 点继续上班；我经历过 995，和 996。有因为自己能力不足而独自加班，有为了项目进度和兄弟们一起拼搏，也有仅为遵守公司的制度。  </p><p><strong>我不喜欢加班，无法接受长期加班，憎恨无理的制度性常规性加班，但是愿意为自己喜欢的事情加班。</strong>  </p><p>对于程序员来说，业余时间持续学习，增进技能是很平常的事。即使不需要加班做公司的任务，很多人在下班后也会读书，写业余项目，针对工作面对的问题找学习资料和解决方案等。这些学习形式和内容，并不都和工作直接相关，但是对能力的提升是相当有帮助的。间接来说，个人能力提高了，对公司和工作也是有好处的。花在这些方面的时间，即便是为了解决工作上碰到的问题，程序员一般来说也不会被认为是在加班。  </p><p>有时候的加班其实是幸福的。你和好几个同事，以及领导，为了某个项目或者功能需要赶一个进度。大伙每天晚上一起吃饭，吹吹水，然后拼搏到深夜。老板让大家打车回家，第二天稍微晚点来。这样的日子即使持续两三个月，甚至半年，大伙可能都不会觉得太辛苦。而且重要的是看着整个团队为着同一个目标而奋斗，最后有了成果，是很开心的。完了后，领导也会让每个人轮流补休几天，修整一下。大家其实也会很快满血复活回到岗位的。</p><p>这种加班意味着你的全情投入，没有体验过的话，真的可以说是白年轻了。</p><p>但是，很多老板却偷换概念（比如我们的马老板），把不加班就渲染为不奋斗，不热爱工作。</p><p><a href="https://weibo.com/1642088277/HpifMlEkq?from=page_1002061642088277_profile&amp;wvr=6&amp;mod=weibotime" target="_blank" rel="noopener">996 是修来的福报</a></p><p><a href="https://weibo.com/1977581633/HpjLIvCyR?from=page_1005051977581633_profile&amp;wvr=6&amp;mod=weibotime" target="_blank" rel="noopener">后悔忙工作，没时间陪家人</a></p><p>我们厌恶的加班其实是什么呢？<strong>制度性，常规性的加班</strong>。这也就意味着，并不是因为一个特殊的紧急的情况而需要临时性的加班，而是长年累月那种。甚至明明没什么东西要做，也还要被留在公司，到点才能离开。这是最让人讨厌的。</p><p>当然，有人会说，老板还 7x24 呢。对的，没错，那是他自己的公司，只要需要他负责，当然什么时间都要处理。其实很多程序员或客户支持，接到线上问题，需要支援的时候，也是义无反顾地加班紧急处理，并不是说放假就放手不管了。</p><p>那种制度性，常规性的加班，其实大部分时候只是上层管理，方向上的无能。当你招聘的人，并不够认真负责，上班经常划水，效率不高，导致任务滞后。可是你又不懂如何更好管理，激励员工，单纯粗暴无脑实施 996，祈望通过延长时间来补偿，结果恶性循环，员工更容易划水。又或者是公司产品方向不清晰，看着竞争对手有的功能就想赶超，没有重点，啥都想做，啥都说急着要上，像撞大运那样做一堆产品或功能上线，看哪个能火。一些领导还假惺惺的说，不赞成员工加班，但是却深夜发邮件，两小时内回复；或者快到下班时间开长时间的低效率的会议等。</p><p>程序员加班很频繁，但确实不是最累的行业。很多工厂，送外卖，餐馆等各色服务行业，每天可能工作多于 12 小时，一个月才一两天假期。所以，也有好一些从经济学角度来思考的文章。这些文章从某种角度来说，是对的。这些是竞争的结果，竞争最后会产生更优的企业，更好的福利。只是很多企业以竞争为借口，强迫超时劳动。你可以说，你可以选择离开啊。但是如果大范围都是这样的，你能去哪里？</p><p><a href="https://mp.weixin.qq.com/s/UBhJfM1Wz1gb1dNqznKlBg" target="_blank" rel="noopener">抗议996？GitHub上的那帮程序员纯属不要脸</a></p><p><a href="https://mp.weixin.qq.com/s/6ptYtp19MIIMLmrbt88kQw" target="_blank" rel="noopener">如何减少996</a></p><p>我一直不赞成那些高福利养懒人的政策，甚至怀疑最低工资是否合理。但是政府确实需要一些基本制度保障基本人权。如果你作为企业主，希望员工多干活，那可以用更好的激励手段，给加班补贴（政府没必要规定加班费是多少，而是由员工和企业约定），提供晚餐，调休等福利。只要双方愿意（甚至签合同），怎么加班都没问题。但是，冠冕堂皇地认为不加班就是不进取奋斗，低绩效评分就相当无耻了。</p><p>管理学大师彼得·德鲁克在 1966 年的「卓有成效的管理者」中就阐明知识工作者应该如何管理。人月神话说过：“往进度落后的项目新加人手只会更慢”。同理，用增加时间的方式来掩盖项目落后的真正问题同样无法改善。</p><p><strong>我们程序员只是讨厌无价值，和强制的加班。你有本事让我快乐地加班，是你的能力。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近 &lt;a href=&quot;https://github.com/996icu/996.ICU&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;996.icu&lt;/a&gt; 事件在程序员界闹得沸沸扬扬。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是 996.IC
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>自学编程的思维模式</title>
    <link href="http://www.thinkingincrowd.me/2019/03/20/mindset-for-self-teaching-programming/"/>
    <id>http://www.thinkingincrowd.me/2019/03/20/mindset-for-self-teaching-programming/</id>
    <published>2019-03-20T14:11:38.000Z</published>
    <updated>2019-03-20T14:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，李笑来写了一本书「<a href="https://github.com/selfteaching/the-craft-of-selfteaching" target="_blank" rel="noopener">自学是门手艺</a>」，还开源了。这本书是以学习 Python 的切入点来教如何自学编程。</p><p>回顾了一下自己自学编程的经历，我也想补充一下自己的观点。</p><h2 id="成长足迹"><a href="#成长足迹" class="headerlink" title="成长足迹"></a>成长足迹</h2><p>我还很清楚记得，在第一家公司，CORESOLUTIONS，最开始承担的工作任务。因为，当我问 Leader 我做出来的页面是不是他想要的效果时，他脸上的那一丝惊讶的表情，和我内心的那份窃喜，深深烙入我的内心。</p><p>这个工作任务是在公司内部打造的 ERP Web Application 的中实现某个页面。那个系统的页面，是由公司通过 JAVA 自研的 UI 渲染组件，在 JSP 里生成 HTML 来实现的。所以，网络外面完全查不到参考资料，我只能参考系统已有的页面和代码。不过，大概只花了半天，我就把页面模仿着做出来了。</p><p>之前我可没怎么写过 JAVA，我真正的编程生涯可以说是从进入这家公司后才开始的。因为我是非科班出身，底子差，怕被他们发现我太搓，所以不敢轻易问问题。全靠自己不断尝试，憋着劲自学 Java，JSP，JavaScript 和 DOM 等语言和技术。</p><p>虽然不是计算机科班出身，但是相比很多同事朋友，我学习新东西的速度算是比较快的。所以，我在这个公司待了差不多 8 年，期间公司经常让我参与不同的项目，接触的东西很杂，学了很多技术，也做了很多项目。而且很多情况下都要现学现用。</p><p>我带过测试小团队；在公司资深顾问集体跳槽后，当过技术支持；用 BI 和 Crystal Report 做过数据仓库的项目；用 Powerbuilder 做过 CS 架构的系统；当然也用 J2EE 做 BS 架构的 ERP 系统，等等。</p><p>最近的 2016 年中去了北京帮笑来做一块听听，用 Node.js。目前回到珠海，在企业内参与联盟链相关的项目开发，用 Hyperledger Fabric, SpringBoot 等技术。</p><p>虽然和外面很多大神相比，我还是差很远，但是通过对自己，同事，和带过的新人的观察，我发现影响学习速度的其中一个因素是思维模式。</p><h2 id="思维模式"><a href="#思维模式" class="headerlink" title="思维模式"></a>思维模式</h2><p>我说的模式其实就是：</p><ul><li>整体到局部</li><li>局部到整体</li></ul><p>除了编程，很多其它技能的学习，也都可以运用这两种不同的模式的。比如说，画画。</p><p>儿童最开始画画的时候，都是粗线条，大轮廓。随着年龄的增长，线条，轮廓慢慢变得精细，也有更多细节的填充。这个过程，是由人的感官，和肢体控制能力的发展水平决定的。所以，不少学习画画的教程，也是从构建物体的轮廓开始。这就是从整体到局部的过程。</p><p>但是，一本很出名的书，「<a href="https://www.amazon.com/Drawing-Right-Side-Brain-Definitive/dp/1585429201" target="_blank" rel="noopener">Drawing on the right side of the brain</a>」，里面教授画画的技巧，则是把要临摹的图像上下倒置，强迫自己不看整体，只是从一点点的局部画起，最后才构成一个整体。是不是有点难以想象，或者不可思议？但是，如果尝试过，你会发现此方法的效果竟然会出奇地好。因为，每次只专注于一个小局部，把握好相对比例，偏差就不会太大，最后出来的整体效果也肯定八九不离十。这比一下子要掌握大轮廓更容易。</p><p>所以说，同样的技能，是可以运用不同的模式来学习的。只是，不同的技能，某种模式可能会稍微占有优势，至少在刚起步的阶段。而且，每个人习惯使用的思维模式是不一样的。那么，如果能够顺应技能的特点和自己的习惯，自学就很可能事半功倍了。</p><p>前面提到的我自己的第一个工作任务，之所以能那么快完成，是因为我懂得从整体理解代码结构，猜测局部的功能，然后套入自己的需求，只更改相关的部分，来做出自己的页面。相反，如果我深入查看每一个类和方法调用的细节，就会迷失在庞大的代码库，和错综复杂的相互引用之中。</p><p><strong>自学编程，我认为应该从整体到局部，再从局部回到整体</strong>。这两个模式看起来是反着来，但对于编程来说，却又相辅相成。</p><p><strong>只盯着任务细节，没有整体的概念，很容易形成只是按指示工作，不考虑对错，或忽略了其它方面的思考。而只看整体，不深入细节，又会导致知其然，而不知其所以然</strong>。</p><p>那如何才能把握好整体呢？这和我之前写的关于编程学习能力的文章也有关，有兴趣的朋友可以看看：</p><p><a href="http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction/">学习编程需要具备的基本能力 - 抽象</a><br><a href="http://www.thinkingincrowd.me/2016/09/16/Capability-for-Learning-Programming-Breakdown/">学习编程需要具备的基本能力 - 问题分解</a><br><a href="http://www.thinkingincrowd.me/2016/09/17/Capability-for-Learning-Programming-Ask-Wisely/">学习编程需要具备的基本能力 - 正确提问</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近，李笑来写了一本书「&lt;a href=&quot;https://github.com/selfteaching/the-craft-of-selfteaching&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自学是门手艺&lt;/a&gt;」，还开源了。这本书是以学习 P
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>想过哪个习惯对你的伤害最大吗？</title>
    <link href="http://www.thinkingincrowd.me/2019/03/03/which-habit-is-most-harmful-to-you/"/>
    <id>http://www.thinkingincrowd.me/2019/03/03/which-habit-is-most-harmful-to-you/</id>
    <published>2019-03-03T14:48:07.000Z</published>
    <updated>2019-03-03T14:51:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了一个有意思的<a href="https://weibo.com/tv/v/Hj26ueeU3?fid=1034:4345361913823797" target="_blank" rel="noopener">视频</a>。在 UC Berkeley 的 Brian Harvey 教授和学生讲为什么不要作弊：</p><blockquote><p>You guys right now are constructing the person you are going to be for the rest of your life.  Human behavior is mostly a behavior of habit.  People talk as if you make big decisions all the time about what to do but that’s not true.  Almost all the time, you just do what you are in the habit of doing.  If you get in the habit of cutting corners this early in your career, you know, how are you going to make it through the harder upper division classes.  And then what are you going to do when you actually get a job and the person next to you isn’t doing the same thing you are doing?  Okey, you are not able to look over somebody’s shoulder but you are going to be able to find ways to cut corners.  …  And furthermore, what’s the best thing that can come out of cheating, you condemn yourself to a life of doing something you don’t know how to do and don’t like doing.  </p></blockquote><p>翻译过来的大意是：</p><blockquote><p>你们现在正在构建你们的人设。人的行为基本可以说是习惯。人们常认为很多时候都是一些重大的决策的选择而产生不同的后果。其实并不是这样的。多数时候，你只是根据习惯做事。如果你在生涯的早期就习惯于找捷径，那接下来那些更难的课你还怎么过？等你上班后，旁边的人和你做不同东西的时候，你怎么办？你没办法再抄，但你一定会再想办法找捷径。更重要的是，作弊给你带来的最大的好处是什么？是你迫使自己去做一些你不知道如何处理，也不喜欢的事情。</p></blockquote><p>习惯是很微妙的东西。</p><p>要养成一个好习惯，或要摆脱一个坏习惯，都是很难的。</p><p>难，并不是因为好坏。这里的好和坏，总体来说是从当下世俗的角度来看的，并不绝对。以前总说早睡早起好，但是，根据时间生物学的发现，有些人是属于猫头鹰类型，就是不容易早睡，很难强行改变的。难，只是因为这个改变和你的身体规律，或思维方式不一致，甚至是冲突的。  </p><p>一些习惯，它们有比较外显的特性，比如一些日常行为，睡眠，运动习惯等。而<strong>另一些习惯，则非常隐蔽，以至于你可能根本没有发现它们的存在</strong>。可是，<strong>往往却是这些不起眼的习惯，给你的行为，或命运带来很大的影响</strong>。你甚至都不知道很多事情是因为它而导致的。  </p><p>你可能习惯于逃避冲突。</p><p>工作上，你很容易附和他人，尽量避免提出不同的意见。这可能是因为担心由此伤害到你和他人的关系，又或者是自尊心，自卑在作祟。在亲密关系上，同样也会避免和伴侣争吵，很容易陷入僵化的互补性沟通模式。</p><p>你也许习惯于没任何规划，走一步算一步，并没有长远的目标。</p><p>工作上，你就不会有什么野心，要做到什么程度，升到什么职位，甚至连自己想从事什么职业都不知道。生活上，也不会计划一年旅游几次，什么时候买房买车，子女教育，父母养老怎么安排等。</p><p>你或许习惯于躲避困难，而不是迎难而上。</p><p>工作上，不敢接受挑战，只是挑简单的事情来做。感情上，一遇到困难就退缩，分手，没法维持长久的关系。</p><p>这些<strong>习惯，其实是身体，或思维长久以来固化的模式或捷径</strong>。从生物学来看，就是大脑中神经元的连接，使用越多的功能连接越强，用的越少越容易退化。<strong>所谓的舒适区，也就是身体或思维惯有的，抵抗或消耗最小的行动模式而已</strong>。所以，习惯的改变很难的。</p><p><strong>改变习惯的第一步，是留意到它的存在，以及存在的根本原因</strong>。你也许觉得我很可笑，怎么可能没留意到呢？真的可能的。即便你留意到了，可能也只是某一种外显的行为，而不是内在的原因。单单针对行为尝试做出改变，可能治标不治本，或者很容易气馁。尝试观察你要改变的习惯，和它建立关系，了解它，看看你要离开它的话，对你会产生什么影响，工作上或者生活上，有什么可以替代它吗？</p><p>在过去的两三年里，自己对亲密关系的看法和思考，让我真正留意到自己的一些行为和习惯，以及它给我带来的影响。希望未来的日子，我也能更好地摆脱这些坏习惯，改变自己，减少它们对我的影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看到了一个有意思的&lt;a href=&quot;https://weibo.com/tv/v/Hj26ueeU3?fid=1034:4345361913823797&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频&lt;/a&gt;。在 UC Berkeley 的 Bri
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Habit" scheme="http://www.thinkingincrowd.me/tags/Habit/"/>
    
  </entry>
  
  <entry>
    <title>一个人的目标都不容易实现，何况两个人的？</title>
    <link href="http://www.thinkingincrowd.me/2019/01/05/accomplish-two-people-goal-is-difficult-than-your-own/"/>
    <id>http://www.thinkingincrowd.me/2019/01/05/accomplish-two-people-goal-is-difficult-than-your-own/</id>
    <published>2019-01-05T02:33:45.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>新年伊始，你是否已经设下了新的计划，希望迎来新的改变？  </p><p>改变，萌生于现实和理想之间的差距，目标就是向自己认为好的，正确的方向发展，消除不一致。  </p><p>我们经常对自己，或者身边的人发出改变的期望，希望自己，伴侣，或者子女变得更健康，上进，懂事等。  </p><p>可是，这么多年，减肥，锻炼，写作，早起，学英语，这些口号你都喊了多少遍，能坚持下来的有几个？还是说，你的新年愿望是：明年一定要完成今年应该完成的去年没完成的前年的愿望？  </p><p>改变自己已经那么不容易，可我们往往还希望改变他人。  </p><p>我们理所当然地认为，既然我要 Ta 改变，就是因为 Ta 当前的做法或想法和我不一致。如果我们的想法和观点达成一致了，改变就能启动了。所以，我们经常企图说服对方。  </p><p>尤其是在亲密关系里，我们很容易就想改变对方。其实，即便你是被要求改变的一方，很可能你也是在用消极，不配合的方式来默默地期望对方改变，接纳你认可的方式，让对方放弃自己的想法。  </p><p>拿我自己来举例子吧。  </p><p>老婆其实好几年前就想买车。但是，我一直认为那是消耗品，租车也很方便，就一直没同意。她一直想改变我的想法，而我总是没被说服。我也在默默期望她能认同我的观点。我们就这么一直耗着。  </p><p>2018 年底，我终于同意并落实了这件事情了。  </p><p>为什么现在的我又答应了呢？是我改变了吗？并没有。目前为止，我还是觉得，相比坐公司班车，自己开车上下班比较累。要远途出游，还是可以租车。虽然自己有车是便利，但是没有舒服到我需要花大价钱拥有它。  </p><p>我之所以选择了 <strong>「合作」</strong>，是因为<strong>我们的目标其实是一致的：改善生活</strong>。  </p><p>她觉得有了车，可以更常回老家；更容易和朋友结伴出游；偶尔随性的，不需要提前准备和等待的，就可以去某一个地方。这是她认为重要的东西。这是她认为改善生活需要改变的部分。虽然我认为有其它替代买车的选择，但是如果我把赚的钱花在其它我认为是改善生活的地方，家人却不认同，那有什么用呢？  </p><p>既然那些钱都是赚来改善生活的，她得益，我也得益，那不就是实现目标了吗？  </p><ul><li>买车：她爽；我爽（不被唠叨）  </li><li>不买车：她不爽；我不爽（被唠叨）  </li></ul><p>所以，即便还没有被说服，我还是选择合作。改善生活的目标没变，只是手段，或者各自改善的地方不一样而已。  </p><p><strong>包容，求同存异，是爱和维护关系中重要的一部分</strong>。要做到这样，最重要的是看清楚共同的目标是什么。还有，要能平和地看到各自的需求，需要在脑里牢牢地植入这么一个概念：<strong>「我们想法不一样，但是都没有错」</strong>。这个观念非常的重要。如果我们认为对方和我们不同，就是错了，那非常容易就会陷入要说服对方的困境。如果对方也认为自己没有错，那凭什么要 Ta 按照你说的来改变，而你却不能按 Ta 的想法来做呢？  </p><p>我这个理工直男死脑子，可是在听了李松蔚的「洞悉相处之道」课程，和持续看他的一些文章后，才慢慢转过弯来的。  </p><p>所以，当你期望对方改变的时候，先想想你们的共同目标是什么。从目标层面来讨论合作的方式，别急着让对方改变。附上李松蔚的两篇关于改变的文章，让你们看看这个前理工直男的有意思的角度：  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新年伊始，你是否已经设下了新的计划，希望迎来新的改变？  &lt;/p&gt;
&lt;p&gt;改变，萌生于现实和理想之间的差距，目标就是向自己认为好的，正确的方向发展，消除不一致。  &lt;/p&gt;
&lt;p&gt;我们经常对自己，或者身边的人发出改变的期望，希望自己，伴侣，或者子女变得更健康，上进，懂事等。
      
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
  </entry>
  
  <entry>
    <title>别轻易相信他人，或自己给出的理由</title>
    <link href="http://www.thinkingincrowd.me/2018/10/20/do-not-easily-trust-other-or-your-own-reason/"/>
    <id>http://www.thinkingincrowd.me/2018/10/20/do-not-easily-trust-other-or-your-own-reason/</id>
    <published>2018-10-20T07:30:26.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>儿子从三年级开始，就参加了学校的田径队。到了四年级以后，因为学校政策改变，说一般都是三年级，五年级的同学，所以四年级就只剩下他一个被留了下来。  </p><p>一开始我们都很为他刚到自豪，毕竟是唯一一个被承认和留下的队员。他每天也照样早晚训练，偶尔回来说一下今天训练了什么项目，哪里的肌肉疼。  </p><p>突然有一天晚上，他和我们说：“我不想去田径队训练了。你帮我和老师说一下吧。”  </p><p>我们感到很惊讶，问他到底为什么？他说：“太累了。” 我们下意识地想到，国庆回来后他一直感冒流鼻涕，偶尔还有咳嗽，确实可能状态不好。所以，也认可地说：“是啊，最近你身体不好，可能确实会感觉比较累。” “现在你也慢慢康复了，后面可能就好点了。你如果现在就放弃了你喜欢的跑步活动，我觉得有点可惜啊。不如你再坚持一个月看看，怎么样？” 他突然情绪上来说：“我都说了，以后都不去了。” 这下，我们感觉到，辛苦可能并不是真正的原因。  </p><p>她妈妈接着问：“其实是不是你只是想下课后去玩，所以不想跑步了？” “不是！” “是不是补请假的那天，老师批评了你，所以你不想去了？” “不是！” 这个时候，感觉他已经情绪上来了，估计怎么问都没有结果了，也接近睡觉时间，我们就说：“你如果真不想去，明天也必须准时到学校，自己和老师讲清楚。” 睡觉前老婆和我说，昨晚他又去同学家玩到 6 点才回家，被狠批了一顿。  </p><p>第二天，已经接近平时出门训练的时间，他才起床。“不如你今天和老师好好说明一下，说最近感觉太辛苦，可能要退出，看看老师怎么说，或者怎么调整？” “我都说以后都不参加咯，这是我的选择！” “爸爸妈妈感觉都不太清楚你退出的原因，不如你今天先别说，我们周末商量清楚了，如果你还是要退出，周一再和老师说好吗？” “我今天就说！” 不知道是起床气，还是一直延续了昨晚的情绪，真的没辙了。  </p><p>所以，我也只好收拾东西送他去学校。在电动自行车上，我特意骑得很慢，平静地和他又重复了一遍：“爸爸妈妈一直都没有逼迫你做什么事情。我知道你是很喜欢跑步的，你之前都还兴奋地讨论比谁快，比大长腿慢多少，今天又快了两秒，还和我比赛。我觉得你就这么放弃自己喜欢的东西，太可惜了。” “我以后还是可以和你比赛啊。” “我觉得我和妈妈还是不清楚你真正退出的原因。你可以告诉我吗？是不是觉得以前的朋友都不在田径队，下午训练后没时间玩啊？” “是啊”  </p><p>路程很短，很快到学校了，但是还是没法想到对策如何劝他。只好由他去了。回到家，我和老婆说：“可能他真的是觉得没时间和朋友玩，田径队又没有其它认识的伙伴。所以不想去了。”  </p><p>上班后，老婆发来消息，说儿子落下一本书没带，让她送去。去到后，她问他和老师说了没，他说找了一圈没找到。可是，当时老师就在操场一个角落带人训练。就让他马上去说清楚了，结果说了两句就回来了。“老师，我不想训练了” “可以” 这就是对话过程。  </p><p>后来可能中午回家后，老婆又平和地和他讨论这个问题，认可了他的辛苦，和缺少一起训练的小伙伴。也告诉他等五年级后可以和朋友们再参加田径队。结果他还是说不去。老婆不知道怎么地，说了一句：“可能到时又会换训练的老师。”  然后儿子就说：“那就可以再参加。”  </p><p>？？？ 难道真正的原因是他不喜欢这个老师？  </p><p>到现在，我们还是没有搞清楚儿子要退出田径队的最根本的原因是什么，是否还有其它更深层次的原因。但是，老师的原因，目前来看确实是程度最重，压死骆驼的最后一根稻草了。  </p><p>一个人的积极性，是多么容易被他人打击和影响，尤其是有直接关系的权威人士（家长，老师，领导等）。虽然我还是鼓励儿子不要因为他人而放弃了自己的兴趣，但是，我自己上学时，何尝不是因为讨厌一个语文老师而不认真学习语文。  </p><p>我们做的每一个决定，背后都有一个，或者多个理由。口上对他人说的是一个，内心对自己说的是另一个。有时候，我们是故意不让其他人知道真相；有时候，可能连我们自己都被自己骗了。如果不认真反思，久而久之，我们可能都不记得当初的决定，或是放弃是为了什么。很可能就把骗别人的理由，当成真正的理由。自我的认知，很可能就这么失去了。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;儿子从三年级开始，就参加了学校的田径队。到了四年级以后，因为学校政策改变，说一般都是三年级，五年级的同学，所以四年级就只剩下他一个被留了下来。  &lt;/p&gt;
&lt;p&gt;一开始我们都很为他刚到自豪，毕竟是唯一一个被承认和留下的队员。他每天也照样早晚训练，偶尔回来说一下今天训练了什么
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Empathy" scheme="http://www.thinkingincrowd.me/tags/Empathy/"/>
    
  </entry>
  
  <entry>
    <title>那些让你更爱 Elixir 的理由</title>
    <link href="http://www.thinkingincrowd.me/2018/09/20/what-make-you-love-elixir-more/"/>
    <id>http://www.thinkingincrowd.me/2018/09/20/what-make-you-love-elixir-more/</id>
    <published>2018-09-20T00:10:45.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果前面的 <a href="http://www.thinkingincrowd.me/2018/08/21/first-taste-on-elixir/">初尝 Elixir，真的挺好喝的</a> 和 <a href="http://www.thinkingincrowd.me/2018/09/19/programming-language-born-for-distributed-environment/">深入到骨子里的分布式和微服务化编程语言</a> 都还没能让你爱上 Elixir，那我就再补充两个它可以赋予你改造语言能力的特性吧。  </p><h2 id="Meta-Programming"><a href="#Meta-Programming" class="headerlink" title="Meta Programming"></a>Meta Programming</h2><p>Elixir 的元编程能力，拥有和 Lisp 一样的代码即数据的特点。它的方法名，参数和方法体等，能用 List 的数据格式包装起来，传给宏（Macro），再做分析或者扩展。且看 <a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" target="_blank" rel="noopener">Programming Elixir ≥ 1.6</a> 书中很简单的展示代码。  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">My</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">macro</span></span>(param) <span class="keyword">do</span></span><br><span class="line">    IO.inspect param</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">require</span> My</span><br><span class="line"></span><br><span class="line">  My.macro <span class="keyword">do</span></span><br><span class="line">    <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">  else</span><br><span class="line">    <span class="number">3</span> + <span class="number">4</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># =&gt; [</span></span><br><span class="line">      <span class="symbol">do:</span> &#123;<span class="symbol">:+</span>, [<span class="symbol">line:</span> <span class="number">7</span>], [<span class="number">1</span>, <span class="number">2</span>]&#125;,</span><br><span class="line">      <span class="symbol">else:</span> &#123;<span class="symbol">:+</span>, [<span class="symbol">line:</span> <span class="number">9</span>], [<span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><p><code>IO.inspect</code> (类似于 <code>System.out</code> 或者 <code>console.log</code>) 打印出来的就是宏接收到的以 List 格式包装的代码。  </p><p>所以，通过宏（Macro），我们可以动态生成代码，实现 AOP 在方法前后包装自己的逻辑等。比如下面的代码，<code>times_3</code> 和 <code>times_4</code> 就是动态生成的方法。  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Times</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">times_n</span></span>(n) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">unquote</span></span>(<span class="symbol">:<span class="string">"times_<span class="subst">#&#123;n&#125;</span>"</span></span>)(v) <span class="keyword">do</span></span><br><span class="line">        unquote(n) * v</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">require</span> Times</span><br><span class="line"></span><br><span class="line">  Times.times_n(<span class="number">3</span>)</span><br><span class="line">  Times.times_n(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">IO.puts Test.times_3(<span class="number">4</span>)   <span class="comment">#=&gt; 12</span></span><br><span class="line">IO.puts Test.times_4(<span class="number">5</span>)   <span class="comment">#=&gt; 20</span></span><br></pre></td></tr></table></figure><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>“多态”，对于学过面向对象的开发人员来说，应该是一个很熟悉的概念了。单一的接口，不同的类型或实现。  </p><p>在 JAVA 里，如果你想实现“多态”，你必须修改那些类的源代码，让它们都继承某个公共类，或者实现某个统一的接口。假如，你想为第三方的一些“多态”类添加一些行为，但你没办法修改它的源代码，这就比较尴尬了。然后各种幺蛾子的方法都会弄出来。  </p><p>但是，Elixir Protocol 的实现方式，可以让你不必修改对方的源代码的情况下，实现扩展。借 <a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" target="_blank" rel="noopener">Programming Elixir ≥ 1.6</a> 书中的例子来说明一下。  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defprotocol</span> <span class="title">Collection</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@fallback_to_any</span> <span class="keyword">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_collection?</span></span>(value)</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">defimpl</span> <span class="title">Collection</span></span>, <span class="symbol">for:</span> [List, Tuple, BitString, Map] <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_collection?</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="keyword">true</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">defimpl</span> <span class="title">Collection</span></span>, <span class="symbol">for:</span> Any <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_collection?</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="keyword">false</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">Enum.each [<span class="number">1</span>, <span class="number">1.0</span>, [<span class="number">1</span>, <span class="number">2</span>], &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, %&#123;&#125;, <span class="string">"cat"</span>], <span class="keyword">fn</span> value -&gt;</span><br><span class="line">  IO.puts <span class="string">"<span class="subst">#&#123;inspect value&#125;</span>: <span class="subst">#&#123;Collection.is_collection?(value)&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印出来的结果就是：  </span></span><br><span class="line">  </span><br><span class="line"><span class="number">1</span>: <span class="keyword">false</span></span><br><span class="line"><span class="number">1.0</span>: <span class="keyword">false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]: <span class="keyword">true</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;: <span class="keyword">true</span></span><br><span class="line">%&#123;&#125;: <span class="keyword">true</span></span><br><span class="line"><span class="string">"cat"</span>: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>上面就为系统内置的数据类型，定义了一个很简单的 “多态” 函数，检测哪些是属于集合类。嗯，就是这么简洁。  </p><p>Elixir 除了功能强大，学习它还可以给自己一种非常不同的思维方式。如果说 Elixir 有什么不好，那就是周边的人少了点吧，Slack Channel 才 2W 多人，遇到问题找答案可就不是那么容易的事情了。不过，我觉得还是值得的。  </p><p>最后附上 Joe Armstrong 老爷子，Erlang 作者对 Elixir 的第一印象文章 <a href="https://joearms.github.io/published/2013-05-31-a-week-with-elixir.html" target="_blank" rel="noopener">A week with Elixir</a>。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果前面的 &lt;a href=&quot;http://www.thinkingincrowd.me/2018/08/21/first-taste-on-elixir/&quot;&gt;初尝 Elixir，真的挺好喝的&lt;/a&gt; 和 &lt;a href=&quot;http://www.thinkingincrow
      
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Elixir" scheme="http://www.thinkingincrowd.me/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>深入到骨子里的分布式和微服务化编程语言</title>
    <link href="http://www.thinkingincrowd.me/2018/09/19/programming-language-born-for-distributed-environment/"/>
    <id>http://www.thinkingincrowd.me/2018/09/19/programming-language-born-for-distributed-environment/</id>
    <published>2018-09-19T00:30:38.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>分布式和微服务化，已经大行其道很久了。现在很多项目动不动就说做成微服务，不管不顾自己的项目性质，和相应的工具链支持。关于微服务，我还是很喜欢 Martin Fowler 大叔在 <a href="https://martinfowler.com/bliki/MicroservicePremium.html" target="_blank" rel="noopener">MicroservicePremium</a> 里说的：  </p><blockquote><p>my primary guideline would be <strong>don’t even consider microservices unless you have a system that’s too complex to manage as a monolith.</strong>  </p></blockquote><p>微服务最基本，最核心的点是什么？服务切分。一个能很好切分服务的架构师，即便是让他用 Monolith 的方式搭建系统，模块的划分也应该是很清晰的。  </p><p>那么，假如你手上拥有的已经是 JAVA 界当前开发效率最高，开发约定最统一的 Springboot 实现的一个 Monolith 系统，如果要把它分隔为几个独立的服务，你觉得会有多简单？除了复制一些配置，切分新建几个 Application 这些体力活外，模块间的通信方式则可能需要有很大的改变。原来的 Java 代码调用，现在可能要改成 http 接口，grpc 等，即便不需要对外提供服务。  </p><p>在 Elixir 里，如果规划的好，模块的切分一开始就通过 GenServer 等使用消息传递的方式来调用，后期的微服务化简直就是拆一下文件目录就差不多了，并不需要再大费周章改接口，统一数据传输格式等。Elixir 的 Node 节点注册，Process 注册、管理和通信，为打造微服务化和分布式的系统提供非常好的支持。  </p><p>更难得的是，Elixir 坐拥了 Erlang 传承的宝藏，一篮子的工具库，让代码，服务间的调用和监控变得非常容易。这一套工具可以说是历经几十年产品线上磨练的官方套件，不必像其它语言那样到处搜罗组装开源工具，或者自研。  </p><p>比如，我现在只是实现一个计数器，你每次可以向它获取下一个可用的数字，它会一直自增下去。如果你不想每次自增的间隔是 1，那可以设置其它间隔。  </p><p>这么简单的一个应用，可以算是一个微服务了吧？我们还可以怎么把它切分为更细的服务吗？我们还可以把它分成三部分：  </p><ol><li>实现自增，和间隔设置逻辑的业务服务  </li><li>保存数据状态的服务  </li><li>监控这两个服务的 Supervisor 服务，假如业务逻辑出错，负责重启  </li></ol><p>下面这幅图应该基本可以说明整个应用是如何运作的了。  </p><p><img src="https://raw.githubusercontent.com/kenspirit/blog-cdn-data/master/Elixir_Sequence_Server_Demo.png" alt="Elixir Sequence Server Demo">  </p><p>你可以看到，如果我把自增的间隔故意设置为非数字，导致服务意外退出，背后的 Supervisor 服务会将它悄悄的重启，并按照编写好的逻辑，把 Server 的内部状态数据保存到数据服务，以便重启时读取。等我重新设置一个正确的数字自增间隔后，就可以接着获取新的号码了。  </p><p>在 Elixir 的交互控制台 iex 下，敲入 <code>:observer.start()</code> 这个命令，就可以监控整个系统的运行状态，包括有哪些 Application，哪些 Process，Application 内存使用情况，内部数据状态（State）等。  </p><p><img src="https://raw.githubusercontent.com/kenspirit/blog-cdn-data/master/Elixir_Sequence_Server_Hierarchy.png" alt="Elixir Sequence Server Hierchary">  </p><p><img src="https://raw.githubusercontent.com/kenspirit/blog-cdn-data/master/Elixir_Sequence_Server_Info.png" alt="Elixir Sequence Server Info">  </p><p><img src="https://raw.githubusercontent.com/kenspirit/blog-cdn-data/master/Elixir_Sequence_Server_State.png" alt="Elixir Sequence Server State">  </p><p>总的来说，Elixir 的消息调用机制，Application 的组织方式，Process Supervision 和节点的架构方式，丰富的系统工具，真的是从骨子里散发出微服务的光芒。数据的 immutability 更是让分布式数据处理更安心，不用担心一些不必要的多线程问题。  </p><p>Elixir 的作者 José Valim，在 <a href="http://blog.plataformatec.com.br/2015/06/elixir-in-times-of-microservices/" target="_blank" rel="noopener">Elixir in times of microservices</a> 这篇文章中介绍更清楚详细，推荐一读。  </p><p>相关文章：  </p><p><a href="http://www.thinkingincrowd.me/2018/08/21/first-taste-on-elixir/">初尝 Elixir，真的挺好喝的</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式和微服务化，已经大行其道很久了。现在很多项目动不动就说做成微服务，不管不顾自己的项目性质，和相应的工具链支持。关于微服务，我还是很喜欢 Martin Fowler 大叔在 &lt;a href=&quot;https://martinfowler.com/bliki/Microser
      
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Distributed" scheme="http://www.thinkingincrowd.me/tags/Distributed/"/>
    
      <category term="Elixir" scheme="http://www.thinkingincrowd.me/tags/Elixir/"/>
    
      <category term="MicroServices" scheme="http://www.thinkingincrowd.me/tags/MicroServices/"/>
    
  </entry>
  
  <entry>
    <title>真正的责任体现于为何种失败和错误考虑</title>
    <link href="http://www.thinkingincrowd.me/2018/08/29/design-for-failure-reflects-the-greatest-responsibility/"/>
    <id>http://www.thinkingincrowd.me/2018/08/29/design-for-failure-reflects-the-greatest-responsibility/</id>
    <published>2018-08-29T10:15:13.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近滴滴的事情闹的很大，也被骂地很凶。我当然也认为滴滴有错，没有尽到应有的责任。但是，我并不认为关停是好的做法。试想一下，如果是普通的出租车或者黑车出事，有可能那么快抓到人吗？科技和数据是先进的表现，滴滴拥有比出租车把事情做好的更优越的条件，只是它们的关注点没有放在安全上面，甚至是忽略了。  </p><p>本文并不主要讨论滴滴，而是有感于 TK教主（网络信息安全领域大牛）发的微博：  </p><p><img src="https://raw.githubusercontent.com/kenspirit/blog-cdn-data/master/tombkeeper_weibo_safety_system.png" alt="tombkeeper weibo"></p><h2 id="Design-for-Failure"><a href="#Design-for-Failure" class="headerlink" title="Design for Failure"></a>Design for Failure</h2><p>我不记得自己最早什么时候看到关于这个观点的文章或者书了，或许是 Martin Fowler 大叔的这篇关于<a href="https://martinfowler.com/articles/microservices.html#DesignForFailure" target="_blank" rel="noopener">微服务</a>的文章吧。“为了失败而设计”？其实它要表达的意思是<strong>“为应对失败而设计（因为失败无可避免）”</strong>。失败指的是出错，并没有按照预期的方式运转。  </p><p>如果页面打开时 JavaScript 或 CSS 文件加载不成功，或者服务端接口数据出错怎么办？后台定时运行的一个 Job，会不会因出错导致中止运行？假设一条数据处理出错，那会不会影响其它数据的处理？如果因为 Job 有 Bug 要停止运行，数据堆积了一个小时，一天，甚至一个星期，修复后如何重新运行这个 Job，要花多长时间？如果一个服务器 down 了，能马上启用一个新的吗？如果不行，按平时的流量，另一个服务器能撑多久，要不要降级，哪些次要的服务可以暂时关停？  </p><p>无论是前端，还是后端开发，或者是运维等，都可能面对各种失败。<strong>不同的失败场景，有不同的处理方法。而不同的失败场景，也体现了设计者本身的关注点，和职责所在。</strong>  </p><h2 id="Responsibility-for-Failure"><a href="#Responsibility-for-Failure" class="headerlink" title="Responsibility for Failure"></a>Responsibility for Failure</h2><p>一个后端开发人员，主要考虑的是系统功能的失败，如何在发生了故障的情况下依然尽可能正常地提供服务，保障数据的正确性等。他们负责的对象以系统为主。  </p><p>一个前端开发人员，主要考虑的是减少失败场景对用户产生的挫败感，尽可能让用户达成使用产品功能的目标。他们负责的对象以人为主，但主要也是针对用户体验、产品功能。  </p><p>一个安全人员，主要考虑的是系统防护安全的失败，如何在不同的防护层被黑后减少对系统的影响，和保密数据的安全等。他们负责的对象以系统为主。  </p><p>虽然上面举例的一些人还是以系统为主要负责对象，但是，其实系统背后也承担着使用系统的人的利益。  </p><p>保障数据的安全，其实就是保护用户的资产。花功夫在这上面的企业，才是真正重视用户的资产，为他们负最大的责任。所以说，一个人，一个企业为了哪种失败而做出精心的设计和准备，其实体现了他到底是为谁而负责。  </p><p>并不是每个人都能像 TK教主 那样有那么强的安全意识。但是，如果出现多次这样的事情都不能做出有效防护手段，就说不过去了。而滴滴，在接二连三的意外出现后，都没能有效地做出调整，可见用户安全这个场景对他们来说真的没有认真考虑。  </p><p>一个参与创业者，最应该考虑的失败应该是项目失败或者公司面临倒闭。那 Ta 是提前怎么考虑过的？是另寻工作，变卖抵押自己和家庭的资产，还是甚至结束自己的生命？Ta 到底最终为谁负责？  </p><p>对于一个普通人来说，最大的失败可能就是意外死亡，有没有为这个准备好也体现了他是否为家人负责。  </p><p>每一个人都注定面临各种各样的失败，想想你都为哪些做好了准备。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近滴滴的事情闹的很大，也被骂地很凶。我当然也认为滴滴有错，没有尽到应有的责任。但是，我并不认为关停是好的做法。试想一下，如果是普通的出租车或者黑车出事，有可能那么快抓到人吗？科技和数据是先进的表现，滴滴拥有比出租车把事情做好的更优越的条件，只是它们的关注点没有放在安全上面
      
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Responsibility" scheme="http://www.thinkingincrowd.me/tags/Responsibility/"/>
    
  </entry>
  
  <entry>
    <title>初尝 Elixir，真的挺好喝的。</title>
    <link href="http://www.thinkingincrowd.me/2018/08/21/first-taste-on-elixir/"/>
    <id>http://www.thinkingincrowd.me/2018/08/21/first-taste-on-elixir/</id>
    <published>2018-08-21T12:52:46.000Z</published>
    <updated>2019-02-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实，之前从北京回来的时候，我就在考虑学习 Go 还是 Elixir。  </p><p>因为现在很多的区块链项目和 docker 等虚拟技术都是用 Go 语言实现，同时公司用 Hyperledger Fabric 时也要写点 chaincode，所以一开始的时候看了一下 Go。不过，我好像怎么都没法被它吸引起来。可能因为自己是一个并非从写 C 语言成长起来的程序员？  </p><p>自从看了「程序人生」公众号里面的两篇关于 Elixir 的文章，终于忍不住买了一本「<a href="https://pragprog.com/book/elixir16/programming-elixir-1-6" target="_blank" rel="noopener">Programming Elixir ≥ 1.6</a>」来看。一看真的是舍不得放下。除了 Elixir 这门函数式语言本身的特性我很喜欢外，作者的理念和写作风格也是很和我心意。  </p><h2 id="编程就是数据转换"><a href="#编程就是数据转换" class="headerlink" title="编程就是数据转换"></a>编程就是数据转换</h2><blockquote><p>Programming Should Be About Transforming Data</p></blockquote><p>看到书里面的这句话，就已经感觉 Elixir 一定挺对我胃口的，或许自己真的是函数式的忠粉吧。我一直觉得啥都封装成一个对象，真的挺累的。而且，如果你深刻地理解了这句话，数据分析的 ETL（Extract - Transform - Load）是那么地自然，Map/Reduce 分而治之也是很好理解。  </p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>开篇我就被作者颠覆了骨子里的一个最基本的认知：赋值（Assignment）。  </p><p>凡是学过一点点编程的人应该都知道，<code>=</code> 是大多数编程语言的赋值操作符。即便不是这样，也会有类似的一个符号，在它的左边是一个变量，右边是赋值给它的常量，其它变量或一些运算，比如：<code>a = 1</code> 或者 <code>a = max(number_list)</code>。  </p><p>但是，在 Elixir 里面，<code>=</code> 是匹配操作符。  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iex&gt;a = <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">iex&gt;<span class="number">1</span> = a</span><br><span class="line"><span class="number">1</span></span><br><span class="line">iex&gt;<span class="number">2</span> = a</span><br><span class="line">** (MatchError) no match of right hand side <span class="symbol">value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>第一句代码可能让我们认为它是和其它编程语言一样的赋值语句，但是看到后面两句估计就有点懵逼了。这是什么鬼？变量怎么可以在右边？  </p><p>其实，<code>=</code> 在 Elixir 里被成为匹配操作符。它的作用是让 Elixir 去尝试寻找满足 <code>=</code> 号两边相等的情况。而把 <code>a</code> 赋值为 <code>1</code> 就满足这样的条件了。在匹配的时候，Elixir 只可以修改 <code>=</code> 号左边的变量值，而会把右边的变量用它的值来替换。所以，如果没有最开始的 <code>a = 1</code> 那个语句，第二句 <code>1 = a</code> 是会出错的。  </p><p>要改变习惯，转成这种思维方式并不容易。而且，Elixir 的模式匹配还支持比较复杂的形式，比如：  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ken = %&#123; <span class="symbol">name:</span> <span class="string">"Ken"</span>, <span class="symbol">likes:</span> <span class="string">"programming"</span>, <span class="symbol">has:</span> <span class="string">"a wife and a son"</span> &#125;</span><br><span class="line"><span class="keyword">case</span> ken <span class="keyword">do</span></span><br><span class="line">  %&#123; <span class="symbol">likes:</span> something &#125; = person = man -&gt;</span><br><span class="line">    IO.puts <span class="string">"<span class="subst">#&#123;person.name&#125;</span> likes <span class="subst">#&#123;something&#125;</span> and has <span class="subst">#&#123;man.has&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>一开始看到书上有一个类似的例子（<code>= man</code> 那部分是为了在这里说明才加上的）时，我一下子没转过弯，都傻了。啥玩意啊？<code>person</code> 这个变量哪里冒出来的？后来才想到那里的匹配，应该相当于是这样的情况：  </p><p><code>%{ likes: something } = person = man = ken</code></p><h3 id="函数的匹配"><a href="#函数的匹配" class="headerlink" title="函数的匹配"></a>函数的匹配</h3><p>作为一门函数式编程语言，怎么能不提到递归。Elixir 的模式匹配和递归配合起来使用，实在是太爽了。完全不必用到 <code>if else</code> 之流来判断边界值，代码表达得相当优雅。  </p><p>我觉得，递归可以说非常好地体现了 First Principle 原则。只有看透数据处理的本质，才能理解递归。我们来看看书中的一句霸气的话吧：  </p><blockquote><p>L. Peter Deutsch once penned, “To iterate is human, to recurse divine.”</p></blockquote><p>什么意思？“使用遍历的是普通人，能用递归的是神”。  </p><p>递归思想在 Elixir 里面是如此地深入骨髓，连列表也可以表达为：<code>[ head | tail ]</code>。也就是说，一个列表，就是最开头的一个元素，拼上后面的列表。  </p><p>充分了解了这些后，我的感觉和 Dave 在书里表达的一样：  </p><blockquote><p>that’s certainly the way I felt when I first started coding Elixir. The joy of pattern-matching lists in sets of recursive functions drove my designs. After a while, I realized that perhaps I was taking this too far.</p></blockquote><p>好吧，还是先擦一擦口水，来看一个简单的递归和函数的模式匹配吧：  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Recursion</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(<span class="number">0</span>), <span class="symbol">do:</span> <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n), <span class="symbol">do:</span> n + sum(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">IO.puts Recursion.sum(<span class="number">5</span>)  <span class="comment"># =&gt; 15</span></span><br></pre></td></tr></table></figure><p>这个函数计算了某个给定数字之下的所有正整数之和。以上的例子就是计算 <code>5+4+3+2+1+0</code>。  </p><p>能理解上面这个方法的，可以尝试猜一猜下面的程序是干嘛的，我就不解释了。  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Chop</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">match</span></span>(actual, min, max) <span class="keyword">when</span> actual === min <span class="keyword">or</span> actual === max <span class="keyword">do</span></span><br><span class="line">    IO.puts actual</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">match</span></span>(actual, min, max) <span class="keyword">when</span> actual &gt; min <span class="keyword">and</span> actual &lt;= (div(max + min, <span class="number">2</span>)) <span class="keyword">do</span></span><br><span class="line">    IO.puts <span class="string">"Is it <span class="subst">#&#123;(div(max + min, <span class="number">2</span>))&#125;</span>?"</span></span><br><span class="line">    match(actual, min + <span class="number">1</span>, div(max + min, <span class="number">2</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">match</span></span>(actual, min, max) <span class="keyword">when</span> actual &gt; div(max + min, <span class="number">2</span>) <span class="keyword">and</span> actual &lt; max <span class="keyword">do</span></span><br><span class="line">    IO.puts <span class="string">"Is it <span class="subst">#&#123;div(max + min, <span class="number">2</span>)&#125;</span>?"</span></span><br><span class="line">    match(actual, div(max + min, <span class="number">2</span>) + <span class="number">1</span>, max - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">guess</span></span>(actual, <span class="number">_</span>) <span class="keyword">when</span> <span class="keyword">not</span> is_integer(actual) <span class="keyword">do</span></span><br><span class="line">    IO.puts <span class="string">"Guess value <span class="subst">#&#123;actual&#125;</span> is not integer"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">guess</span></span>(actual, min..max) <span class="keyword">when</span> actual &lt; min <span class="keyword">or</span> actual &gt; max <span class="keyword">do</span></span><br><span class="line">    IO.puts <span class="string">"Guess value <span class="subst">#&#123;actual&#125;</span> is out of the range <span class="subst">#&#123;min&#125;</span>..<span class="subst">#&#123;max&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">guess</span></span>(actual, min..max) <span class="keyword">do</span></span><br><span class="line">    match(actual, min, max)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Chop.guess(<span class="number">512</span>, <span class="number">1</span>..<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="完善的工具，和开发规范"><a href="#完善的工具，和开发规范" class="headerlink" title="完善的工具，和开发规范"></a>完善的工具，和开发规范</h2><p>作为一个新兴的小众语言，真没想到它还有非常丰富的辅助工具，包括调试，测试，代码依赖分析，发布管理，服务器监控等。如作者所说，这都是因为 Elixir 继承了 Erlang 的财富，和开发社区对工具的重视。  </p><p>当前我了解的还很少，初步印象深刻的是它的测试功能。它连文档中的代码块都能测试（据说是借鉴 Python 的）。  </p><p>很多程序员都抱怨文档没人写，写了也跟不上代码的变化。Elixir 的这个功能可以比较好地减少这种情况。虽然 JAVA 和 JavaScript 好像也有类似的包，但是都不太完善，也不是官方支持。而且 JAVA 这种以类为基础，动不动还要初始化对象什么的，写起来太累赘了。Elixir 的函数式风格就能很简洁地写出测试的验证代码。  </p><p>它的格式大概是这样：  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@doc</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">提供的 `actual` 是在区间 `min..max` 中的某一个数字，本方法一步步猜测 `actual` 的值是什么。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Example</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  iex&gt; Chop.guess(512, 1..1000)</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">500</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">750</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">626</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">564</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">534</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">519</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span>Is it <span class="number">512</span>?<span class="string">"</span></span><br><span class="line"><span class="string">  "</span><span class="number">512</span><span class="string">"</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span></span>(actual, min..max) <span class="keyword">do</span></span><br><span class="line">  match(actual, min, max)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>另外，Elixir 和 Ruby 差不多，有一定的开发规范可以遵循。这有助于统一风格，提高开发效率。  </p><p>Elixir 更强大的编写并发代码的能力我还没有接触到，但估计更加精彩。所以，我决定今后的 Pet Project 都会从 Node.js 改成 Elixir 来写，并期待能有拿它来写 Serious Project 的机会。  </p><p>有兴趣一起学习的朋友，可以看看我看书后做的<a href="https://github.com/kenspirit/programming-elixir-exercises" target="_blank" rel="noopener">练习题解答</a>。  </p><p>相关文章：  </p><p><a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a><br><a href="http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction.md/">学习编程需要具备的基本能力 - 抽象</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实，之前从北京回来的时候，我就在考虑学习 Go 还是 Elixir。  &lt;/p&gt;
&lt;p&gt;因为现在很多的区块链项目和 docker 等虚拟技术都是用 Go 语言实现，同时公司用 Hyperledger Fabric 时也要写点 chaincode，所以一开始的时候看了一下 
      
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Elixir" scheme="http://www.thinkingincrowd.me/tags/Elixir/"/>
    
  </entry>
  
</feed>
