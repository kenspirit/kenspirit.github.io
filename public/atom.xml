<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking in Crowd / 鹄思乱想</title>
  <subtitle>Swan flying in the immense sky</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2018-01-23T05:10:49.678Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name>鹄思乱想</name>
    <email>chengusky@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to store your secret in Ethereum blockchain</title>
    <link href="http://www.thinkingincrowd.me/2018/01/23/how-to-store-your-secret-in-ethereum-blockchain/"/>
    <id>http://www.thinkingincrowd.me/2018/01/23/how-to-store-your-secret-in-ethereum-blockchain/</id>
    <published>2018-01-23T02:54:10.000Z</published>
    <updated>2018-01-23T05:10:49.678Z</updated>
    
    <content type="html"><![CDATA[<p>I am super excited that my first Ethereum blockchain Dapp product, <a href="http://www.secret-note.one/" target="_blank" rel="external">Decentralized Secret Note</a>, is online today.  It’s pretty straightforward if you are used to make transactions with MetaMask in Ethereum network.  My excitement mainly comes from below two reasons:  </p>
<ol>
<li>As a blockchain believer, I am not the one who only hold some coins, but also make something benefitial for others.  </li>
<li>As a developer, I can learn blockchain development using Smart Contract, IPFS and Web3.  </li>
</ol>
<h2 id="Why-am-I-doing-this"><a href="#Why-am-I-doing-this" class="headerlink" title="Why am I doing this?"></a>Why am I doing this?</h2><p>Being involved in blockchain learning &amp; development is something mysterious to me before.  Lately I finally got a chance to look into it.  </p>
<p>Really learning the blockchain and make something genuinely useful in decentralized scenario is quite difficult.  This idea comes to me because many so-promised life-long storage service can suddenly terminated.  Hence, a publicly accepted blockchain seems a perfect place to put something that you never want to lose.  Your information is never in control of some particular companies.  </p>
<h2 id="Is-it-really-decentralized-and-how-safe-is-my-secret"><a href="#Is-it-really-decentralized-and-how-safe-is-my-secret" class="headerlink" title="Is it really decentralized and how safe is my secret?"></a>Is it really decentralized and how safe is my secret?</h2><p>All your secret notes have their own name/key which are stored in a Smart Contract in Ethereum.  Each of it points to an address in <a href="https://ipfs.io/" target="_blank" rel="external">IPFS</a>, which is a distributed web.  The backbone of this tool is completely decentralized and last forever unless Ethereum and IPFS themselves vanished.  This tool itself is open-source and hosted in Github.  You are freely to make a backup and host yourself if you need further assurance.  </p>
<p>The concern you may have is that the data in public blockchain is viewable by anyone.  However, through normal access, each Ethereum address should only be able to see the note names stored by it.  Even if your notes’ names are revealed, so others can get the address in IPFS, they still cannot see your secret because they are protected by your private key (HTTPS private key, NOT WALLET private key).  And this key should be known by yourself only.  That is why I emphasize that “<strong>IF LOST, NO ONE is able to restore your notes</strong>“.</p>
<h2 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h2><p>The authenctication of using this tool is completely based on <a href="https://metamask.io/" target="_blank" rel="external">MetaMask</a> which is another great Dapp in Ethereum.  Hence, this tool DOES NOT require you to input any password or provide your wallet private key.  And for god’s sake, you should not provide those info to anybody.  </p>
<p>Once you installed MetaMask in any of your favorite browser and connect your account to Ethereum network, you should see similar screen as below.  </p>
<p><img src="./screenshot.png" alt="Screen Shot"></p>
<p>The Ethereum network connected to and what account is currently autenticated are shown at the top of the sreen.  The tool hosted can only be used in Main network as the smart contract is deployed there at <a href="https://etherscan.io/address/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee#code" target="_blank" rel="external">0xb01b98a50781c454c9daa3d43eb5399ff5b604ee</a>.  </p>
<p>Usage steps:  </p>
<ol>
<li>Input your own SSH-generated private key or ad-hoc generate one.  </li>
<li>Backup this private key no matter you decided to remember locally in your browser or not.  </li>
<li>Input note name and content, press Save.  </li>
<li>MetaMask will popup (this might be a little slow) and ask you to confirm the transaction to save your note to Ethereum smart contract.  </li>
<li>You only have to pay Gas for saving data in ETH blockchain.  </li>
<li>Once your transaction is submitted and confirmed, your note will be listed at the right hand side.  </li>
<li>Everytime you login using this ETH account and connected to Main net, you should see all your secrets.  Click on any item to view.  </li>
</ol>
<p><em>Notes: saving &amp; seeing data must have your private key inplace.  Viewing data doesn’t need to pay Gas.  Only changing data requires it.</em></p>
<h2 id="Donation-amp-Encouragement"><a href="#Donation-amp-Encouragement" class="headerlink" title="Donation &amp; Encouragement"></a>Donation &amp; Encouragement</h2><p>Blockchain &amp; Dapp development is really exciting.  I hope this tool can benefit any blockchain enthusiast as you.  </p>
<p>Donation of any ERC20 token to<br><code>0x713C8C77112858A3bd14A5FB380Fa0c4c5b1A8Bd</code> is greatly appreciated.  I wonder what kind of token I can get. ;)</p>
<p>Or send Bitcoin to <code>196XA8S8ZwBu7UNap2A84cLzCAKoPPGck3</code> if you are such a generous rich in blockchain world. :D</p>
<h2 id="For-developer"><a href="#For-developer" class="headerlink" title="For developer"></a>For developer</h2><p>If you are a developer, I think you can easily and freely use the source code in <a href="https://github.com/kenspirit/secret-note" target="_blank" rel="external">Github</a> to use any Test network and store your secret note there.  You have complete control and what is more important is that you do not need to pay real money for it.  Enjoy.  :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am super excited that my first Ethereum blockchain Dapp product, &lt;a href=&quot;http://www.secret-note.one/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Blockchain" scheme="http://www.thinkingincrowd.me/tags/Blockchain/"/>
    
      <category term="Ethereum" scheme="http://www.thinkingincrowd.me/tags/Ethereum/"/>
    
      <category term="Smart Contract" scheme="http://www.thinkingincrowd.me/tags/Smart-Contract/"/>
    
      <category term="IPFS" scheme="http://www.thinkingincrowd.me/tags/IPFS/"/>
    
      <category term="Web3" scheme="http://www.thinkingincrowd.me/tags/Web3/"/>
    
  </entry>
  
  <entry>
    <title>照顾好你自己，和你爱的人</title>
    <link href="http://www.thinkingincrowd.me/2018/01/20/take-good-care-of-yourself-and-the-ones-you-love/"/>
    <id>http://www.thinkingincrowd.me/2018/01/20/take-good-care-of-yourself-and-the-ones-you-love/</id>
    <published>2018-01-20T08:34:02.000Z</published>
    <updated>2018-01-20T13:27:52.351Z</updated>
    
    <content type="html"><![CDATA[<p>上周无聊的时候，又在翻着自己的硬盘看有什么美剧没看过的。在众多没看过的存货里面，也没什么头绪要看什么好，就按字母顺序，看了目录下第一个：「13 Reasons Why」。当然，它的名字也是有那么一点神秘和吸引。  </p>
<p>这个美剧有 13 集，说的是美国一所高中内的一些学生之间的“校园霸凌（bullying）”事件。里面的一些霸凌事件并不是很严重的事情，甚至有些根本算不上事，但是随着一系列事情的发生，女主最后还是选择割腕自杀。  </p>
<p>我们没法说清，到底是哪件霸凌事情导致了这个结果。即便你认为，最后的强暴是压死骆驼的最后一根稻草，但是，如果她有很好的朋友和值得信赖的关系在支持她，可能即便承受如此恶劣的事情，她也能撑过去。  </p>
<p>我以前一直不懂，为什么有些人会自杀，或者有深度抑郁。但是，慢慢地，我觉得那并不是不能理解的事情。并不是说我像武志红那样，曾经体验过和走出来。只是，在更多学习和了解心理学的知识，和一个人在异地的状况，让我更能感受到自己的感觉。以前的我肯定无法想象，我能那样感受到自己的那份孤独感，和允许它在身体流动，然后放纵地哭出来。悲伤并不是一件坏事，哭当然也不是。或许你们还记得迪士尼的那个动画片「头脑特工队」，头脑里的情绪小人忧忧，一开始最不受待见，但是后来却是它治愈了女主。所以，<strong>如果一些情绪没有被发现，接纳和释放，可能真的就会造成严重的后果</strong>。  </p>
<p>当然，仅仅接纳自己的情绪和找方法来释放，可能也不足以解决所有问题。或者说，有时独自一人是很难做到完全释放自己的负面情绪和死亡能量的。「头脑特工队」里的女主，失声痛哭的时候，是得到她父母在身旁的支持。「13 Reasons Why」的女主，最后是一直没有找到任何依靠，才选择自己独自承受和结束。所以说，<strong>稳健的，有支撑性的关系，对个人的心理健康，和面对逆境也非常必要</strong>。  </p>
<p>看这美剧的时候，蝴蝶效应这个词一直出现在我的脑里。人的一生，都是一系列的决定和选择造成的。你无法知道自己的哪一个小错误，最后可能被放大到多少倍而产生严重的后果。你无法知道哪句话，哪个行为，甚至眼神，把你关系中的另一方给推开。一点点地，最后无法挽回。  </p>
<p>当然，你也不可能每做一件事情，就担心这，担心那。只是，如果你一旦发现自己曾经做了错事，<strong>给别人造成伤害，就应该毫不犹豫地诚心道歉和补偿，而不是想当然地让它慢慢淡化</strong>。虽然伤害无法逆转，就像拔掉木板上的钉子也还有留下的伤痕，再也无法回到完好的状态。但是，诚心的回馈和补偿，能为伤痕涂上一层保护层，减轻和防止后续伤害。  </p>
<p>同时，你也可以<strong>更主动去留意你爱的人</strong>，爱人，孩子和父母。他们可能心里默默承受着一些苦楚。如果你能察觉，陪伴在他们身旁，主动问一句“你还好吗？”，“有什么需要帮忙的？”，那些苦楚也许就不会成为无法承受之重。  </p>
<p>2017 已经过去，如果说要做一个年终总结，我可以说，我很庆幸当时决定来北京，并孤独地过了那么长时间。这份孤独，让我成为一个更健全的人。  </p>
<p>踏入 2018 年，按照李笑来的 7 年是一辈子的说法，我已经活了 5 辈子了。当初在「<a href="http://www.thinkingincrowd.me/2015/12/31/2015-retrospect-and-2016-goal-setting/">2015 年总结与展望</a>」的时候说：“希望 2018 年，也就是我的下一个七年，能有一些较明显的转变。” 看来，愿望是在意料之外，也是好的方面达成了。希望这个更健全的人，未来能更好地照顾自己，和他爱的人。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周无聊的时候，又在翻着自己的硬盘看有什么美剧没看过的。在众多没看过的存货里面，也没什么头绪要看什么好，就按字母顺序，看了目录下第一个：「13 Reasons Why」。当然，它的名字也是有那么一点神秘和吸引。  &lt;/p&gt;
&lt;p&gt;这个美剧有 13 集，说的是美国一所高中内的
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Love" scheme="http://www.thinkingincrowd.me/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>数据的一致性只和数据库有关系吗？</title>
    <link href="http://www.thinkingincrowd.me/2017/12/13/is-data-consistency-only-about-db/"/>
    <id>http://www.thinkingincrowd.me/2017/12/13/is-data-consistency-only-about-db/</id>
    <published>2017-12-13T14:13:52.000Z</published>
    <updated>2017-12-13T14:45:24.612Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的 <a href="https://en.wikipedia.org/wiki/ACID" target="_blank" rel="external">ACID</a>，应该所有后端程序员都听说过，也是我们必须了解的知识。ACID 里面的 C 就是 Consistency（一致性）。  </p>
<p>但是，一致性仅仅是 C 吗？从一个普通用户角度来考虑，当然不是。用户角度的一致性，应该是数据库实现了 ACID 后的效果。用现实的例子来说明就是：  </p>
<p>我发起银行转账，不能是我帐号的钱减少了，但是接收方却没收到；不能说银行职员能看到双方的钱是对的，但是用户自己看到的不对；不能说我刚刚看到的帐是对的，另一个时候，或者去另一台机器，或者换另一个方式查就不对了。  </p>
<p>那我们开发人员，是不是只要利用数据库提供的 ACID 特性，就能达到用户想要的效果呢？要注意什么呢？  </p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="关系型，单机"><a href="#关系型，单机" class="headerlink" title="关系型，单机"></a>关系型，单机</h3><p>在单机使用 RDBMS 数据库如 Oracle、MySQL、PostgreSQL 的情况下，数据库本身提供的 ACID 机制，已经能基本保证数据操作后的完整和一致性了。开发人员要做的，只是确保要维持数据一致性的变更操作代码，同在一个 transaction 里面。我刚工作的时候，当时还是用原始的 JDBC 连接 Oracle，还要手动打开关闭数据库 connection 的连接，统一 commit，或者出错后 rollback。现在，Spring 等框架已经能够用 AOP 和 Annotation 的方式来标注 transaction 的范围。  </p>
<h3 id="非关系型，单机"><a href="#非关系型，单机" class="headerlink" title="非关系型，单机"></a>非关系型，单机</h3><p>最近几年流行的 NoSQL，像 MongoDB, Redis，它们的 ACID 就不一样了。它们并不是 ACID compliant 的。MongoDB 的 ACID 是 Document 级别的。也就是说，一个数据操作，只能保证一个 Collection 里面的一个 Document 上的所有数据改动是同时成功和失败。假设一个数据操作涉及多 Document 的变动，比如用了 <code>multi: true</code> 参数，或者更改不同 Collection 的 Document，这些改动都不能保证所有 Document 的更改同时成功，或者同时失败。而 Redis 的 Transaction 就更不一样了。  </p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>在 Monolithic system 里面，数据库多数是单机。即便为了灾备需求，或者支持读写分离，甚至声称异地多活的系统，也只是启用了数据库的主从复制功能（ Master-Slave 模式的 replication ）。一般的主从复制，主库的数据和从库的数据肯定会有延时。即便是使用 Master-Master 和实时同步机制，也有可能有延时，或者数据冲突。如果强制使用更严格的一致性写入确认，如 MongoDB 的 Write Concern 设置为 majority 或者 jornal 的话，数据库的性能又会有很大的影响。  </p>
<p>我这方面的经验不多，而且现在还有像新出的 Google Spanner 这样的全球分布式，同步复制的 NewSQL 数据库，需要更多了解一下。欢迎大家给意见和指正。  </p>
<h2 id="外部组件或系统"><a href="#外部组件或系统" class="headerlink" title="外部组件或系统"></a>外部组件或系统</h2><p>可以看到，仅仅利用数据库提供的 ACID 支持，也不是一定能达到用户想要的一致性效果的。而且，很多时候，一些用户感知的一致性，背后还涉及到数据库以外的系统。  </p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存，可能会是为了解决性能问题，最早引入的组件了。但是，一旦引入缓存，数据的一致性就有可能更容易有偏差，即便是在使用单机服务器的情况下。在文章「<a href="http://www.thinkingincrowd.me/2017/05/02/cache-and-business-characteristics/">业务与缓存</a>」里面，提到的缓存失效和更新的策略，是影响数据一致性的重要因素。  </p>
<h3 id="外部系统"><a href="#外部系统" class="headerlink" title="外部系统"></a>外部系统</h3><p>有些时候，当数据发生改动时，我们还需要通知外部系统，比如，用户注册成功后发送邮件，或短信通知；给用户打款后，发送微信，或短信通知；SOA 架构下，上游系统的数据改变后，需要通知下游系统等。这时候，用户角度的数据一致性，其实还包含了这些外部系统的相应操作，也应该被触发，被体现。内部系统的数据变动，和外部系统的反应，如何能保持一致？能保持一致吗？  </p>
<p>在上一家公司的时候，我们利用 Oracle 的 XA Transaction 支持，来尽量确保数据库的改动，能和 JMS 的消息发送 保持同时成功或者失败。但是，如果数据改动后要发邮件，短信，或微信通知，这些现在没类似的支持，是极有可能无法保持一致的。  </p>
<p>很巧的是，公众号「程序人生」最新的文章「<a href="http://mp.weixin.qq.com/s/zvviHdTpXaeHKLhtGVx26w" target="_blank" rel="external">不要等客户来通知问题</a>」里面的摩拜单车解锁问题，刚好为我提供了一个很好的例子。作者扫码后，单车锁一直没开，但是又认为作者已经成功开锁使用了。所以，它一直不让作者自己操作结束，又不让他重新扫新的单车。最后，要等问题被反应到摩拜开发人员内部，才得以解决。这个状况发生的原因可能是，手机端上传单车开锁指令后，后台的数据状态已经标记为使用状态了，甚至开锁指令都已经下达到自行车上了，但是自行车锁就是没有成功打开。你说，这里数据一致了吗？对系统来说可能勉强算是，但对用户来说就不是了。  </p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然那么多情况可能导致数据的不一致，怎么解决呢？  </p>
<h3 id="恰当的建模"><a href="#恰当的建模" class="headerlink" title="恰当的建模"></a>恰当的建模</h3><p>使用 NoSQL 和 RDBMS 建模的时候，要考虑的因素很不一样。MongoDB 更多是考虑嵌套，冗余，而不是追求更高的范式要求。这在「<a href="http://www.thinkingincrowd.me/2016/11/13/Node-js-Wechat-Web-App-Tutorial-Data-Modeling/">Node.js 微信后台搭建系列 - 数据建模</a>」，「<a href="http://www.thinkingincrowd.me/2017/11/11/model-evolvement-for-a-simple-payment-system/">一个简单的支付业务与模型演变</a>」一文里面也稍微提过。  </p>
<h3 id="两阶段提交（2PC）"><a href="#两阶段提交（2PC）" class="headerlink" title="两阶段提交（2PC）"></a>两阶段提交（2PC）</h3><p>两阶段提交（<a href="https://en.wikipedia.org/wiki/Two-phase_commit_protocol" target="_blank" rel="external">Two-Phase Commit</a>）是一种协议和分布式算法，来协调多操作的原子性。前面说的 Oracle XA Transaction 就是利用 2PC 实现的。MongoDB 里面没有提供多 Document 更改的原子性支持，所以一些场景可以通过在 <a href="https://docs.mongodb.com/manual/tutorial/perform-two-phase-commits/" target="_blank" rel="external">MongoDB 里面用 2PC</a> 来实现多 Document 的 Transaction 确保数据的一致性。但是，在业务复杂的情况下，自己模拟 2PC 还是很麻烦的。  </p>
<h3 id="任务重试"><a href="#任务重试" class="headerlink" title="任务重试"></a>任务重试</h3><p>出错重试，应该是很常见的操作了。但是，重试的处理，有几个地方是要注意的：  </p>
<ul>
<li>幂等原则  </li>
<li>同步还是异步？  </li>
<li>重试次数  </li>
</ul>
<p>出错能否重试，要看这个重试的逻辑是否幂等（Idempotency），或者多次执行都生效的影响到底严不严重。  </p>
<p>先说影响。比如说你的系统支持用户提现，成功后需要发通知。用户设置的通知有微信，短信，和邮件通知（这是有多担心钱被偷）。假设你实现的重试任务代码，负责所有通知（包括微信，短信，邮件等），而不是微信，短信，邮件等有各自的独立任务。那么在发通知的时候，假如第一次发微信的时候失败了，但是短信邮件成功了，这个重试任务如果还是被标记为失败。下次重试的时候，它就会重复发送了一些通知。这个任务多次执行的影响，对用户来说可能很烦，但是不大。  </p>
<p>另一个是幂等。幂等的意思是一个操作如果被多次执行，其结果和第一次执行后是相同的。上面的发通知的例子，如果我们定义结果是能发通知的话，它是幂等的。但是，如果结果是发且仅发一次的话，它就不是幂等了。关于幂等，我以前学 AngularJS 的时候就被自己坑了一次，详情可看「<a href="http://www.thinkingincrowd.me/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/">Expression in AngularJS must be idempotent and for multiple calls</a>」。公众号「嘀嗒嘀嗒」的安姐近期一篇「<a href="https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q" target="_blank" rel="external">每个工程师都应该了解的：聊聊幂等</a>」更详细说明幂等和解决方法，我就不重复了。  </p>
<p>还有一个要考虑的是，选择同步还是异步重试。这取决于业务场景，和出错部分的严重程度。必须一致的关键数据部分出错，要么中止回滚，同时警告用户，要么只能同步重试处理。但是，如果是在 Node.js 这样的单线程服务，可能就不应该重试，或者要严格控制重试次数。要不然，除了当前用户受影响，说不定共用服务的其它用户也遭殃。  </p>
<h3 id="操作顺序"><a href="#操作顺序" class="headerlink" title="操作顺序"></a>操作顺序</h3><p>如果说数据不一致无法完全避免，那如何最大化避免数据不一致，并在出错后有迹可循呢？  </p>
<ul>
<li>先处理出错可能性低的部分  </li>
<li>先内部系统，再外部系统  </li>
<li>先记录操作唯一性，再标记不同状态  </li>
</ul>
<p>假如一个系统允许用户提现到微信零钱，这个系统是 MongoDB 作为后台，并且模型里面有 transaction 这样的流水纪录表，也需要更新用户表 user 里面的余额。应该怎么操作呢？  </p>
<ol>
<li>从用户表 user 中减少提取的额度  </li>
<li>把这个额度记录到 transaction 中的一条包含唯一性的流水记录里，标记处理中  </li>
<li>通过微信 API 通知把提取额度转到用户零钱 </li>
<li>成功后把 transaction 中的流水记录标记成功，否则标记失败  </li>
</ol>
<p>这里涉及 4 步操作。假如每一步都有可能出错，安排 1 和 2 两步在前面是因为同是内部系统，出错可能性低一些。即便第 1 步成功，但是第二步失败，用户的余额还是可以通过 replay transaction 里面所有的收支记录来刷新，或者这里做特定异常处理。  </p>
<p>这里面的第 3 步，是外部系统，涉及网络操作，所以是最有可能出错的。所以第 3 步前必须先有操作记录，而且有唯一性（比如订单号）标识。出错后可以通过此标识，像微信查询该转账操作是否成功。  </p>
<p>最后才更新流水记录的状态，也是为了能保证最终的完整性，和提供异常数据监控的可能。  </p>
<h3 id="异常数据主动监控，补偿"><a href="#异常数据主动监控，补偿" class="headerlink" title="异常数据主动监控，补偿"></a>异常数据主动监控，补偿</h3><p>一般来说，如果所有的操作，都是系统内部触发，那么出错的时候，都应该有记录，并且可以重试。但是，像前面提到的摩拜单车的例子，解锁部分的硬件操作，锁有没有打开这个状态并没有反馈回内部系统，导致不一致的状态已经脱离了内部系统范畴。这就不是重试能解决的了。异常数据的主动监控和补偿就派上用场了。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的 &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ACID&lt;/a&gt;，应该所有后端程序员都听说过，也是我们必须了解的知识。ACID 里面的 C 就是 Consist
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Architecture" scheme="http://www.thinkingincrowd.me/tags/Architecture/"/>
    
      <category term="Distributed" scheme="http://www.thinkingincrowd.me/tags/Distributed/"/>
    
      <category term="ACID" scheme="http://www.thinkingincrowd.me/tags/ACID/"/>
    
      <category term="Consistency" scheme="http://www.thinkingincrowd.me/tags/Consistency/"/>
    
      <category term="Atomicity" scheme="http://www.thinkingincrowd.me/tags/Atomicity/"/>
    
      <category term="Database" scheme="http://www.thinkingincrowd.me/tags/Database/"/>
    
      <category term="Idempotency" scheme="http://www.thinkingincrowd.me/tags/Idempotency/"/>
    
  </entry>
  
  <entry>
    <title>技术人眼中的实业与纯互联网业务差异</title>
    <link href="http://www.thinkingincrowd.me/2017/12/07/business-diff-between-industry-and-internet-from-engineer-pov/"/>
    <id>http://www.thinkingincrowd.me/2017/12/07/business-diff-between-industry-and-internet-from-engineer-pov/</id>
    <published>2017-12-07T10:22:13.000Z</published>
    <updated>2017-12-07T10:32:19.216Z</updated>
    
    <content type="html"><![CDATA[<p>工作那么久以来，前面一大半辈子都是做 J2EE 项目，参与的都是实业企业的业务系统。最近这一两年，接触了互联网产品的开发，我对这两领域的业务差异，以及它们对技术开发人员的影响有更切实的体会。（这里提及的纯互联网，是指不需要和实体行业接轨的领域，比如消息通信，游戏，社交，工具等）  </p>
<h2 id="无论哪个领域，都应了解业务"><a href="#无论哪个领域，都应了解业务" class="headerlink" title="无论哪个领域，都应了解业务"></a>无论哪个领域，都应了解业务</h2><p>我记得很早就有争论，技术人员是否有必要关心和理解业务。技术人员是否只需要深入技术细节，提高开发技能的深度和广度就可以了？  </p>
<p>我的观点是，假如你实现的系统，是和人打交道的，而不是单纯的硬件和机器，那么，你就需要接触业务。因为你做的系统，是人的操作工具，解决他可感知的问题。<strong>理解业务，和其它增值的软技能，如写作、演讲和沟通是一样的。而且，从技术的角度来说，只有你理解了业务，才能很好评估技术难度，并做出合理的系统设计和架构。</strong>  </p>
<ul>
<li><p>「<a href="http://www.thinkingincrowd.me/2017/05/02/cache-and-business-characteristics/">业务与缓存</a>」这篇文章大致介绍了如何结合业务来设计和使用缓存。  </p>
</li>
<li><p>「<a href="http://www.thinkingincrowd.me/2017/11/29/tingting-multi-region-architecture/">听听系统的多地部署改造</a>」这篇文章也举例说明了业务对性能的影响，接口权重取舍，以及任务异步化等。  </p>
</li>
</ul>
<h2 id="业务性质的差异"><a href="#业务性质的差异" class="headerlink" title="业务性质的差异"></a>业务性质的差异</h2><ul>
<li><p>实业企业的业务需求，是为了把实业往系统迁移，以简化流程，保证数据准确性，提升协作能力等目标为主。因为受产业现状约束，调整空间变化不大，功能实现路径相对单一。  </p>
</li>
<li><p>纯互联网的业务需求，即便功能或者要解决的问题类似，实现路径相对多样，发挥的空间较大。  </p>
</li>
</ul>
<h3 id="需求灵活度和空间"><a href="#需求灵活度和空间" class="headerlink" title="需求灵活度和空间"></a>需求灵活度和空间</h3><p><strong>企业系统的需求</strong>来源，小的层面是一线业务执行者，对功能和效率的需求；大的层面是老板对整体业务的规划。一般情况下，企业系统的需求到达开发阶段了，应该已经在业务部门达成共识。<strong>根据业务流程的指引，功能相对明确。但是，缺陷也明显，因为在没有业务流程配合的情况下，系统是没法优化的</strong>。当初我在航运物流公司的时候，曾经参与一些探索性项目。有些想法虽然美好，但是落地很难，因为业务配合很难。  </p>
<p><strong>纯互联网行业就不一样了。功能的探索空间大，需要更多的从人性，心理方面考虑，更容易突破常规做新尝试</strong>。  </p>
<p>比如说，在线直播课程的售票功能，仅仅买卖票吗？要分开提问票和普通票吗？到底是分开，还是不分开好，说不准。知乎 Live 一开始是先买先得，限量。为什么一开始我们听听要设置不同价格的提问票呢？  </p>
<ol>
<li>增加稀缺感  </li>
<li>让主讲人多赚一些钱  </li>
<li>保证问题的质量  </li>
<li>技术权衡。因为我们一开始的直播间，是在微信公众号里面。主讲人只能通过一条网址链接查看留言列表。如果用户发言的数量太多，质量不好，对主讲人是一个挺大的负担。  </li>
</ol>
<p>可是为什么后面又取消了呢？  </p>
<ol>
<li><p>一些主讲人反馈不希望做出区分。因为对于这些提问是否回答，他们是有压力的。即便卖票时已经声明不承诺回答，但是主讲人感觉还是不好。尤其是当一些人故意提问怼主讲人，或者提一些不方便回答的问题时，他们就会更尴尬。  </p>
</li>
<li><p>提问的质量，真的不是给了钱的人，就会好好思考，再提出高质量问题的。  </p>
</li>
<li><p>后来改版后，主讲人同样能在直播间操作，并且实现了协作讲师选取精选留言，和消息限流的功能，发言权限也就放开了。  </p>
</li>
</ol>
<h3 id="有效性评估"><a href="#有效性评估" class="headerlink" title="有效性评估"></a>有效性评估</h3><p>当初在实业企业的时候，我也经常抱怨用户和 BA 怎么经常改需求，还提得那么晚。但是，老实说，实业企业的需求，怎么变都没有互联网那么快。因为，实业的业务流程，涉及既定利益体的协作，是没那么容易变动的。它们制约了需求的可变范围，当然这也是被互联网行业降维打击的原因。  </p>
<p>纯互联网行业约束少，需求更新快，可能让开发更抓狂。机会和风口以来，可能就要马上跟进试探。这个时候，用临时方案，还是设计完整的功能路径，就必须小心考虑了。因为，如果临时的方案多了，就会把系统搞得千疮百孔。但是，假如每个试探的方案都像常规功能那样来设计，不仅可能拖慢进度，还可能最后发现方向不对，废弃成本高。  </p>
<p>我们也吃了这方面的苦头。当初系统实现的工会模式，以及为了让大V节省时间而做的转让直播的功能，后来其实用途不大。但是这两个功能对系统逻辑，开发和测试时间影响还蛮大。  </p>
<p><strong>如何评估一个需求的有效性，精简地设计易扩展的模型，让临时方案的代码侵入性小，以及平衡开发效率，是非常大的问题</strong>。  </p>
<h3 id="责任人确定"><a href="#责任人确定" class="headerlink" title="责任人确定"></a>责任人确定</h3><p>责任人是什么意思？要为什么负责？  </p>
<p>责任人是业务功能的用户吗？可以说是，但也不全是。  </p>
<p>比如说，我们系统最开始有一个心愿单的功能，目的是为了收集用户心仪讲师的讲座或者课程。这功能乍一听很有用，也很快就加上了。但是，后期这些数据是谁看呢？产品？还是运营？怎么看和怎么拿出来分析？这都就是责任人要负责的事情，不是说功能加了就算了。由于责任人前期并没有明确，收集的数据并没有很好地发挥作用，功能最后也砍了。同理，像数据报表，用户反馈等类似的功能，也是需要非常明确地指定责任人的。  </p>
<p><strong>当责任人不清晰的时候，可以说任何开发出来的功能，最后都会被慢慢遗弃。所以，一个功能要不要做，怎么做才好用，首先应该确认责任人是谁。</strong>  </p>
<p>这个问题在实业企业也会发生，但在纯互联网行业更常见，尤其在初创期。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作那么久以来，前面一大半辈子都是做 J2EE 项目，参与的都是实业企业的业务系统。最近这一两年，接触了互联网产品的开发，我对这两领域的业务差异，以及它们对技术开发人员的影响有更切实的体会。（这里提及的纯互联网，是指不需要和实体行业接轨的领域，比如消息通信，游戏，社交，工具
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Business Logic" scheme="http://www.thinkingincrowd.me/tags/Business-Logic/"/>
    
  </entry>
  
  <entry>
    <title>听听系统的多地部署改造</title>
    <link href="http://www.thinkingincrowd.me/2017/11/29/tingting-multi-region-architecture/"/>
    <id>http://www.thinkingincrowd.me/2017/11/29/tingting-multi-region-architecture/</id>
    <published>2017-11-29T00:29:02.000Z</published>
    <updated>2017-11-29T00:07:36.126Z</updated>
    
    <content type="html"><![CDATA[<p>很早就想过写这篇文章了，一直没动手。  </p>
<h2 id="直播系统卡壳"><a href="#直播系统卡壳" class="headerlink" title="直播系统卡壳"></a>直播系统卡壳</h2><p>在一块听听刚上线不久，我们就迎来了一个 6W 人的直播。当天，直播开始时间前后 10 分钟那个区间，系统是真的卡的不行。  用户打不开页面，进不了直播间，老师发言也发不出去。  </p>
<p>当时真的是心急火燎，但是又没有什么能做。真的只能慢慢等时间流逝，压力下来，进直播间的人都稳定了，系统也就平稳了。是什么导致那么狼狈呢？  </p>
<h3 id="时间和规划不足"><a href="#时间和规划不足" class="headerlink" title="时间和规划不足"></a>时间和规划不足</h3><p>整个系统国庆后开始开发，11月12日功能才基本完整上线并迎来第一个直播，这个大直播（12月13日）就来了。这期间还忙着需求开发，没足够时间做性能测试。  </p>
<h3 id="不必要的接口开销多。"><a href="#不必要的接口开销多。" class="headerlink" title="不必要的接口开销多。"></a>不必要的接口开销多。</h3><p>用户有两个途径进入直播间，一个是直达直播间的微信通知的消息链接，另一个是「我的」菜单按钮。当时「我的」个人页面，前端一共调用 4 个接口：  </p>
<ol>
<li>获取用户资料</li>
<li>获取用户发起的直播  </li>
<li>获取用户购买的直播  </li>
<li>获取其它更多相关的直播  </li>
</ol>
<h3 id="频繁查写库，没充分利用缓存"><a href="#频繁查写库，没充分利用缓存" class="headerlink" title="频繁查写库，没充分利用缓存"></a>频繁查写库，没充分利用缓存</h3><p>我们没很好利用缓存。而且，一开始是区分提问和非提问票的。在用户冲入直播间（或者刷新直播间页面）的时候，我们都必须获取用户提问发言次数，看是否已经超出限额。这些操作当时都是直接读写数据库，导致缓慢。  </p>
<h3 id="业务导致网络开销大"><a href="#业务导致网络开销大" class="headerlink" title="业务导致网络开销大"></a>业务导致网络开销大</h3><p>我们当时的直播间做的很实诚，每进退一个人，都在上面显示实时人数。这个人数变动的消息广播，对网络影响相当大。  </p>
<h3 id="不必要实时显示的数据"><a href="#不必要实时显示的数据" class="headerlink" title="不必要实时显示的数据"></a>不必要实时显示的数据</h3><p>我们的直播间还有一个打赏榜，当时的打赏情况实在是火热，很多人频繁刷打赏榜，实时从数据库拉取数据。另一个加重服务压力的方面，用户每进出一次打赏榜就要出直播间和再返回一次，导致更频繁的进入直播间请求。  </p>
<h2 id="优化之路"><a href="#优化之路" class="headerlink" title="优化之路"></a>优化之路</h2><p>经此一役，并听说罗永浩又要来直播（1月16号），量可能更大，我们就迅速准备调整了。  </p>
<h3 id="业务调整"><a href="#业务调整" class="headerlink" title="业务调整"></a>业务调整</h3><p>业务功能，是有可能对性能影响很大的。当然，不是说有了性能问题，就只能调整业务。而是，如何恰当地在业务功能上做出可接受的妥协，使得性能优化更可行。  </p>
<p>曹政公众号的文章也举了类似的例子，搜索引擎的翻页功能。百度最多 49 页，Google 更少，6 页就没了。其实搜索根本没必要支持很多页，因为真正的用户，翻三四页没找到要的信息就会调整关键字了，怎么可能翻上百页。  </p>
<p>我们去除了提问票，就没有必要在进入直播间的时候写数据库了。当然，调整的主要原因不是因为性能，而是产品和业务的考虑。具体原因有机会再分享。假设还是有提问需求，那么，检查提问次数的逻辑，可以调整为前端缓存检查，没太大必要那么严格的在进入直播间的时候，通过后端检查。  </p>
<h3 id="接口控制"><a href="#接口控制" class="headerlink" title="接口控制"></a>接口控制</h3><p>如前面所说，根据页面功能的规划，我们可以确定不同区域的重要程度和降级方案。然后，通过接口动态屏蔽的功能，前端可以在特殊时候减少网络请求。  </p>
<p>前面提到的4个接口，接口1 其实前端可以使用客户端缓存；接口2 只有少数是主讲人的用户才需要；接口4 是非常耗费资源，计算复杂的接口。但是获取其它更多相关的直播，在大直播来临的时候，其实可以完全屏蔽，因为这个时候多数用户关注点不在这里。  </p>
<h3 id="减少网络开销"><a href="#减少网络开销" class="headerlink" title="减少网络开销"></a>减少网络开销</h3><p>面临大规模访问时候，网络数据的大小和频率会非常影响系统稳定性。  </p>
<p>如前面所说，socket 服务器的实时人数的消息广播，真的很占网络资源。后来业务上也觉得这个信息不太需要，也就直接去掉了。去掉了后，Socket 可支撑的同时在线人数马上上去了。  </p>
<p>另一个是进入直播间后 http 服务器返回的数据，也作出精简。只有第一眼用户需要看到的数据，才拿出来。一些其它支持用户其它操作的数据，可以等用户需要的时候，再让前端发请求获取。  </p>
<h3 id="增加缓存，非实时数据异步处理"><a href="#增加缓存，非实时数据异步处理" class="headerlink" title="增加缓存，非实时数据异步处理"></a>增加缓存，非实时数据异步处理</h3><p>打赏榜的数据，在大直播刚开始时，其实并没有太强烈的实时聚合打赏数据排名的要求。所以，后期我们通过异步任务后台聚合，放缓存，前端直接从缓存拿数据。  </p>
<p>除了后端优化，前端方面，我们还可以动态禁止查看打赏榜。进入打赏榜的时候，不再需要离开直播间，而是弹出一个新的层，减少直播间进出的情况，带来不必要的网络请求。  </p>
<h3 id="多地部署，读写分离"><a href="#多地部署，读写分离" class="headerlink" title="多地部署，读写分离"></a>多地部署，读写分离</h3><p>虽然，不是说性能不行，就马上要横向扩展和实现多地架构，但当时青云的北京区服务器，华南，华东一些偏远地区平时访问也有点慢，网络有时还会抽风。多地部署可以让全国不同省市的人，访问最近的服务。而且，罗永浩直播的人数真是不好预估，所以，我们还是担心只有一个区的服务器和网络可能撑不住。  </p>
<p>下面是一开始的服务架构：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/tingting-old-architecture.png" alt="Old Architecture"></p>
<p>因为我们实现多地部署要达成的最基本的目标是：增加缓存，每个分区独立运作，承担各自的压力，互不影响，也就是按区域横向扩展。所以，每个只读的分区，应该要有独立的 Redis，HTTP Server 和 Socket Server。  </p>
<p>增加缓存，多地部署后要面对的最直接的问题是：  </p>
<ul>
<li>什么数据适合放在缓存？  </li>
</ul>
<p>直播详情，用户购买记录等一些高频查询数据，我们都放在缓存里。这个问题在以前的文章「<a href="http://www.thinkingincrowd.me/2017/05/02/cache-and-business-characteristics/">业务与缓存</a>」有更详细的介绍，这里就不重复了。  </p>
<ul>
<li>有数据改动的时候，如何失效各分区的缓存呢？  </li>
</ul>
<p>目前，我们依赖的是 Redis 的 Pub/Sub 机制。主区有新的数据改动的时候，publish 消息到特定的 channel。各个独立分区的 Subscriber 监听到消息通知，就失效掉特定的缓存。  </p>
<p>最后，新的服务架构如下：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/tingting-new-architecture.png" alt="New Architecture"></p>
<p>MongoDB，HTTP Server（写）这些负责写的部分，和 Redis (PubSub) 是公共的，其它部分其实是不同分区独立拥有的相同的组件。我在上面标注主讲人，下面标注普通用户，只是为了容易看一些，它们实际是完全一样的。这样的架构，有需要的时候，复制不同的读分区出来服务不同地区的用户就比较容易了。  </p>
<h2 id="还能做什么？"><a href="#还能做什么？" class="headerlink" title="还能做什么？"></a>还能做什么？</h2><p>现在这个架构，服务器之间的通信还是挺复杂的，网络占用应该还有更多优化空间。当时罗永浩直播刚开始的时候，某些用户还出现了“已经在其它终端登录”的警告而被踢出直播间。可是这个问题一直没时间细查。  </p>
<p>这个架构，其实还不是真正意义的异地多活，和分布式系统，因为数据库和写服务器还是单一的。目前我们做这个的话，成本还是太高。不过，或许以后真的要再一次重构，也应该是服务的细分，SOA 更靠谱一些。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就想过写这篇文章了，一直没动手。  &lt;/p&gt;
&lt;h2 id=&quot;直播系统卡壳&quot;&gt;&lt;a href=&quot;#直播系统卡壳&quot; class=&quot;headerlink&quot; title=&quot;直播系统卡壳&quot;&gt;&lt;/a&gt;直播系统卡壳&lt;/h2&gt;&lt;p&gt;在一块听听刚上线不久，我们就迎来了一个 6W 人的直
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Architecture" scheme="http://www.thinkingincrowd.me/tags/Architecture/"/>
    
      <category term="Cache" scheme="http://www.thinkingincrowd.me/tags/Cache/"/>
    
      <category term="Distributed" scheme="http://www.thinkingincrowd.me/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>硬分叉，可能真的比 ICO 更好</title>
    <link href="http://www.thinkingincrowd.me/2017/11/19/hard-fork-might-really-be-better-than-ico/"/>
    <id>http://www.thinkingincrowd.me/2017/11/19/hard-fork-might-really-be-better-than-ico/</id>
    <published>2017-11-19T06:05:41.000Z</published>
    <updated>2017-11-19T08:23:37.241Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章写作的出发点，其实是因为看了曹政老师的「<a href="https://mp.weixin.qq.com/s/qgRPIGvMK44CvyTxvELDig" target="_blank" rel="external">谈谈比特币分叉</a>」有感而发。或许应该说，因为疑惑为什么一贯克制，客观的他，写出比较主观和动机论的文章。前面一大段是尽可能写的详尽的利益声明。不熟悉我的人，应该看仔细。熟悉的，闲烦可以直接跳后面「为什么」那部分。  </p>
<h2 id="利益声明"><a href="#利益声明" class="headerlink" title="利益声明"></a>利益声明</h2><h3 id="我和比特币的关系"><a href="#我和比特币的关系" class="headerlink" title="我和比特币的关系"></a>我和比特币的关系</h3><p>我几乎从来没有对比特币发过任何评论，甚至我最开始买比特币的时候，我老婆都不知道，而且她还一直让我卖出去，当时我买的时候才 3000 元左右。我和我死党说的时候，他们也不怎么在意。特别是银行的朋友，更是对这种新生的东西心存疑虑。  </p>
<p>当然，坦白说，我没有很深入的去研究它，所以也不是狂热和坚定的粉丝，没有倾家荡产的买它。不像李笑来老师说的，拿法币来换它为主。所以，即便当时我买的时候它那么“便宜”（仅针对当前价格来说，以后不担保），我也还没有实现我的小目标，拥有 10 个比特币。  </p>
<p>我只是一个潜意识觉得它是好东西，但也被现实束缚着的，胆小的人。我从来没有把慢慢积攒回来的 BTC 去交易所炒，只是安安静静的放在自己的钱包，等着给自己以后养老，或者给儿子一点点小遗产吧。  </p>
<h3 id="我和李笑来的关系"><a href="#我和李笑来的关系" class="headerlink" title="我和李笑来的关系"></a>我和李笑来的关系</h3><p>我承认之前一直很欣赏（甚至崇拜，当然现在看东西比较理性了）李笑来，也正因为这样，我公众号开张的<a href="https://mp.weixin.qq.com/s/sJfPB5ShzV8eHQLTpFwduQ" target="_blank" rel="external">第一篇文章</a>（2015 年 11 月），就说是由他的文章促成了我的一些思考，并链接和引用他的文章和话，以及为他的七年就是一辈子社群打广告。  </p>
<p>并且在 2016 年 7 月，我自告奋勇，到了李笑来下面的新生大学工作，当一个「全栈工程师」。这也是他当时被很多业内人嘲笑的时候（虽然我也不太认同当时他那个说法，一年成为全栈）。我也写过一些相关的文章：  </p>
<p>「<a href="http://mp.weixin.qq.com/s/P0uO2gRGroeA3_XN8XEVbg" target="_blank" rel="external">这些年，放下，前行的点滴和感触</a>」<br>「<a href="https://mp.weixin.qq.com/s/AZ0KYUhQ9BzWQDQOPS3QEw" target="_blank" rel="external">怎么样才算得上是全栈</a>」  </p>
<p>目前我是「一块听听」公众号的后端开发者之一。这个项目当时是李笑来和 CTO 提出，并执行。  </p>
<p>我和李笑来有点关系，但也基本只是点头之交多一些，甚至只是老板和员工的关系。我在新生大学的第二年会费，都是自己交的真金白银，而不是以工作人员，需要测试或其它理由，获得会员资格。  </p>
<h3 id="我和曹政的关系"><a href="#我和曹政的关系" class="headerlink" title="我和曹政的关系"></a>我和曹政的关系</h3><p>同样，在我公众号开张的<a href="https://mp.weixin.qq.com/s/sJfPB5ShzV8eHQLTpFwduQ" target="_blank" rel="external">第一篇文章</a>，我就向我的读者，推荐了曹政的公众号。当时我对曹政了解不多，但是订阅没多久，就和大家推荐，并一直把他的置顶。  </p>
<p>虽然订阅了公众号，但自知是赞赏很少的那类人，隐约好像有那么一两次，也是一两元的样子。回头看自己，赞赏比较多的应该是 Fenng 的公众号。  </p>
<p>我的留言也不多，好像有两三次吧。第一次被曹政把留言选为精选，还特高兴。最近也在他的「<a href="https://mp.weixin.qq.com/s/jJ9jOyk--n6EfARLydHGlg" target="_blank" rel="external">关于知识付费，是的，我就是来砸场子的。</a>」留言并表明身份和表示敬佩。  </p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><h3 id="曹政老师的文章主观，动机论"><a href="#曹政老师的文章主观，动机论" class="headerlink" title="曹政老师的文章主观，动机论"></a>曹政老师的文章主观，动机论</h3><p>曹政老师那篇文章前面一部分都没有问题，也很简明扼要的说明比特币的背景，现状和分叉。问题在「但这肯定不是一篇值得十万+的文章，好玩的事情在后面。」后面。  </p>
<p>不容否认，确实有好一些组织，都想参与到 BTC 上面来。既 BCC 后，比特黄金也尝试来分，李笑来也说要主导一个。  </p>
<p>但是，文章里这些阐述个人觉得比较主观，和带有揣测性质。而且还有一些带有偏向性的比喻。  </p>
<blockquote>
<p>这次主导方是由李某来担任主席的super bitcoin团队，听上去很唬人有没有，很像是比特币的核心管理团队有没有。那么，你听说过<strong>全国牙防组</strong>这个名字么？</p>
<p>这个super bitcoin基金会组织，据我所知，（当然，也许我无知，如果有，请打脸）没有参与，也没有资格参与几乎所有关于分叉方案的技术讨论和闭门会议，没有参与任何相关的核心决策和签字。但是现在，他们突然跳出来说，我们要硬分叉。</p>
<p>利益！赤果果的利益！因为他们的硬分叉方案里，除了承诺所有比特币用户会获得1：1的新货币，也就是2100万个新货币外，还会预挖21万个新货币，听上去只有1%哦，好像蛮合理的。你手里凭空多了21万个比特币（BTC）是啥概念？或者，咱们现实点，你手里多了21万个比特现金（BCC）是啥概念，比特现金的最新价格虽然比不了比特币，但也有1000美元哦？</p>
</blockquote>
<p>为什么我觉得上面的质疑是主观的？  </p>
<ol>
<li><p>首先，任何人都可以分叉的。只要你愿意，并且有资金和行动力。但是上面的言论，听起来比较倾向于认可了 BCC，后面的比特黄金，和李笑来的分叉就偏贬低的态度了。  </p>
</li>
<li><p>你如果分叉了，当然要有个名字，BCC，比特黄金，Super Bitcoin，什么都好，分叉的人喜欢就可以了啊？为什么拿全国牙防组来比喻呢？官网也没说是自己是核心团队。起名字真的不能太高调，不能用最字了？而且，他们官网明确写了团队里面有谁，如果他们当骗子，自己的压力还是实名承载了的。BCC 的团队还说是 Decentralized，都不知道是谁，有谁呢。我觉得实名这事，已经很不容易了。  </p>
</li>
<li><p>利益。没有利益谁去分叉。但是为了利益不等于讹诈骗钱。正当商家也是为了追求利益最大化的啊。学过经济学的，应该不会不同意这点。  </p>
</li>
<li><p>预挖新货币。这个目前确实是李笑来这个分叉不同的地方。但是别人的分叉，别人说了算啊。BCC 的紧急难度调整机制也同样被人诟病，这个机制是为了谁的利益可能也不好说。Super Bitcoin 在官网说明了预挖的用途：21万SBTC归基金会管理,主要用于激励早期开发者、投资生态建设、基金会运营。这个我也不觉得有问题，别人如果真的相信这个币以后的价值，自己持有和创业团队拿股份有什么区别？中本聪一开始也自己持有不少比特币啊。  </p>
</li>
<li><p>价格推定。上面一段话的最后，推定 Super Bitcoin 背后可能有的价值。Super Bitcoin 最后能发展成什么样子，真的不好说。BCC 价值 1000 美元，但是比特黄金呢，你们听说过哪个交易所支持了吗？价值多少？这里的推测似乎已经假定 Super Bitcoin 已经可以捞到很多钱了。  </p>
</li>
</ol>
<p>我觉得这篇文章真的不符合曹政以前文章的风格。具体原因是为什么当然我不知道。我也不做任何主观猜测。这里提供两篇曹政老师之前的文章让大家看看：  </p>
<p><a href="http://mp.weixin.qq.com/s/AqfF4Qsoemh8eFUa237Rwg" target="_blank" rel="external">宣泄，还是逻辑</a><br><a href="http://mp.weixin.qq.com/s/ksyyxPg2RyFgs56XrtyKMw" target="_blank" rel="external">再谈大V的套路</a>  </p>
<h3 id="硬分叉，可能真的比-ICO-更好"><a href="#硬分叉，可能真的比-ICO-更好" class="headerlink" title="硬分叉，可能真的比 ICO 更好"></a>硬分叉，可能真的比 ICO 更好</h3><p>为什么我觉得这个更好？  </p>
<p>基于我前面对自己的评价：「我没有很深入的去研究它，所以也不是狂热和坚定的粉丝，没有倾家荡产的买它」。分叉，对于我来说，是平白无故，利益可能最大化的事情。因为我可以突然多了一些其它电子货币。ICO 的话，我还要掏钱去买。  </p>
<p>如果分叉以后任何一个，甚至几个币成功了，我就赚了。  </p>
<p>但是，这里有个前提，就是我们作为普通人，不要太贪心，去炒，去轻易的拿比特币钱包的地址，和私钥去兑换其它分裂出来的币。这样很容易就会遭遇重放攻击。要兑换，也要把币转移到新的钱包后，再用旧的钱包地址去兑换。  </p>
<p>按照 Super Bitcoin 分叉的出发点：Make Bitcoin Great Again。他们是希望在上面加上各种好东西（各位可以上他们简陋的<a href="http://www.supersmartbitcoin.com/index_cn.html" target="_blank" rel="external">官网</a>看看）。纯按逻辑推理说，如果这个币真的那么好，而且很多人相信，那不是很好吗？所以，我不去质疑他是不是真的那么做，我也不去炒，就静静的等着分就可以了。  </p>
<p>而且，说实话，任何电子货币和股票其实也一样。你真正有价值的东西，你任何时候进场，都不会错过的。看你怎么看待它而已。你大可以等待币战尘埃落定，在买或者投资你觉得有价值的币。  </p>
<p><strong>严正声明，本文从来没有什么洗白李笑来，质疑曹政的意图，也不是鼓励大家买 Super Bitcoin 或者任何币。曹政老师的文章还是很有价值，我还是会一直置顶他的公众号。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章写作的出发点，其实是因为看了曹政老师的「&lt;a href=&quot;https://mp.weixin.qq.com/s/qgRPIGvMK44CvyTxvELDig&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谈谈比特币分叉&lt;/a&gt;」有感而发。或许应该说
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="BTC" scheme="http://www.thinkingincrowd.me/tags/BTC/"/>
    
  </entry>
  
  <entry>
    <title>一直改不了，是因为你不了解自己</title>
    <link href="http://www.thinkingincrowd.me/2017/11/19/cannot-change-because-you-donot-really-know-yourself/"/>
    <id>http://www.thinkingincrowd.me/2017/11/19/cannot-change-because-you-donot-really-know-yourself/</id>
    <published>2017-11-19T04:44:27.000Z</published>
    <updated>2017-11-19T04:47:06.644Z</updated>
    
    <content type="html"><![CDATA[<p>现在，我一直在听两个心理学课程。</p>
<p>一个是李松蔚的「洞悉相处之道」。这个课程给我打开了关系层面如何相处和看待一些问题的新视角。我以前从来不会，也没意识到这个问题。它可以说是给了我一次重生吧，所以，我也到处推荐给朋友。李松蔚一开始是学数学的，只是考北大后被调到心理学。他拥有很浓重的理科生范和思维方式，他的一些知乎 Live 举的例子，也很理科化。所以，整个课程给我的感觉，是相对比较理性的看待关系层面的问题。估计这也是一开始吸引我一个理科生的原因吧。大胆猜测，这也是他偏向系统论，系统家庭治疗的原因。  </p>
<p>另一个课程是武志红在得到的心理学课，「拥有一个自己说了算的人生」。他的方向是精神分析，所以一开始就从人的本性出发讲解，包括自恋，性，和攻击性。精神分析由弗洛伊德创立，偏向于潜意识层面的探索和研究。所以，我一开始听的时候，感觉有点观点真不好接受，有些案例的解释，好像也是勉强套入到那三个本性里一样。整体感觉它是偏感性，并且有一些奇幻的色彩。  </p>
<p>从根本上来说，两位老师的课程和观点，都很强调关系的重要性。这也可以说是两门课的核心吧。<strong>人的很多问题都是在关系层面，不能从单一角度来分析</strong>。李松蔚的课偏向理性，从系统，像是从作用力和反作用力的角度来看。武志红的课，偏向于从人的本性，出生后和父母的关系来开始观察和推导。这样的起点，想起来似乎也挺合理的。毕竟一个人从出生开始，最开始的关系就是和养育者的关系，并在其中发展，从一元，二元，到三元。<strong>精神分析里面谈的人的本性，就有点像是经济学里假定人是自私的一样</strong>。  </p>
<p>我觉得我一开始我不太相信精神分析，除了那些感觉比较奇幻的身体感受的例子，和一些解释有点勉强外，很重要的一点是我不确定，性格是否真的在 3 岁或者 6 岁前就定型了。也许，其实是我怕信了这个观点，就杜绝了自己改变的可能，把问题推到原生家庭上。所以，一开始我是比较喜欢李松蔚那个课的。  </p>
<p>后来，听到武志红老师在关系那章所说：“<strong>性格在关系中形成，在关系中展现，在关系中疗愈</strong>” 。当时真是震动了一下，我的一部分性格，即便是小时候的环境造成，但也在关系中逐渐改变。以前的我无法改变，但是未来的我是不受约束的。  </p>
<p>​两边听着听着，慢慢感觉两个角度其实并不冲突，而且很多概念是相通的。  </p>
<p>比如，最近李松蔚的关于「积极赋义」的课程，其实和武志红提到的「人格的对立面」，发现行为背后的积极动力很像。李松蔚在「积极赋义」课程里提到他督导的一个例子，我觉得似乎更像是一个精神分析师可能给出的个案。  </p>
<p>一个一直认为自己比较怂的人，不敢问老板要答应给的奖金。一个心理分析师和他反复理性分析各方面利弊，最后似乎他也觉得自己没什么理由不去，答应了第二天就去。可是，真的有那么简单吗？以前难道从来没人劝说过他？他说有，而且他妈妈从小到大就一直给他各种建议，推着他走。  </p>
<p>所以，松蔚老师觉得，他内心可能还一直在和以前的妈妈喊话，在对抗她。为什么一定要成为妈妈想他成为的样子呢？从松蔚老师的角度来看，他内心的这份对抗，其实是很有力量的，他并不怂。最后，当事人和老师说：“也许他该放下小时候的事了。但是不是现在。等真的放下了，跟心里的母亲取得和解，那个时候他该要的东西都会要回来”。  </p>
<p>有时候，我们只是没有发现自己做某一些事情，或者无法改变的真正原因。<strong>人这种动物，似乎总是需要对任何问题，找到一个让自己相信的解释。并且只有在接受了这个解释之后，才能安心，才可能采取行动，并发生改变</strong>。  </p>
<p>所以，无论是理性，还是从潜意识层面更感性地观察自己，它们只是给我们提供了不同的视角。唯有面对过去，承认，甚至挖掘自我小时候的可能受到的影响，才能真正地看见和认识自己，而不是逃避。相反，不正视自己的内心，问题的根本原因没有找出来，自己想要改变是很难的。最重要的是，无论是什么原因，都要相信自己能改变。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在，我一直在听两个心理学课程。&lt;/p&gt;
&lt;p&gt;一个是李松蔚的「洞悉相处之道」。这个课程给我打开了关系层面如何相处和看待一些问题的新视角。我以前从来不会，也没意识到这个问题。它可以说是给了我一次重生吧，所以，我也到处推荐给朋友。李松蔚一开始是学数学的，只是考北大后被调到心理
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Change" scheme="http://www.thinkingincrowd.me/tags/Change/"/>
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的支付业务与模型演变</title>
    <link href="http://www.thinkingincrowd.me/2017/11/11/model-evolvement-for-a-simple-payment-system/"/>
    <id>http://www.thinkingincrowd.me/2017/11/11/model-evolvement-for-a-simple-payment-system/</id>
    <published>2017-11-11T13:42:28.000Z</published>
    <updated>2017-11-11T14:05:18.773Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 Eric Evans 的 <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1" target="_blank" rel="external">Domain Driven Design - Tackling Complexity in the Heart of Software</a> 这本书。为了能更深入理解里面的概念，我大致捋了一下最近做的系统里支付模块的演变，希望等不断深入这本书后再重新审视一下目前的设计，看如何改进。  </p>
<p>之前写教程 <a href="http://www.thinkingincrowd.me/2016/11/13/Node-js-Wechat-Web-App-Tutorial-Data-Modeling/">Node.js 微信后台搭建系列 - 数据建模</a> 的时候，一些同学对建模没什么概念。希望这篇文章也能让编程初学者初步理解如何建模，如何随着业务的改变而调整模型。  </p>
<p>下面的一些模型图，和字段名称，我觉得它们的命名应该能表达清楚它们的用途了吧？我就不逐个字段解释了。这里也只是列出最主要的信息而已。一些辅助的，系统流程控制的字段和业务关系不大，主要是取决于实现的方式，也就不列出来了。  </p>
<h2 id="原始阶段"><a href="#原始阶段" class="headerlink" title="原始阶段"></a>原始阶段</h2><p>在我们的系统刚开始实现的时候，由于业务比较简单，支付模块实现的比较简单：  </p>
<ol>
<li><p>微信和我们系统按 T+1 来结算。所以，我们也是直播结束后第二天就把收入拨给主讲人。  </p>
</li>
<li><p>直接在用户表里用 balance 字段表示账户余额。  </p>
</li>
<li><p>只有一个 payments 表。这个表揉合了基本的订单信息，和支付状态信息。  </p>
</li>
</ol>
<p>这样设计的其它考虑是：  </p>
<p>第一，我们并没有普通电商平台那样的购物车，和订单流程。用户如果遇到心仪的课程，他只需要点击购买，支付，然后就可以在他的已购列表看到刚购买的课程了。  </p>
<p>第二，我们用的是 MongoDB。MongoDB 没有 transaction 和 join 的概念。如果把订单和支付信息切分到不同的 collection，操作会变复杂，并还有可能由于操作或数据库错误导致数据不完整。  </p>
<p>所以，最开始的支付模块模型大致如下图。后台有定时 Job 用来计算主讲人收入，和他的各个直播收益的。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/payment-module-design-phase-1.png" alt="Payment Modeling Phase 1"></p>
<h2 id="冻结部分收益"><a href="#冻结部分收益" class="headerlink" title="冻结部分收益"></a>冻结部分收益</h2><p>到了第二个阶段，出现了一些问题需要我们面对：  </p>
<ol>
<li><p>因为我们售卖的是虚拟商品，微信把我们系统的到帐改为 T+15 了。  </p>
</li>
<li><p>随着直播数的增加，和主讲人资质的放宽，单纯靠运营人员人工根据直播情况来把控主讲人的提现需求越加困难。  </p>
</li>
</ol>
<p>业务上我们也相应要做出调整：  </p>
<ol>
<li><p>主讲人的每一个直播，首笔收益到帐时间为直播结束后 15 天。之后用户的每一笔支付，也延后 15 天才能到帐。  </p>
</li>
<li><p>由于主讲人收入到帐时间大为延长，为了让主讲人更清晰了解他的收入情况，我们为主讲人提供每天收入明细，展示每个直播冻结中，和已经结算的收益情况。  </p>
</li>
</ol>
<p>因此，原来的模型扩展为如下的情况：  </p>
<ol>
<li><p>添加了 <code>transactions</code> collection。它的作用是存放每天聚合了的 <code>payments</code> 数据，为主讲人提供每天收入明细，并记录哪些收益还在冻结中，哪些可以释放出来。  </p>
</li>
<li><p><code>users</code> 和 <code>products</code> 加上 <code>frozenProfit</code> 和 <code>totalProfit</code>。这两个字段都是从 <code>transactions</code> 里面的数据演算得出的。  </p>
</li>
</ol>
<p><img src="http://thinkingincrowd.u.qiniudn.com/payment-module-design-phase-2.png" alt="Payment Modeling Phase 2"></p>
<h2 id="分销"><a href="#分销" class="headerlink" title="分销"></a>分销</h2><p>某一天，CTO 和我说，我们需要实现分销的功能。就这么一句话，你们觉得怎么做？要几天？模型需要改吗？  </p>
<p>模型肯定要变了。为什么？因为不仅仅是直播商品的拥有人，其它的用户都有可能拥有收入。那么，收益相关的数据 <code>frozenProfit</code>, <code>totalProfit</code> 也就不能简单地附着在商品数据，也就是 <code>products</code> collection 里面了。  </p>
<p>所以，我抽出新的 <code>revenue_summary</code> collection 来存放每个用户在某个商品上能获取的收益，和收入来源。当然，<code>products</code> 里的相应字段也就不需要了。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/payment-module-design-phase-3.png" alt="Payment Modeling Phase 3"></p>
<h2 id="多商户商品打包"><a href="#多商户商品打包" class="headerlink" title="多商户商品打包"></a>多商户商品打包</h2><p>随后，我们又支持了多商户商品打包售卖的需求。  </p>
<p>身为一个平台，在搞活动的时候，我们需要打包优惠出售多个商户的商品。虽然说上面的模型也能基本满足要求，不需要太大的变动也能支持，但是，这种商品的收入计算逻辑，因为涉及多方收入分配，更为复杂，我们觉得还是要做出一些调整。  </p>
<p>我们新增加了一个 <code>payment_instructions</code> collection。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/payment-module-design-phase-4.png" alt="Payment Modeling Phase 4"></p>
<p>这个模型有什么用呢？  </p>
<p>其实，以前每一笔用户支付给我们的买课程的费用，都被分成好几部分：  </p>
<ol>
<li>微信手续费  </li>
<li>分销渠道费用（如果有的话）  </li>
<li>主讲人分成  </li>
<li>平台分成  </li>
</ol>
<p>除主讲人分成那部分费用之前有明确记录外（因为需要展示给用户看），其它部分其实都隐含在 Job 的收益计算逻辑里面。虽然说我们可以根据每一笔支付费用的总额，协定分成比等数据计算出其它部分，但是当我们想做数据统计，和对账的时候，就比较麻烦了。所以，现在每一笔费用，在成功处理后，我们把帐目明细都记录下来。  </p>
<p>通过这样的调整，今后的数据统计和对账问题得以解决。而且，作为一个商城，以后如果我们还需要拓展积分，钱包余额支付等功能也更方便清晰。  </p>
<p>目前这个支付模块还是有点简陋的，再学习怎么优化吧。AirBnB 的支付系统也是面对各种现实问题后不断演进，有兴趣朋友可以看看它们的 Medium <a href="https://medium.com/airbnb-engineering/scaling-airbnbs-payment-platform-43ebfc99b324" target="_blank" rel="external">文章</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看 Eric Evans 的 &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1&quot; target=&quot;_bl
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Design" scheme="http://www.thinkingincrowd.me/tags/Design/"/>
    
      <category term="Data Modeling" scheme="http://www.thinkingincrowd.me/tags/Data-Modeling/"/>
    
      <category term="DDD" scheme="http://www.thinkingincrowd.me/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>怎样可以不用再写接口文档</title>
    <link href="http://www.thinkingincrowd.me/2017/10/28/no-need-to-write-api-doc-anymore/"/>
    <id>http://www.thinkingincrowd.me/2017/10/28/no-need-to-write-api-doc-anymore/</id>
    <published>2017-10-28T15:03:24.000Z</published>
    <updated>2017-11-22T15:11:36.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码如文档"><a href="#代码如文档" class="headerlink" title="代码如文档"></a>代码如文档</h2><p>绝大多数的程序员，其实都不喜欢写文档。即便是一开始写了文档，随着时间的推移，需求的变更，文档很多情况下都慢慢跟不上变化，最后腐烂变质。看文档还不如看代码。</p>
<p>所以，如何维护文档在软件工程一直都是大问题。  后来，有人提出了一种观点：“让你的代码成为文档”。什么意思？如果你竟然还没听说过这个概念，可以看看 <a href="https://en.wikipedia.org/wiki/Self-documenting_code" target="_blank" rel="external">Wiki</a> 或者 Martin Fowler 的<a href="https://www.martinfowler.com/bliki/CodeAsDocumentation.html" target="_blank" rel="external">文章</a>看看：</p>
<h2 id="接口-vs-契约"><a href="#接口-vs-契约" class="headerlink" title="接口 vs 契约"></a>接口 vs 契约</h2><p>从毕业以来，我做的项目都是前后端一条龙通杀的，从最开始的 vanilla-js，公司内部框架，jQuery, 到 ExtJs。不过，现在很多公司都前后端分离了，前端专职页面，后端提供接口，各司其职。</p>
<p>这种情况下，尤其在大公司里，API 接口文档在合作和沟通层面起非常大的作用。一个好的 API 接口，除了要有良好的命名，统一的风格这样的基本要求外，它接收的参数（数量，格式，限制等），返回值，权限等是更需要关注和保持更新的讯息。一旦这些讯息发生改变，前后端不同步，某个系统功能可能就挂了。所以说，接口文档就是前后端合作契约的说法一点也不夸张。</p>
<h2 id="代码生成文档"><a href="#代码生成文档" class="headerlink" title="代码生成文档"></a>代码生成文档</h2><p>去年 3 月份，我看到陈天在公众号「程序人生」（programmer_life）的文章「<a href="https://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;mid=402114651&amp;idx=1&amp;sn=a7b891f532e29b73afd83f17ae071023&amp;scene=21#wechat_redirect" target="_blank" rel="external">再谈 API 的撰写 - 契约</a>」，很对胃口。我后面就按这样的思路在自己写的 Node.js boilerplate 里面设计了特定的接口定义和编写方式，也在现在的公司一直使用。所有的 HTTP API 都是通过编写描述式的 JSON 来定义的。文档也通过读取这些 JSON 定义来生成。每当接口契约改变，文档就更新了。</p>
<p>那是怎么自动生成的呢？有兴趣的朋友，可以看看我的 Github Repo <a href="https://github.com/kenspirit/joi-route-to-swagger" target="_blank" rel="external">joi-route-to-swagger</a>：</p>
<p>Repo 里面的 README 阐述了基本的理念和用法。更详细的思路，大家还是看陈天的「<a href="https://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;mid=402114651&amp;idx=1&amp;sn=a7b891f532e29b73afd83f17ae071023&amp;scene=21#wechat_redirect" target="_blank" rel="external">再谈 API 的撰写 - 契约</a>」吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码如文档&quot;&gt;&lt;a href=&quot;#代码如文档&quot; class=&quot;headerlink&quot; title=&quot;代码如文档&quot;&gt;&lt;/a&gt;代码如文档&lt;/h2&gt;&lt;p&gt;绝大多数的程序员，其实都不喜欢写文档。即便是一开始写了文档，随着时间的推移，需求的变更，文档很多情况下都慢慢跟不上变
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="API" scheme="http://www.thinkingincrowd.me/tags/API/"/>
    
      <category term="Swagger" scheme="http://www.thinkingincrowd.me/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 微信集成</title>
    <link href="http://www.thinkingincrowd.me/2017/07/30/Node-js-Wechat-Web-App-Tutorial-Wechat-Integration/"/>
    <id>http://www.thinkingincrowd.me/2017/07/30/Node-js-Wechat-Web-App-Tutorial-Wechat-Integration/</id>
    <published>2017-07-30T15:30:57.000Z</published>
    <updated>2017-12-07T10:32:07.436Z</updated>
    
    <content type="html"><![CDATA[<p>终于基本到了最后的一步了。微信集成主要包含三个部分：  </p>
<ol>
<li>接入验证，让微信确认你的服务器，就是你公众号的拥有人。  </li>
<li>接收微信给你服务器的消息。  </li>
<li>发送消息给微信服务器，让它转发给你公众号的关注者。  </li>
</ol>
<p>公众号的基本开发，微信的官方文档「<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1472017492_58YV5" target="_blank" rel="external">入门指南</a>」其实已经基本包含所有必须要知道的知识。但是，它的文档是以 Python 为例子，还有一些比较看起来吓死人的流程图，技术细节，和一些个人号没法开通的功能介绍。所以，这篇教程是侧重于个人公众号如何用 JavaScript 来开发实现。  </p>
<h2 id="接入验证"><a href="#接入验证" class="headerlink" title="接入验证"></a>接入验证</h2><p>怎么<a href="https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&amp;lang=zh_CN" target="_blank" rel="external">申请微信个人公众号</a>，我就不说了。个人只能申请订阅号。  </p>
<p>申请成功后，登录，点击左边菜单栏下面的「开发」-&gt;「基本配置」，可以看到如下页面：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/11-wechat-setup.png" alt="Wechat Setup"></p>
<p>先把 <code>开发者ID(AppID)</code> 和 <code>开发者密码(AppSecret)</code> 分别复制出来，保存在一边。<code>令牌(Token)</code> 是自己定的不让别人知道的字符串。下面我们来看看系统里如何配置，接入微信。  </p>
<p>打开命令行，进入你的项目目录，然后输入以下命令：  </p>
<p><code>yo evergrow:wechat</code>  </p>
<p>它会提醒你是否要覆盖 <code>package.json</code> 文件，你可以输入 <code>d</code>，按 <code>Enter</code> 看有什么变动。其实只是新加一些必要的包，所以你输入 <code>Y</code>，然后覆盖就可以了。正常的话，操作后会如下图那样，新生成几个微信相关的文件。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/11-wechat-module-generation.png" alt="Wechat Module Generation"></p>
<p>打开 <code>config/wechat/sample.js</code> 文件，内容如下：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  appToken: <span class="string">'evergrow'</span>,</div><div class="line">  appId: <span class="string">''</span>,</div><div class="line">  appSecret: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你要做的是，复制 <code>sample.js</code> 文件，重命名为 <code>production.js</code>，然后把前面保存的 <code>开发者ID(AppID)</code> 和 <code>开发者密码(AppSecret)</code> 分别赋值给 <code>appId</code> 和 <code>appSecret</code>。<code>appToken</code> 不用理会。<strong>appToken 和 appSecret 可不要让别人知道！</strong>以我的为例：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  appToken: <span class="string">'mytoken'</span>, <span class="comment">// 自己定义，</span></div><div class="line">  appId: <span class="string">'wxe5284a1d0aa6b9fb'</span>,</div><div class="line">  appSecret: <span class="string">'asldgjoieadgkladlj'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置完了以后，你就可以部署到服务器上面了。  </p>
<p>确定你的服务器已经启动后，你就可以在微信「启用」你的服务器了。服务器的 URL 就填你的服务器地址(或 IP)，加上我们微信集成模块的路由 <code>/wechat</code>，比如： <code>http://www.mydomain.com/wechat/</code>。  </p>
<h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><p>启用后大概要过三五分钟可能才会生效。然后，如果你发一段文字给你的公众号，你的服务器会打印出接受到的消息内容。  </p>
<h3 id="文字消息"><a href="#文字消息" class="headerlink" title="文字消息"></a>文字消息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ToUserName: <span class="string">'gh_1bfda0ee00eb'</span>,</div><div class="line">  FromUserName: <span class="string">'oZQ1dwRfxWyDpRjBNBS5DcltOAU4'</span>, <span class="comment">// 发消息给你的用户的 openid</span></div><div class="line">  CreateTime: <span class="string">'1501422823'</span>,</div><div class="line">  MsgType: <span class="string">'text'</span>,</div><div class="line">  Content: <span class="string">'Hello'</span>,</div><div class="line">  MsgId: <span class="string">'6448561922693293780'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关注公众号的消息"><a href="#关注公众号的消息" class="headerlink" title="关注公众号的消息"></a>关注公众号的消息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ToUserName: <span class="string">'gh_1bfda0ee00eb'</span>,</div><div class="line">  FromUserName: <span class="string">'oZQ1dwRfxWyDpRjBNBS5DcltOAU4'</span>, <span class="comment">// 关注者的 openid</span></div><div class="line">  CreateTime: <span class="string">'1501423109'</span>,</div><div class="line">  MsgType: <span class="string">'event'</span>,</div><div class="line">  Event: <span class="string">'subscribe'</span>,</div><div class="line">  EventKey: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="图片消息"><a href="#图片消息" class="headerlink" title="图片消息"></a>图片消息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ToUserName: <span class="string">'gh_1bfda0ee00eb'</span>,</div><div class="line">  FromUserName: <span class="string">'oZQ1dwRfxWyDpRjBNBS5DcltOAU4'</span>,</div><div class="line">  CreateTime: <span class="string">'1501423196'</span>,</div><div class="line">  MsgType: <span class="string">'image'</span>,</div><div class="line">  PicUrl: <span class="string">'http://mmbiz.qpic.cn/mmbiz_jpg/zQibzicfvUiciaoqcE4kibLSnIvGs2SI0g5zHSnUQFeXvom1SHLEAHK8csInU7jXodQaG1ScxibfwkSG7MEK09xyukTQ/0'</span>,</div><div class="line">  MsgId: <span class="string">'6448563524716095218'</span>,</div><div class="line">  MediaId: <span class="string">'t-4AThjfL-GK2vbKh3XRX9go-DE-Z3hvHNFwA9Bb2Ep_xUK5r13eYlJqsD8FLqqw'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>知道了上面几大类型的消息格式，我们就可以做一些东西了。  </p>
<p>微信消息的接收和处理，都在 <code>wechat/wechat-controller.js</code> 里面的 <code>wechatMsg</code> 方法里处理就可以了。它默认生成的代码是这样的：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.wechatMsg = WechatManager.getWechatRouter(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// 微信输入信息都在req.weixin上</span></div><div class="line">  <span class="keyword">var</span> message = req.weixin</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line"></div><div class="line">  res.reply(<span class="string">''</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="关注自动回复"><a href="#关注自动回复" class="headerlink" title="关注自动回复"></a>关注自动回复</h3><p>如果要在用户关注后自动回复，我们可以在上面的方法里加如下的代码：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="built_in">module</span>.exports.wechatMsg = WechatManager.getWechatRouter(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// 微信输入信息都在req.weixin上</span></div><div class="line">    <span class="keyword">var</span> message = req.weixin</div><div class="line">    <span class="built_in">console</span>.log(message);</div><div class="line"></div><div class="line">    <span class="comment">// 自动回复处理</span></div><div class="line">    <span class="keyword">if</span> (message.MsgType === <span class="string">'event'</span> &amp;&amp; message.Event === <span class="string">'subscribe'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> res.reply(<span class="string">`非常感谢你的关注。点击菜单栏的 “历史文章” 可查看我精心分类的文章列表。</span></div><div class="line"></div><div class="line">儿子，丈夫，父亲，程序员。每一个标签，都是对我的一个要求。在这里，所有的文字都用心创作，记录了我在每一个标签下逐渐成长的经历和思考。希望某一篇文章，甚至某一句话，能与你产生共鸣。</div><div class="line"></div><div class="line">&lt;a href="http://mp.weixin.qq.com/mp/homepage?__biz=MzI0NDEwMDk2NQ==&amp;hid=1&amp;sn=b1cd332c53a573ea36c4a71e19f47539#wechat_redirect"&gt;历史文章&lt;/a&gt;`)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.reply(<span class="string">''</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p><em>因为启用自己的服务器后，自定义菜单功能就没有了，我只能在关注自动回复加链接去我的历史文章页了（哭）。</em></p>
<h3 id="回复用户发来的图片"><a href="#回复用户发来的图片" class="headerlink" title="回复用户发来的图片"></a>回复用户发来的图片</h3><p>如果我们想直接把用户发给我们的图片回复回去，我们可以这样做：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.wechatMsg = WechatManager.getWechatRouter(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// 微信输入信息都在req.weixin上</span></div><div class="line">  <span class="keyword">var</span> message = req.weixin</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line"></div><div class="line">  <span class="comment">// 自动回复用户发来的图片</span></div><div class="line">  <span class="keyword">if</span> (message.MsgType === <span class="string">'image'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> res.reply(&#123;</div><div class="line">      type: <span class="string">'image'</span>,</div><div class="line">      content: &#123;</div><div class="line">        mediaId: message.MediaId <span class="comment">// 用回微信告诉我们的用户发来的图片 MediaId</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  res.reply(<span class="string">''</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>有了这些基础，你可以按自己的需求，来实现其它自动回复的功能。下一章我们再看如何结合之前的系统，随机抽取系统接收的其它用户发来的图片，而不是返回自己当前发来图片。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于基本到了最后的一步了。微信集成主要包含三个部分：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接入验证，让微信确认你的服务器，就是你公众号的拥有人。  &lt;/li&gt;
&lt;li&gt;接收微信给你服务器的消息。  &lt;/li&gt;
&lt;li&gt;发送消息给微信服务器，让它转发给你公众号的关注者。  &lt;/li
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="MVC" scheme="http://www.thinkingincrowd.me/tags/MVC/"/>
    
      <category term="Integration" scheme="http://www.thinkingincrowd.me/tags/Integration/"/>
    
  </entry>
  
  <entry>
    <title>教育的在线化转变</title>
    <link href="http://www.thinkingincrowd.me/2017/07/30/online-shift-of-education/"/>
    <id>http://www.thinkingincrowd.me/2017/07/30/online-shift-of-education/</id>
    <published>2017-07-30T02:04:08.000Z</published>
    <updated>2017-07-30T02:05:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>教育从古至今在人们心里的景象都是正襟危坐的学子拥簇在台上的彬彬学者的周围，认认真真地听讲和笔记。教育是一件很严肃的事情，按规定的时间，完成规定的计划。  </p>
<p>但是，随着 MOOC（Massive Open Online Course/大规模开放在线课堂）的发展，教育的形式变得越来越多样化。世界上任何一个角落的人，可以按自己的喜好，根据自己的时间和节奏，选择各大名校名师制作的课程来免费学习，或者仅仅只需要少量的费用。  </p>
<h2 id="学生角色的转变"><a href="#学生角色的转变" class="headerlink" title="学生角色的转变"></a>学生角色的转变</h2><p>充足的资源和课程，形式的多样化和触手可及，让本来热爱学习的人无比兴奋。美好的时代，全民学习的时代，看似要到来。但是，不少网络课程，其实真正的完课率都很低。由于缺乏监督，参与者只要放下鼠标，关了网页，就可以轻易的离开了，也不会有人责备。参与零门槛，放弃更是随心所欲。而且，很多网络课程，充其量只是把课程视频化，然后放到网上，最多加一个论坛而已。  </p>
<p><strong>在线课程带来的转变，不是教学形式，更重要是学习者角色的转变。学习者更多的从被动灌输者向主动获取者转变，同时第三方的监督变得更少。</strong>这其实是一种很重要的，名为“翻转教室”的理念。  </p>
<p>但是，这里存在一个矛盾。  </p>
<p>不像娱乐和游戏，学习的性质本身是有点反人类的。很多人，都不是因为喜欢某个东西而去学习，而是因为生存需要，或者被长辈逼着去学。那如果以后的教育反而要求学习者角色转变，需更多地自我驱动，怎么办？  </p>
<h2 id="内容的转变"><a href="#内容的转变" class="headerlink" title="内容的转变"></a>内容的转变</h2><p>网络上绝大多数的课程，一般都需要花两三个月，每天 2 小时左右的时间和心思，才能真正习得里面包含的内容。如前所说，这种需要靠强大的自我驱动能力来实现的学习方式，很少人能做到。  </p>
<p>但是，面对大量的免费课程铺天盖地的出现，自己又没法坚持，再加上“知识变现”，“终身学习”的口号最近火遍全国，很多人的焦虑感便油然而生。  </p>
<p>那怎么办？大餐既然吃不来，快餐应运而生。许许多多“碎片化学习”的内容和平台犹如雨后春笋。由于只要通过少至短短 15 分钟，多至一小时的音频和直播，就能亲耳听到某个领域大V传授的“真经”，人们对于这种形式的知识分享和学习，更是趋之若鹜。  </p>
<p>不过，最近出现一种论调，被收割“智商税”，见「<a href="https://zhuanlan.zhihu.com/p/27838814" target="_blank" rel="external">知识付费这两年，我花5000元买的4个教训</a>」。我看过后写下一些感想：「<a href="http://www.thinkingincrowd.me/2017/07/16/you-are-paiding-intellectual-tax-because/">是否被收割智商税，取决于你的智商</a>」。我的观点是：<strong>碎片化，和深度的学习，完全不应该互相抵触，而应该是互补</strong>。  </p>
<h2 id="目前的平台"><a href="#目前的平台" class="headerlink" title="目前的平台"></a>目前的平台</h2><p>得到，千聊，知乎 live，十点课堂，荔枝微课，一块听听，分答，知乎问答等提供不同形式的问答，直播，语音课程等碎片化学习的内容。  </p>
<p>网易云课堂，慕课网等 MOOC 类平台提供深度学习的内容。  </p>
<p>小密圈，饭团提供知识工作者社群运营平台。  </p>
<p>小鹅通，有赞提供商城，和工具服务。  </p>
<p>在整个知识传播，学习的流程，上面的平台几乎涵盖了所有的环节了。工具类平台面向的是知识分享者为主，对学习者一般不可见。知识分享者一般先提供碎片化内容作为先导课，使之起宣传和传播的作用，再把用户引流到小密圈，微信，饭团等进一步锁定和圈住用户，甚至到 MOOC 平台深入学习。  </p>
<p>虽然说上面的平台各有侧重，但是都基本无法避免地向大而全的知识商铺靠近，卖直播，卖课程，卖电子书，卖礼品卡等。但是，以后的平台真的要分碎片化学习的，和深度学习，和独立的社群吗？  </p>
<h2 id="未来的猜想"><a href="#未来的猜想" class="headerlink" title="未来的猜想"></a>未来的猜想</h2><p>教育除了是内容提供商，其实还是服务提供商。</p>
<p>教育行业最重要的资本，首先肯定是讲师。作为内容提供商的平台，就像学校，都拼命想拉住各种V在自己平台不走。可是，除了「得到」伺候的那些顶级大V，和其它平台的少量独家，多数的大中小V都在各个平台撒网，哪里有好处去哪蹭流量，再导流去他们自己的微信公众号或社群。  </p>
<p>能沉淀和筛选优质的讲师是每个平台的愿望，但是不可能每个平台都像「得到」那样去辅助讲师精品化课程和推广，成本太高，因为不是所有的讲师都值这个价。但是，学习就只能跟着大V吗？相比只是在大教室里面的芸芸众生，如果能在小而精的环境，跟到一个也不错的老师，有更多的互动，把自己带入门，是不是就可以了？<strong>以前的大班教学，到现在的小班教学，是否同样适用于互联网？而且，在线学习和培训，定位我觉得就应该主要是入门，而非精进，因为精进需要更专注的投入，实践，和交流。</strong>  </p>
<p>现在的社群，虽然说提供了互动的平台。但是，现在多数的社群，很多人都是冲着IP去的。参加者只是希望能和他们更接近，获取内幕或捷径。很少的群是真的能针对某个领域的主题，为持续学习和成长而存在的，入了群而什么都不干的大有人在。真正的互动平台，应该基于各领域，更有针对性。  </p>
<p>我觉得，<strong>未来的教育，应该会垂直化，全功能型</strong>。为什么呢？  </p>
<p><strong>垂直化为优质老师的提供和持续输出提供动力。每一个领域的学习，背后肯定都有其动机。无论是学习者，还是提供者。</strong>目前来看，学习者的动机还是比较功利，多数为了就职。领域的垂直化，比如编程领域，可以让大公司提供专门的领域培训人员，因为本来它们内部本来就有培训体系。参与者可以非常接近未来的适用场景来学习，讲师也是在该领域不断精进的人。而且，如果能集结不同企业，提供统一的培训大纲，一方面能增加讲师和助教的人数，另一方面，培训完成的学员，直接可以进入同领域的企业。这样就能接受系统化的最贴近行业的培训，而不像是我们落后的高校课程或线下培训班。  </p>
<p>举编程的例子是因为每个培训行业，学习和提供服务的动机很重要。虽然现在鼓动人人都应该学习编程，我以前也这么想，但是现在慢慢觉得，有需求的，还是就职。虽然未来更多的需要用编程思维来解决问题，但是可能不需要自己去学编程，应该是利用合适的工具，甚至是支付费用请人帮忙。有寻找信息，工具，组合使用的能力可能就够了。  </p>
<p><strong>另一个领域垂直化的好处是，根据不同课程的性质，平台提供不同的形态和服务内容。</strong>比如说，编程类提供在线编辑器，代码托管，部署等。音乐绘画等艺术类，可上传作品，点评。心理学类，甚至可以旁听心理咨询师的咨询案例。这样的服务形态就会非常的丰满和有效，学习效果更好，而不仅仅是一个社群。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教育从古至今在人们心里的景象都是正襟危坐的学子拥簇在台上的彬彬学者的周围，认认真真地听讲和笔记。教育是一件很严肃的事情，按规定的时间，完成规定的计划。  &lt;/p&gt;
&lt;p&gt;但是，随着 MOOC（Massive Open Online Course/大规模开放在线课堂）的发展，
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Learning" scheme="http://www.thinkingincrowd.me/tags/Learning/"/>
    
      <category term="Online" scheme="http://www.thinkingincrowd.me/tags/Online/"/>
    
      <category term="Education" scheme="http://www.thinkingincrowd.me/tags/Education/"/>
    
  </entry>
  
  <entry>
    <title>没有孤独一生，我自己都觉得奇怪</title>
    <link href="http://www.thinkingincrowd.me/2017/07/22/still-suprised-by-not-single-seeing-on-what-I-said-in-the-relationship/"/>
    <id>http://www.thinkingincrowd.me/2017/07/22/still-suprised-by-not-single-seeing-on-what-I-said-in-the-relationship/</id>
    <published>2017-07-22T00:20:57.000Z</published>
    <updated>2017-11-19T04:47:27.172Z</updated>
    
    <content type="html"><![CDATA[<p>书读了，懂了，但和会运用，真的是两码事。最近我不是在读心理学，亲密关系相关的课程嘛。有些道理好像都懂，但是昨晚又栽倒在最简单的事情上。能讨到老婆，可能还真是因为帅。  </p>
<p>昨晚和老婆的对话是这样的：  </p>
<p>老婆：哎，剪了个头发，好难看，还说是总监…想杀人  </p>
<p>我：你好像去过两次被所谓的总监理发，然后都不好看  </p>
<p>老婆：尚艺  </p>
<p>我：你上次那次剪得不好看的，是不是就是尚艺的？  </p>
<p>老婆：~…就不能说句话来安慰一下吗，总是挑这样的问题干嘛呢，把我以前剪的不好的记录都挑出来。  </p>
<p>我：我不是这样的意思。我只是说印象中剪得不好也是尚艺，那下次就别去那了吧？其实你以前说你剪的不好的时候，我觉得都不是太差啊。。。（省略一些）  </p>
<p>老婆：上次我觉得还可以啊，也是在尚艺。普通的理发师，我发现你总是记一些不好的记录，不想跟你说了  </p>
<p>我：是吗？我经常记得不好的记录？我觉得是有时你剪的稍微不那么好看，你就比较强调的和我说。你觉得印象中哪次剪的比较好看啊？  </p>
<p>现在回过头来看，我自己都看不下去了，真的是找打的节奏。看出问题的朋友就把你们笑出的眼泪抹一下吧。看不出来的，我还是分析一下吧，免得你们没有我帅，那真的要孤独一生了。  </p>
<blockquote>
<p>你好像去过两次被所谓的总监理发，然后都不好看</p>
</blockquote>
<p>这里有点隐含的责备：“怎么你老是去找所谓的总监，又还要说剪的不好看。自己找的麻烦”。可是，你傻啊，就像我们自己奔品牌买的东西，以为好用，回头被老婆一顿训，说哪里哪里不好用，其实自己心里也是委屈的不行啊。  </p>
<blockquote>
<p>你上次那次剪得不好看的，是不是就是尚艺的？</p>
</blockquote>
<p>再一次挑衅。里面的潜台词是：“没长记性”</p>
<blockquote>
<p>其实你以前说你剪的不好的时候，我觉得都不是太差啊。。。</p>
</blockquote>
<p>潜台词是在否定对方的情绪，自己作而已。其实我们很容易用这种方式说话，以为在安慰人，其实别人会更生气。  </p>
<blockquote>
<p>是吗？我经常记得不好的记录？我觉得是有时你剪的稍微不那么好看，你就比较强调的和我说。你觉得印象中哪次剪的比较好看啊？  </p>
</blockquote>
<p>我这里在辩解。但是是把责任推到对方上，说对方强调才让自己那么经常记得。你们是不是说找抽啊？谁他妈还记得上次剪得比较好看是什么时候，还能拿出证据来？  </p>
<p>我也是被自己气的不行了。所以说没单身，真是不知道上辈子积多少德了。  </p>
<p>一早起来刚好也看到即刻推的「槽值」公众号的「<a href="https://mp.weixin.qq.com/s?__biz=MzIzNDAxNjkxOA==&amp;mid=2650572006&amp;idx=1&amp;sn=71085222cf0f9348775304fd8a27b561&amp;scene=21#wechat_redirect" target="_blank" rel="external">这样聊天，活该单身一辈子</a>」，里面说的更详细，大家可以看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书读了，懂了，但和会运用，真的是两码事。最近我不是在读心理学，亲密关系相关的课程嘛。有些道理好像都懂，但是昨晚又栽倒在最简单的事情上。能讨到老婆，可能还真是因为帅。  &lt;/p&gt;
&lt;p&gt;昨晚和老婆的对话是这样的：  &lt;/p&gt;
&lt;p&gt;老婆：哎，剪了个头发，好难看，还说是总监…想
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Communication" scheme="http://www.thinkingincrowd.me/tags/Communication/"/>
    
      <category term="Empathy" scheme="http://www.thinkingincrowd.me/tags/Empathy/"/>
    
      <category term="Emotion" scheme="http://www.thinkingincrowd.me/tags/Emotion/"/>
    
  </entry>
  
  <entry>
    <title>是否被收割智商税，取决于你的智商</title>
    <link href="http://www.thinkingincrowd.me/2017/07/16/you-are-paiding-intellectual-tax-because/"/>
    <id>http://www.thinkingincrowd.me/2017/07/16/you-are-paiding-intellectual-tax-because/</id>
    <published>2017-07-16T04:20:24.000Z</published>
    <updated>2017-07-16T07:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在的社会，特别喜欢造新的词。知识变现，碎片化学习可是最近知识化浪潮的产物。  </p>
<p>可是知识从来都是需要钱才能获得的啊，上学，买书，参加培训，甚至看个展览，哪样不是作者用他的知识来变现？当然，知识越来越便宜了是真相，也无法避免，以至于现在可以用少于一顿饭的价格，买一本书，听一个在线讲座。  </p>
<p>信息的泛滥，低廉的价格，极其便利的付费方式，膨胀了的焦虑感，终于刮起来知识变现这股潮流。  </p>
<p>碎片化学习承担了当前知识变现的主打形式。当然，很多人对这种形式不屑一顾，甚至讽刺其实质为一些人收割智商税的形式而已。这种论调一部分客观原因是太多滥竽充数的人和东拼西凑的内容。不过更重要的是一种认为碎片化学习不是真正的学习的偏见。  </p>
<p><strong>那些听了一些在线讲座，买了一些课程，但是觉得没什么收益，被作者收割了智商税，认为碎片化学习就无法深入学习的人，他们本身的逻辑就有问题</strong>。因为其实这些人从结果（没深入学习）反过来推导原因（碎片化是不对的）。更重要的是，他们的态度和出发点就完全错误。  </p>
<p>先不说沉浸式学习是否能真的深入掌握知识和技能（比如我们以前在学校的学习），难道你们没听过各个领域的大家，在坐公交的时候，甚至饭堂吃饭的时候，也在看书，这些不是碎片化学习？  </p>
<p><strong>用碎片化的时间来学习，不是碎片化学习。妄想在碎片化的时间稍微学习和听到一些捷径就能有成果，才是被收智商税和碎片化的原因。</strong></p>
<p>我们得承认，借着知识变现的浪潮，浑水摸鱼，滥竽充数的人实在是太多。鱼龙混杂，特别是标题党横行的情况下，仅仅凭借着用各种话术编造的吸引人的话题，还有一些难验真假的头衔来判断一些直播和分享是否值得参与是很困难的。但是，我们就要因噎废食吗？这其实和你不小心被包装和封面骗买的一本烂书有区别吗？  </p>
<p>为什么说那些认为自己被收智商税的人，是自己的态度和出发点有问题？他们觉得那些大道理，对他来说其实都不知道听过了多少遍了，不能立竿见影，不实际。有的人说还不如买本什么经典的书来看。可是问题是，有些人就是不知道这些概念，有些人也是从这些讲座里才听到书籍的推荐。对于这些人来说，这些课程和直播的内容就是值得的。对于那些说听过了不知道多少次的人来说，活该被收智商税，因为他们从来不实践，而是一次次的寻找捷径。  </p>
<p>所有这些线上的直播和课程，可以说都只是引子，只是师傅领入门的东西。修行肯定是需要靠自己再花费更大的功夫来深入的。如果抱着探索的态度，怎么会认为自己被收智商税呢？听了不好的就当买了本烂书。况且，心态正确的人，很少被标题党的东西吸引。  </p>
<p><strong>如果线上的课程都是引子，那用碎片化的时间来学习这些内容，真的一点收益都没有吗？不是，恰恰相反。</strong>正是因为它们是入门级的介绍，碎片化的时间才更有效和容易吸收。我今年听了好一些关于心理学，亲密关系的知乎 Live 和其它课程，如 Momself 公众号的「换个角度，洞悉相处之道」，就觉得非常值得。每集大概 10 分钟的内容，讲解简单易懂的概念，启发个人的思考，让我更容易地理解这个领域大致的学习框架。<strong>这对于以后自己探索如何深入有非常大的帮助。</strong>薛兆丰老师在得到的「北大经济学课」，也是朝着为听众搭建完整和正确的经济学框架目标出发的，没一节课后都提出问题，鼓励思考。只要认真参与的，怎么可能没有收获？  </p>
<p>你被收割智商税了吗？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的社会，特别喜欢造新的词。知识变现，碎片化学习可是最近知识化浪潮的产物。  &lt;/p&gt;
&lt;p&gt;可是知识从来都是需要钱才能获得的啊，上学，买书，参加培训，甚至看个展览，哪样不是作者用他的知识来变现？当然，知识越来越便宜了是真相，也无法避免，以至于现在可以用少于一顿饭的价格，
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Learning" scheme="http://www.thinkingincrowd.me/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>指责，只会让你爱的人越来越远</title>
    <link href="http://www.thinkingincrowd.me/2017/07/08/criticism-will-only-pushing-your-loved-one-further-and-further/"/>
    <id>http://www.thinkingincrowd.me/2017/07/08/criticism-will-only-pushing-your-loved-one-further-and-further/</id>
    <published>2017-07-08T14:06:31.000Z</published>
    <updated>2017-11-19T04:47:36.159Z</updated>
    
    <content type="html"><![CDATA[<p>估计每个人都听过这样一句话：“责之心，爱之切”。这是很多父母在训斥子女时，经常引用的话。当然，更现代的表述是：“我还不是为了你好？” 这句话一说出来，是站在了多高的道德高地啊，听的人很多时候真的无力反驳。  </p>
<p>可是，斥责真的是会让你爱的人变得更好吗？变成一个更优秀的人？还是你想他们成为的样子？  </p>
<p>真的不一定。甚至可能反作用，让他离你越来越远，成为你讨厌的人。  </p>
<p>最近在看 John Gottman 博士那本著名的「the Seven Principles of Making Marriage Work」，他通过一个建立在 Seattle 的 Love Lab（爱情实验室）来观察一些夫妻在他们的房子里度过一个周末时的情况，来研究婚姻成功的关键因素。他说通过观察一对夫妻的谈话，可能仅仅需要 15 分钟，就能预测他们的婚姻成功与否，正确率高达 91%。  </p>
<p>Gottman 博士解释他如何通过观察夫妻对话来判断和预测他们的婚姻最终是否会步向失败，甚至是离婚的。  </p>
<h2 id="严厉的开端"><a href="#严厉的开端" class="headerlink" title="严厉的开端"></a>严厉的开端</h2><p>当我们把自己的 “爱之切” 通过言语释放出来时，<strong>很多时候我们都是在向对方提出要求。这种要求其实内里包含了不满，所以，它经常以斥责的形态出现。</strong>这样的话，对话的开端，要么是严厉的斥责，要么在埋怨。“你就不能帮忙做一下家务吗？只知道看电脑，玩手机！” “你这么笨手笨脚的，还是等我来了。还指望你帮忙，别添乱了。” 根据 Gottman 博士的观察和统计，对话前 5 分钟的基调，基本可以决定最后的结果。<strong>如果一开头是以斥责开始，即便中间对方有一些示好，缓和的尝试，96% 的概率还是会最后不欢而散。</strong>  </p>
<p>一旦对话以严厉的口吻和基调开始，负面的交互也就非常容易接着发生。这些交互被 Gottman 博士总结为「Four Horsemen of the Apocalypse」，也就是启示录中的四骑士，传统上被解释为瘟疫、战争、饥荒和死亡。如果这四骑士持续出现，基本上可以断定婚姻可持续的可能性就比较低了。我们来看看它们是什么。  </p>
<h3 id="批评指责"><a href="#批评指责" class="headerlink" title="批评指责"></a>批评指责</h3><p>正如前面所说，我们总会有所抱怨的。但是，稍有不慎，抱怨就会转变成杀伤力更大的批评指责。  </p>
<p>上面我举的两个例句，其实就是<strong>批评指责</strong>。为什么？因为它们<strong>通常包含了“总是”，“从不”，“只知道”等全局范围的词语，并且带上人身攻击</strong>，如“笨手笨脚”。如果只是抱怨，可以通过稍微柔和，和具体一些的方式，比如：“我下班回来都累死了，现在还要忙着做饭，你能不能别看手机，帮忙晾衣服。” 这种<strong>既表达了个人的情绪，但是同时只限定在当前的情景，并给出明确的指示的抱怨，其实就比指责好很多，抵触也比较小</strong>。  </p>
<h3 id="蔑视"><a href="#蔑视" class="headerlink" title="蔑视"></a>蔑视</h3><p><strong>蔑视的出现其实代表个人心中觉得某种程度的优越感，自己比他人某方面更好，更优秀</strong>。我们每个人都有自己的优点和缺点，但是，如果你在亲密关系中，用这种优越感给对方施压，其实是很危险的。  </p>
<p>我们其实真的不容易察觉到自己在蔑视对方。但是，冷嘲热讽、挖苦、嘲笑、翻白眼、反问其实都是蔑视的形式。有时我察觉到我和家人教训儿子的时候，如果使用到了一些反问的语句，他会变得更暴躁，更不容易接受我们的意见。比如说，我们经常会说和听到的句子：“你XXX不就行了吗？”，“说得好像你做得到似的，你做给我看看？”</p>
<p>挑衅其实也是蔑视的一种。“我就是不XXX，怎么样？” 这类型的语句，话说我也从我儿子的话里了不少。我也不知道他哪里学来的，可能是他气着老妈后，被老妈这么怼过吧。  </p>
<p><strong>蔑视给对方的感觉会产生对你的厌恶感。所以，在这种感觉下，你怎么能期望对方听你的话，接受你的建议？</strong>  </p>
<h3 id="辩解"><a href="#辩解" class="headerlink" title="辩解"></a>辩解</h3><p>在对方的一些质疑情况下，另一方很容易会辩解。当然，有时候其实 Ta 说的是实情，在解释具体的原因，并不是在敷衍。但是质疑方一般在争吵情况下都不会接受解释，尤其是那些名副其实的辩解经典 “为什么你老是挑我的刺？做的好的时候不见你表扬一下？还有完没完？”  </p>
<p>因为，<strong>辩解其实表达的意思是：“错不在我，而是你”</strong>。所以，根据 Gottman 博士的调查，辩解很少凑效，反而更容易激起对方的怒火。  </p>
<h3 id="冷战"><a href="#冷战" class="headerlink" title="冷战"></a>冷战</h3><p>冷战，是当前面那些火爆的争吵升级后，导致某一方转身离开，以不回应表示回应。  </p>
<p>根据调查表示，<strong>男性充当冷战方的发起者居多。冷战和逃避其实是一个人因为心理上和身体上感受到无法承受的持续性的压力后的自我保护行为。某一方越是经常感觉到对方施加的压力，就越是警觉和担心任何可能导致对方发飙的事情，也越容易冷战。</strong>  </p>
<p>为什么说男人基本是冷战发起者居多呢？Gottman 博士说这其实是人类进化以来的结果。在面对冲突的情况下，心跳，血压，肾上腺素都会急剧升高。你的伴侣会很自然的进入战斗状态，导致 Ta 不去关注问题本身和理性的思考，而是要么迎战，要么逃跑。  </p>
<p>那么，如果一个男性不是骂回去，甚至施以暴力的话，他就是选择冷战和离开了。而且，研究发现男性和女性真的是很不相同的。因为在人类进化过程力，女性是哺育的角色，她们需要有快速冷静的能力才能产生足够的乳汁来哺育幼儿。所以，她们即便在暴怒后，也能比较快平息。但是男性不一样的。因为他们以前的职责是负责狩猎和保持警觉，所以那些冷静的慢一些的，更容易生存下来。  </p>
<p>正因为<strong>男性会承受更多的压力且消退得慢，他们更容易选择逃避。也正因为这样，男性对待冲突的看法，会比女性持有更加负面的情绪，持续更长时间</strong>。这也是为什么，有时双方吵架后，女方平静下来可能觉得没什么大事了，男的反而可能就突然说分手，或者离婚了。  </p>
<h3 id="修复的尝试"><a href="#修复的尝试" class="headerlink" title="修复的尝试"></a>修复的尝试</h3><p>四骑士的出现，不是说就一定会导致关系破裂。但是如果这些场景持续发生，就很危险了。Gottman 博士说它们能达到 82% 的离婚预测准确率。如果，在争吵过程中，某一方能尝试发出一些修复关系的信号的话，那会对关系有所缓和。但是如果任何一方试图做出修复，但是另一方一直视而不见，那关系破裂的概率可高达 90% 以上。  </p>
<p>修复的尝试可能只是一个小小的微笑，一句俏皮话，自嘲，或者简单的对不起。但是，如果前面的四骑士出现的次数越多，修复的尝试越难，即便双方可能越努力尝试。  </p>
<p>这本书我第一章还没有看完，但是已经被深深吸引和折服。之前我在「<a href="http://www.thinkingincrowd.me/2017/03/31/intimate-communication-is-not-as-easy-as-you-think/">亲密关系的沟通没你想的那么简单</a>」那篇文章里也提到自己以前和老婆意见相左，和听到抱怨的时候，会因为自己在反思和处理信息，并怕持续冲突而不怎么辩驳，也就基本形成了冷战的模式。之前「<a href="http://www.thinkingincrowd.me/2017/04/09/ask-instead-of-scold/">提问，而不是斥责</a>」那篇文章里，也因为和儿子的对话里觉察到斥责的坏处。  </p>
<p>所以说，谈话的基调真的很重要。还有，在拿这这篇文章里的观点去指责对方前，先反省一下自己。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;估计每个人都听过这样一句话：“责之心，爱之切”。这是很多父母在训斥子女时，经常引用的话。当然，更现代的表述是：“我还不是为了你好？” 这句话一说出来，是站在了多高的道德高地啊，听的人很多时候真的无力反驳。  &lt;/p&gt;
&lt;p&gt;可是，斥责真的是会让你爱的人变得更好吗？变成一个更
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Conflict" scheme="http://www.thinkingincrowd.me/tags/Conflict/"/>
    
      <category term="Criticism" scheme="http://www.thinkingincrowd.me/tags/Criticism/"/>
    
  </entry>
  
  <entry>
    <title>理所当然，在亲密关系里最要不得</title>
    <link href="http://www.thinkingincrowd.me/2017/07/01/taking-it-for-granted-is-the-last-thing-you-want-in-relationship/"/>
    <id>http://www.thinkingincrowd.me/2017/07/01/taking-it-for-granted-is-the-last-thing-you-want-in-relationship/</id>
    <published>2017-07-01T13:34:12.000Z</published>
    <updated>2017-11-19T04:47:46.579Z</updated>
    
    <content type="html"><![CDATA[<p>一眨眼，来北京差不多一年了。自己也不知不觉到了一个整数的节点了。  </p>
<p>到了这个节点，才开始对亲密关系有比较正确的认识，和主动去学习，说实在挺替自己和家人伤心的。不是说我和家人关系不好，而是，我只是简单的认为，只要距离足够近，时间足够多，没什么争吵，就可以了。不是总说，生活是平淡的嘛。  </p>
<p>最近断断续续在加班后，用 Audible 听完「The 5 love languages」这本书。书里面说到一个观点：<strong>每个人都有不同的表达和感受爱的方式。如果我们表达的不当，可能并没有认识到对方的需求和表达的爱意，并产生误解。</strong>  </p>
<p>书里列举了这几种爱的语言：  </p>
<ol>
<li>肯定的言语  </li>
<li>有质量的陪伴  </li>
<li>收获礼物  </li>
<li>服务行为  </li>
<li>肢体的接触  </li>
</ol>
<p>我觉得书里用语言来比喻挺合适的，尤其是当两个人的爱的表达方式是同一类型的时候，各自的要求也尽相同，就像不同的方言一样。每个人可能都熟悉自己的方言，而忽视了对方的表达方式。这个时候，<strong>我们会认为对方做的一些事情是那么的理所当然，也并不认为那是对方像你表达爱意的方式。我们把自己的要求当作是理所当然的，用自己的方言来观察对方，认为对方没有做到自己熟悉的爱的表达方式，而误解对方不爱自己了。</strong>  </p>
<p>回头看自己，我对爱的主要表达方式，应该是第 4 种。在我关爱的人需要帮助的时候，我会尽最大的努力来做任何事情。老婆生病了，在一旁照顾，买水，买吃的，各种跑腿。她怀孕了，我马上从香港回珠海，每天 6 点起来买菜做饭等。这些事情，一般都会有一个触发点，可以让我观察到她有需要帮助的时候，我可以不顾一切付出。但是，这种表达方式，意味着在没有实体的事情发生，我观察不到对方有什么实际需要帮助的地方时，我就基本不会做什么。就像最开始我说的，反正生活在一起，就可以了。  </p>
<p>但是，我老婆最主要的感受爱的方式，是第 2 种。我以前不懂得，「有质量的」陪伴中「有质量的」意思不是我一直认为的只要距离足够近，时间足够多就可以了。以前和她一起坐公司班车上班的时候，她会偶尔对我说，外面的海很蓝，花很漂亮。但是面对这些要约，我只是「嗯」一句，眼睛还是盯着自己的电脑在写代码。所以，你可以想想她心中是慢慢积累了多少不满。她的抱怨，其实从大学谈恋爱时我总是在图书馆就存在了。可是，我却会认为这是她不够独立。  </p>
<p>我在意的对方的爱的表达，可能是第 1 种吧。一点点对我的肯定，我就能安心下来。一些猜疑，就会有很大的打击。所以，我之前并没有认识到她的需要，自己的表达方式又不同，当她表达失望的情绪时，我其实会感觉非常委屈和失落。觉得自己没做错什么，却没有被理解。  </p>
<p>当各自用自己理所当然的方式来要求对方，没有接纳对方的真实想法和需求时，是很痛苦的。而这又往往会造成恶性循环。如果没有人打破这个循环，最后的结果可能就很糟糕了。我来了北京后，一次的吵架让机缘巧合的接触到一些关于亲密关系的知乎 Live 和课程，也多了些时间思考，感觉自己才有了真正的改变。</p>
<p><strong>当我真正接纳了自己的想法和行为，也认识到对方的需要和自己的是不一致的时候，就没有那么委屈和痛苦。认识到了对方的不同，没有了任何的理所当然，自己的语言，行为和心态就有很大的不同。</strong>  </p>
<p>今年的生日，迈出了我最大的一步。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一眨眼，来北京差不多一年了。自己也不知不觉到了一个整数的节点了。  &lt;/p&gt;
&lt;p&gt;到了这个节点，才开始对亲密关系有比较正确的认识，和主动去学习，说实在挺替自己和家人伤心的。不是说我和家人关系不好，而是，我只是简单的认为，只要距离足够近，时间足够多，没什么争吵，就可以了。不
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Love Language" scheme="http://www.thinkingincrowd.me/tags/Love-Language/"/>
    
  </entry>
  
  <entry>
    <title>什么时候，我们变成只会向外推卸责任了？</title>
    <link href="http://www.thinkingincrowd.me/2017/06/11/when-do-we-become-blaming-others-for-everything/"/>
    <id>http://www.thinkingincrowd.me/2017/06/11/when-do-we-become-blaming-others-for-everything/</id>
    <published>2017-06-11T11:05:48.000Z</published>
    <updated>2017-11-19T05:47:50.974Z</updated>
    
    <content type="html"><![CDATA[<p>最近在新京报看到一则<a href="http://epaper.bjnews.com.cn/html/2017-06/06/content_684198.htm?div=-1" target="_blank" rel="external">新闻</a>：  </p>
<blockquote>
<p>据媒体报道，乌鲁木齐市民陈先生电话邀请心情不好的前同事芳芳来家中做客，在陈先生到厨房准备水果时，本来坐在客厅的芳芳突然从客厅窗户坠下五楼身亡。芳芳的父母将陈先生告上法庭，索要死亡赔偿金及丧葬费等近30万元。涉事法院认定陈先生有一定过错，承担20%的次要责任，判决其赔偿芳芳家人8万元。  </p>
<p>该案中，法院判决陈先生的依据是《侵权责任法》第6条，即“行为人因过错侵害他人民事权益，应当承担侵权责任”，这就必须严格考察行为人是否有过错。法院给出的理由是，陈先生“明知芳芳当时心情不好，本应当给予安慰并注意她有无反常行为，但其未预料到芳芳会发生从其家窗户坠落而亡的严重后果，陈先生理应承担责任。”  </p>
</blockquote>
<p>按这种道理推理过去，亲戚或者朋友心情不好，约你出来聊天逛街，然后 Ta 在你陪伴的路上自己突然服毒，冲出马路，或者从商场跳楼自杀，法院也可以说你没有尽到拉住 Ta 的义务。一个人心情不好，去找心理咨询，期间可能毫无征兆地突然跳楼自杀，心理咨询师也要负责任？  </p>
<p>我不知道，对陈先生提起诉讼的芳芳家人，是怎么看待这件事情的。如果芳芳是找了自己的一个亲戚长辈聊天，然后也趁机跳楼自杀，他们会去起诉吗？法院的判决也实在是荒唐。如果说是未成年人出现意外，可能需要对监护人追究责任。可是一个具有完全行事能力的人，在清醒状态下，自己犯错，竟然还要追究他人的过错。不过，本人并非律师，这里我就不过多评论。  </p>
<p>我想说的一点其实是，很多人都只会向外推卸责任，不反思自己的过失，尤其是一些“弱者”。  </p>
<p>芳芳的家人，似乎并没有反思：  </p>
<ul>
<li>为什么芳芳要跳楼？她遇到的挫折，真的就那么无法承受？  </li>
<li>父母之前有没有，或者是怎样进行挫折教育的？  </li>
<li>在她心情低到极点前，一点征兆都没有？家人从来没有发现，也没有疏导？  </li>
<li>在芳芳在遭遇到挫折，心情低到极点的时候，为什么找人谈心的，是一个外人，而不是家人，甚至父母？  </li>
</ul>
<p>我觉得，要追究责任的话，家人和父母本身远远比一个热情招待她的外人要多。他们是不是更加应当承担所谓的“侵权责任”？他们事后真诚地像陈先生了解过芳芳当时的状态和心情吗？他们的心痛程度，内疚程度，获取钱财补偿的期望，哪个更高？诉讼对他们来说，是寻求正义，还是推卸责任的挡箭牌？不知道以后还有哪些人，敢和他们成为朋友，听他们的倾诉？或许芳芳在心情极度低落的时候，找外人倾诉，也是有原因的。  </p>
<p>现在的社会，真的看到很多类似的新闻：那些医闹，因自己疏忽导致孩子受伤的父母等。  </p>
<p>当我们只会向外推卸责任的时候，基本上能获取的，就仅仅是外在的物质赔偿。这些物质赔偿，真的能给他们带来心灵的安慰和改善？<strong>不懂得自省，只会向外推责，收获的只能是疏远，和永不成长的自己</strong>。克雷洛夫 伊凡·安德烈维奇·克雷洛夫(Ivan Andreyevich Krylov)，俄国最伟大的寓言作家说过：“<strong>自己的思想愈卑劣，就愈要挑剔别人的错。</strong>”.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在新京报看到一则&lt;a href=&quot;http://epaper.bjnews.com.cn/html/2017-06/06/content_684198.htm?div=-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新闻&lt;/a&gt;：  &lt;/p&gt;
&lt;b
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Responsibility" scheme="http://www.thinkingincrowd.me/tags/Responsibility/"/>
    
  </entry>
  
  <entry>
    <title>你可能不经意地就“贴标签”了</title>
    <link href="http://www.thinkingincrowd.me/2017/05/31/labelling-is-easy/"/>
    <id>http://www.thinkingincrowd.me/2017/05/31/labelling-is-easy/</id>
    <published>2017-05-31T10:52:25.000Z</published>
    <updated>2017-11-19T05:47:56.282Z</updated>
    
    <content type="html"><![CDATA[<p>“中国人就是没礼貌”，“河南人就是XXX”，“处女座就是YYY” 这些言论，很多人现在都能理解它们其实是一种“贴标签”的行为。  </p>
<p>虽然不能说“贴标签”完全是坏事，因为它其实是人在认识事物的过程中发展出来的一种手段，可以让我们快速面对陌生的事物，知道如何更好地和它们相处。但是，如果我们习惯了“贴标签”这种行为，甚至推广到一些需要建立亲密关系的人或者事物的时候，问题可能就很大。标签一旦贴上，片面的观点就容易产生，我们就不容易看到背后的互动关系和问题的根本原因。  </p>
<h2 id="对他人的标签"><a href="#对他人的标签" class="headerlink" title="对他人的标签"></a>对他人的标签</h2><p>“你怎么老是这样？”，“Ta 什么都好，就是不好好 XX。”，“Ta 就是不爱回家，老在外面疯”，“怎么那么笨” 这些话，应该不少人都说过，尤其是父母对着自己的“熊孩子”的时候。  </p>
<p>以前我儿子不喜欢叫人。所以，其实我妈和老婆经常说他“怎么这么没有礼貌”。我虽然不知道儿子为什么不喜欢叫人，但是在这方面我能理解他，因为我自己小时候也是一样。所以，这个“标签”其实我不太认同。他不肯叫人的时候，我就和儿子说：“你看到熟悉的人，可以微笑一下，说声 Hi，或者挥挥手。也不一定是说 XXX 好。”  </p>
<p>后面经观察证实，他会很热情地向他熟悉和喜欢的人打招呼。只是，小朋友比较实诚，心情不好，遇到他不熟悉，甚至是不喜欢的人，就鸟都不鸟一下，招呼也不打。他们不懂得敷衍和皮笑肉不笑。最近「妈呀我呀」公众号推了一篇有趣的文章「我以为当妈已经够难了，没想到当小孩才是最难的！」，里面的一个场景就是：“如果大人被小孩子这样说：要大声说老板好哦！要有礼貌！声音要响亮！老板好！” 你的感觉如何？回想到你要求小朋友叫老师好的情景了吗？想想就好笑。  </p>
<h2 id="亲密关系的标签"><a href="#亲密关系的标签" class="headerlink" title="亲密关系的标签"></a>亲密关系的标签</h2><p>曾经，老婆让我感觉“怎么她现在那么依赖？以前不是很独立的吗？”。后来她忍无可忍，狠狠地抱怨我过后，我才看到背后的问题。  </p>
<p>现在回想起来，除了本人以前比较呆，不怎么懂得处理亲密关系，没及时留意到问题的发生外。那个不经意的“贴标签”行为，让我忽视了问题的根源。</p>
<p><strong>“怎么 Ta 现在这样？以前不是很 XX 的吗？” 像这样的句型，应该可以看作典型的“贴标签”行为</strong>。如果说 Ta 以前不这样，现在却变了。可以肯定的是，导致变化的原因肯定包含了外部因素，包含了 Ta 在某种互动关系里的改变。这里必须注意的是，不能把这个变化归咎到 Ta 单方面的问题上。很大程度上，应该首先从互动关系的另一方寻求导致变化的原因。  </p>
<p>所以，以前当老婆让我有那种感觉的时候，那个不经意的标签，让我忽视了我才是产生问题的原因。是我做了什么，或者是没有做什么，导致了这种改变。如果当时我及时意识到，并积极反思，可能就不需要等到老婆抱怨才看到问题在哪里了。  </p>
<h2 id="自我的标签"><a href="#自我的标签" class="headerlink" title="自我的标签"></a>自我的标签</h2><p>自我的标签，每个人可能都自己给自己贴不少。我当然不能幸免：不爱长跑，内向，不懂处理亲密关系等。给自己贴标签，其实是自我和其它事物的互动关系出了问题。像我以前认定自己不能长跑，就是因为自己和长跑这种运动关系不对，采用过不正确的方法和理念，所以直接放弃治疗。很多人放弃学习英语也是一样。  </p>
<p>不过，现在这些标签我要么撕掉，要么更深入理解它出现的场景，要么我已经“接纳”了这个标签，并尝试寻找合适的方式来慢慢改善。现在，我知道我起码可以跑 5 公里，甚至 10 公里。面对熟悉的人，我不会内向，因为在带小团队的时候，我可以主动和成员互动，也聊的不错。“内向”对我来说，只是不在一堆陌生人当中，主动搭话而已。以前在大学时浏览完那本「男人来自火星，女人来自水星」后就没什么下闻，现在能主动寻求心理和亲密关系的课程来学习，并经常回顾总结。  </p>
<p>我可能还有不少标签，但是我渐渐懂得如何面对它们，学习怎么和它们相处。<br>贴标签这种轻易下结论，而不深入探讨背后的互动关系的行为，最后可能反而强化了问题本身。  </p>
<p>想想你给自己和别人贴的标签，看看有哪些可以揭下来？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“中国人就是没礼貌”，“河南人就是XXX”，“处女座就是YYY” 这些言论，很多人现在都能理解它们其实是一种“贴标签”的行为。  &lt;/p&gt;
&lt;p&gt;虽然不能说“贴标签”完全是坏事，因为它其实是人在认识事物的过程中发展出来的一种手段，可以让我们快速面对陌生的事物，知道如何更好地
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Labelling" scheme="http://www.thinkingincrowd.me/tags/Labelling/"/>
    
  </entry>
  
  <entry>
    <title>儿子最近哭的多了，但我觉得他长大了</title>
    <link href="http://www.thinkingincrowd.me/2017/05/21/my-son-cries-more-recently-but-I-think-he-grows-up/"/>
    <id>http://www.thinkingincrowd.me/2017/05/21/my-son-cries-more-recently-but-I-think-he-grows-up/</id>
    <published>2017-05-21T02:01:19.000Z</published>
    <updated>2017-11-19T05:48:00.878Z</updated>
    
    <content type="html"><![CDATA[<p>最近和老婆聊天的时候，听到她说儿子哭的次数多了。  </p>
<p>有一次，儿子因为洗澡的时间和预定的时间刚好，他没提前完成，所以没能够获取积分来增加玩手机的时间。在睡觉前，他哭了。老婆没想到他这么在意这一些积分，在安慰他的时候说：“少积一个晚上，也没什么嘛，别哭了。”没想到他哭的更伤心了。  </p>
<p>另外的一次是，上学前，他出门后发现忘记带魔方了。他想带魔方，是因为迟一些有魔方比赛，他希望能在空闲时间练习一下。所以，他面临两个选择：1）回去拿，但是应该就会迟到。2）这一天就先不带了。当时妈妈和他说：“今天就先不带了吧，不玩一个早上也没什么啦”。然后他就哭了。后来老婆问他：“你真的很想回去拿吗？那就很可能迟到，如果迟到，你就要站着早读，你自己想好怎么做吧？”然后他还是很高兴地决定回去拿魔方。  </p>
<h2 id="为什么我还觉得他长大了？"><a href="#为什么我还觉得他长大了？" class="headerlink" title="为什么我还觉得他长大了？"></a>为什么我还觉得他长大了？</h2><p>其实，我和老婆都觉得儿子是比较有主见的人，这个性格比较不像我，像我老婆多一些。但是，他以前会因为他的意见和他人不同，和其他人大声争吵，偏暴力和自我中心多一些。  </p>
<p>现在他用哭的方式来表达，意味着他能体会到另一种矛盾的声音，尊重这种矛盾的存在。他能把对外的宣泄，变成内在自我情绪的疏导，调节和妥协。这是非常大的一种进步。我觉得是共情能力的成长。当然，如果一直用哭的方式来表达，肯定也不是好的事情。但是，我觉得这是能够进行下一步，和他更好的商量和讲道理的关键，因为他能听的进去不同的声音。我们下一步是教会他使用更合适的方式来处理矛盾。以前那个大声争吵，自我中心的他是没法做到的。  </p>
<h2 id="我和他妈妈也成长了"><a href="#我和他妈妈也成长了" class="headerlink" title="我和他妈妈也成长了"></a>我和他妈妈也成长了</h2><p>可能很多看到儿子在哭的父母，会说：“你还是不是男孩子啊？哭什么！” 我很庆幸，我们没有这样做。每一个父母，和自己的孩子相处的时候，肯定都有过争吵的时候。父母经常会利用自己的权威，把自己认为正确的价值观和选择，强加到孩子的身上。他们甚至还冠冕堂皇地说：“这都是为了你好。” 我和老婆，虽然尽量会和儿子商量和讨论，但是有时也会不自觉的让他做出一些对我们来说是正确的选择，但是不是他内心想遵循的。  </p>
<p>就像那个带魔方的例子。对父母来说，当然不迟到是更加“政治正确”的事情。我们传统的观念，被罚站是不好的。而且如果我们要上班的话，也可能回去拿也意味着浪费我们的时间，我们也迟到，我们的利益也受损。可是，我们或许没有看到孩子的内心需求，他可能宁可罚站，也想回去拿。  </p>
<p>现在，我们看到了。虽然可能还不够及时，不够迅速，但是我们至少看到了，这也是我们共情能力的成长。我也相信我们以后能更及时地体会，并和儿子更好地沟通。  </p>
<p><strong>“看到不一样，才能做到不一样。面对关系难题，你需要多一双眼睛。”</strong>  </p>
<p>我现在真的是越来越喜欢这一句话。这句是李松蔚在喜马拉雅「换个角度，洞悉相处之道」的宣传语。我购买了这个专辑真的觉得物超所值。听说 5 月 31 号以后就要涨价了，所以有兴趣的朋友，可以用我这个红包链接去买。<a href="http://xima.tv/qiamR4" target="_blank" rel="external">http://xima.tv/qiamR4</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近和老婆聊天的时候，听到她说儿子哭的次数多了。  &lt;/p&gt;
&lt;p&gt;有一次，儿子因为洗澡的时间和预定的时间刚好，他没提前完成，所以没能够获取积分来增加玩手机的时间。在睡觉前，他哭了。老婆没想到他这么在意这一些积分，在安慰他的时候说：“少积一个晚上，也没什么嘛，别哭了。”没想
    
    </summary>
    
      <category term="Psychology" scheme="http://www.thinkingincrowd.me/categories/Psychology/"/>
    
    
      <category term="Relationship" scheme="http://www.thinkingincrowd.me/tags/Relationship/"/>
    
      <category term="Empathy" scheme="http://www.thinkingincrowd.me/tags/Empathy/"/>
    
      <category term="Mature" scheme="http://www.thinkingincrowd.me/tags/Mature/"/>
    
  </entry>
  
  <entry>
    <title>怎么可能，在我的机器都是好好的</title>
    <link href="http://www.thinkingincrowd.me/2017/05/19/problem-solving-from-another-angle/"/>
    <id>http://www.thinkingincrowd.me/2017/05/19/problem-solving-from-another-angle/</id>
    <published>2017-05-19T13:23:37.000Z</published>
    <updated>2017-05-19T13:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看的几部悬疑片，主角都淡淡地说过：“要转换角度来思考问题”。  </p>
<p>在「嫌疑犯X的献身」里面，为什么女主可以很淡定的说她没有杀死前夫，为什么她可以有“确凿的”不在场证据？后来发现是因为警察发现的尸体，和作案时间，并不是她的前夫和杀死他的那一天。  </p>
<p>在「看不见的客人」里面，协助男主分析案件的“律师”，告诉他一个小故事：“在一个空荡的谷仓里面，正中间的房梁下有一个人悬梁自尽。可是那个人脚下却没有任何可以让他垫脚站上去的东西。后来发现这个”看似“不存在”的东西，其实是一个大冰块，它是曾经存在的，只是“消失”了。  </p>
<p>悬疑片里面，有大量的这种类型的桥段。  </p>
<p>其实，当一个程序员，我们也经常需要用这种“转换角度来思考问题”的思路，来发现导致看似不可能出现的问题的原因。  </p>
<p>拿我最近两次排查系统问题来举例吧。  </p>
<p>第一个问题是，在我们平台的直播里，偶然一些原因会导致主讲人的语音缺少了长度信息。我反复看获取语音长度，和控制消息推送到直播间的相关代码。可是在语音缺失的情况下，怎么都不应该导致消息推送出去。那为什么直播间会出现那样的消息呢？后来发现，原因是在另一个统计消息点赞数，刷新缓存的任务。它会把语音长度缺失的数据也刷到缓存，所以直播间就能看到那个数据了。  </p>
<p>另一个问题是，最近我的手机会收到服务号推送直播开始的通知。可是那些直播命名都是已经结束了的。我怎么看代码都百思不得其解。我观察到两个奇怪的现象：1）误推送的消息，显示的直播时间都是差了 8 个小时，显示的是 ISO 时间。2）线上服务器的日志，根本没有这些异常通知的发送日志记录。原来，压测团队在模拟的线上环境里跑系统和后台任务的时候，用了线上环境的一些参数，导致通过线上的微信服务号，根据压测环境数据库的直播，推送了消息。  </p>
<p>我们程序员，经常被调侃说，当测试或产品告诉我们发现 Bug 的时候，我们经常会回复：“没可能，在我的机器都是好好的。” 其实，有些问题是以我们从来没有想到的角度，而被触发的。下次说没可能前，先停一停，想一想。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看的几部悬疑片，主角都淡淡地说过：“要转换角度来思考问题”。  &lt;/p&gt;
&lt;p&gt;在「嫌疑犯X的献身」里面，为什么女主可以很淡定的说她没有杀死前夫，为什么她可以有“确凿的”不在场证据？后来发现是因为警察发现的尸体，和作案时间，并不是她的前夫和杀死他的那一天。  &lt;/p&gt;

    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Problem Solving" scheme="http://www.thinkingincrowd.me/tags/Problem-Solving/"/>
    
  </entry>
  
  <entry>
    <title>初识 React, Flux 和 Redux</title>
    <link href="http://www.thinkingincrowd.me/2017/05/13/get-to-know-react-flux-redux/"/>
    <id>http://www.thinkingincrowd.me/2017/05/13/get-to-know-react-flux-redux/</id>
    <published>2017-05-13T09:18:51.000Z</published>
    <updated>2017-05-14T13:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期，我大概花了一周，每天晚上 2 小时左右和一个周末的时间，通过官方文档来了解 React, Redux, Flux 几个框架和概念。写下此文是希望帮自己梳理和巩固一下对它们的认识。如果哪里理解有误，希望大家不吝指出。  </p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>围绕 JavaScript 来设计的思想，把所有的 Component，都化作 JavaScript 的一个 function 或者 object，通过丰富的工具来支持类型，错误检查等确实是很赞的想法。如果使用的是 AngularJS 这样的模板和自定义 directive，不小心打错了字，框架是选择忽略还是报错提醒呢，因为那个它不认识的标签，可能是别家的啊？所以，在这点上，React 的做法有优胜的地方。  </p>
<p>还有，React 里面几乎所有的东西都是 Component，通过把 Component 进行高阶组合（HOC），确实可以产生威力无穷的变化。而且它的专有名词和概念，真的比 AngularJS 少太多（虽然其实东西都类似，只是 AngularJS 特意弄些名词出来）。如果能清晰理解 React 的单向数据流，和 HOC 的概念，上手应该说没 AngularJS 那么复杂。虽然老实说，HOC 可能和递归一样，对一些人来说，是非常不好理解的概念。  </p>
<p>对于一个老程序员来说，对 React 最“看不顺眼的”，莫过于 JSX 这种把 “HTML” 标签写到 JavaScript 里的鬼玩意了。我们以前的教诲是，不能把逻辑代码和表现层混杂在一起。再加上，我个人一直觉得，一个结构清晰的表现层，可以清楚地展现页面概貌，对系统的设计和理解有很大的帮助。所以，一直以来，我是倾向于喜欢 AngularJS 式的页面模板（template）风格，然后在上面添加声明式的行为。但是，随着组件化理念的发展，页面已经无法避免被切分的命运。所以，只能思考哪种才是更合适，更清晰的模块化，低耦合，高内聚的方式。或许像 Polymer 那样的 Web Component 形式？知乎上一篇文章也讨论了 <a href="https://www.zhihu.com/question/48528161" target="_blank" rel="external">JSX有哪些缺陷？</a>，大家不妨一看。  </p>
<p>至于单向数据流，和双向数据绑定，老实说，我以前是喜欢双向绑定多一些的。某种程度上来说，框架从工具层面降低程序员的心智门槛，它自己计算和处理数据的变化就可以了。反正程序员可以假定最终数据是同步的，不管它是 dirty checking 还是什么方式。但是，面对复杂的页面行为和状态变更，把数据变为 Immutable，把变更控制在有限范围，尽量编写纯函数，确实可能更好。非纯函数和对外部全局的依赖，一不小心就会出问题。以前在玩 AngularJS 1 的时候，[自己就遇到坑了][]。  </p>
<h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><p>根据 React Component 绑定数据和接收事件的形式，Flux 是秉持单向数据流动里面的一种代码架构方式。  </p>
<p>Flux 包含三大主要部分：Dispatcher, Store, 和 View（其实就是 React 的 Component）。它声称自己没有 MVC 里面的 Controller，但是有 Controller-View 和 Action Creator。真是受不了这些框架了，老是造一些名词，再标榜和以前不同。其实别管那么多，最重要的是<strong>搞清楚数据的流动情况，数据的流动情况，数据的流动情况</strong>。  </p>
<p>下面我拿消息列表的例子来说明 Flux 里面的主要部分是怎么关联，数据在里面是怎么流动的。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/flux_data_flow.png" alt="Flux Data Flow"></p>
<p>这里有两个场景：  </p>
<h3 id="页面打开，自动加载消息"><a href="#页面打开，自动加载消息" class="headerlink" title="页面打开，自动加载消息"></a>页面打开，自动加载消息</h3><p>这个场景的数据流动路线是：1 -&gt; 2 -&gt; A -&gt; B  </p>
<p>页面打开的时候，Action Creator 把 <code>LOAD_MSGS</code> 这个 Action 推给 Dispatcher。两个 Store 都会接收到这个 Action。Store B 把数据赋予 <code>msgs</code>，更改了内部 State，然后更新 View B。  </p>
<p>Store A 呢？Store A 里面的 <code>unreadCount</code> 状态数据，是依赖 Store B 里面的 <code>msgs</code> 计算出来的。所以，Store A 里的处理逻辑其实会忽略接收到的 Action，通过 <code>Dispatcher.waitFor</code> 的方法，声明必须等待 Store B 的计算完成，然后 derive 自己需要的数据，再更新 View A。  </p>
<h3 id="用户点击阅读某一条消息"><a href="#用户点击阅读某一条消息" class="headerlink" title="用户点击阅读某一条消息"></a>用户点击阅读某一条消息</h3><p>这个场景的数据流动路线是：3 -&gt; 4 -&gt; 5 -&gt; A -&gt; B  </p>
<p>当用户点击某一条消息时，Action Creator 接收到 View B 的事件，构造了包含消息 id 的 <code>READ_MSG</code> Action，推给 Dispatcher。紧接着的操作类似上面的场景，不再累述。  </p>
<p>结合场景来理解数据的流动，就能比较容易搞清楚 Flux 组成部分的定义了。  </p>
<ol>
<li>Dispatcher 是全局的，只有一个。  </li>
<li>Action Creator 负责接收 View 的事件，产生 Action。当然也可以按需，自己产生 Action。  </li>
<li>Action 只是简单的操作指令，包含必要的数据，但是没有处理逻辑。  </li>
<li>Store 有多个，同时接收所有的 Action，按各自处理 Logic，改变数据内部 State。  </li>
</ol>
<p>View 和 Controller View 的不同在于，Controller View 负责接收 Store 广播出来的事件，然后把更新的数据扩散下去其它的 View。所以 Controller View 是接近于顶层的。  </p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 又是什么鬼呢？有人问 Redux 算不算是 Flux 架构的一种实现。Redux 作者说它既是，又不是。有兴趣的朋友自己看文档官网里，作者引的 Tweet 吧。神仙也会打架的，就是因为各自造不同的名词出来。  </p>
<p>那在这个框架底下，数据的流动又是如何的呢？我们通过上面同样的场景来看一下：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/redux_data_flow.png" alt="Redux Data Flow"></p>
<h3 id="页面打开，自动加载消息-1"><a href="#页面打开，自动加载消息-1" class="headerlink" title="页面打开，自动加载消息"></a>页面打开，自动加载消息</h3><p>这个场景的数据流动路线是：1 -&gt; 2 -&gt; A -&gt; B -&gt; C -&gt; D  </p>
<p>页面打开的时候，Action Creator 把 <code>LOAD_MSGS</code> 这个 Action 作为参数调用 <code>Store.dispatch</code> 方法。然后和 Store 绑定的所有 Reducer 都会接收到 Action，和它们各自负责的部分 State 结构。Store 再把各个 Reducer 计算后的新 State 合并。Container Component 把 State 的数据转换成 Presentation Component 需要的 Property 和绑定事件。   </p>
<h3 id="用户点击阅读某一条消息-1"><a href="#用户点击阅读某一条消息-1" class="headerlink" title="用户点击阅读某一条消息"></a>用户点击阅读某一条消息</h3><p>这个场景的数据流动路线是：3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; A -&gt; B -&gt; C -&gt; D  </p>
<p>当用户点击某一条消息时，Presentation Component B 接收到用户操作，通过 Container Component B 绑定在它之上的事件，通知 Action Creator 构造了包含消息 id 的 <code>READ_MSG</code> Action，调用 <code>Store.dispatch</code> 方法通知 Reducers。后面的数据流动和上面类似。  </p>
<p>下面解释一下 Redux 和 Flux 的不同，以及里面各个部分的关键定义。  </p>
<ol>
<li>全局单一的 State（作者声称的 Single source of truth）。  </li>
<li>没有 Dispatcher（实际上统一的 Store 承担了 Dispatcher 的功能）。  </li>
<li>Reducer 应该是 pure function 纯函数。而且它们同步更新各个部分的 state，最后汇总。  </li>
<li>State is Readonly。任何改动都不改变原有的数据，而是生成新的数据。  </li>
<li>Container Component 相当于 Flux 的 Controller View。Presentation Component 是普通的 View。  </li>
<li>Action 和 Action Creator 基本是一样的。  </li>
</ol>
<p>Redux 的关键不同之处是，它只有统一的 State。所以，从一开始就要尽量设计好 State 的结构。官网上还特别提到，数据应该要 normalized，就像 RDBMS 里面存储数据那样，尽量用 id 来指向数据，不冗余。  </p>
<p>所以，在 Redux 这里，我并没有添加 <code>unreadCount</code> 这个属性给 Component A。它们应该直接从 <code>msgs</code> 里面的消息里推算出来。还有，如果出现前面说的 State 里面如果有数据相互影响的情况，我觉得可能需要在某个 Action 运算后再 dispatch 新 action 出来。因为 Reducers 的调用都是同步的，而且好像无法指定执行顺序。不过这部分我还不太确定，需要实践和再查找资料。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期，我大概花了一周，每天晚上 2 小时左右和一个周末的时间，通过官方文档来了解 React, Redux, Flux 几个框架和概念。写下此文是希望帮自己梳理和巩固一下对它们的认识。如果哪里理解有误，希望大家不吝指出。  &lt;/p&gt;
&lt;h2 id=&quot;React&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="React" scheme="http://www.thinkingincrowd.me/tags/React/"/>
    
      <category term="Redux" scheme="http://www.thinkingincrowd.me/tags/Redux/"/>
    
      <category term="Flux" scheme="http://www.thinkingincrowd.me/tags/Flux/"/>
    
  </entry>
  
</feed>
